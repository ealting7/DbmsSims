using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using Microsoft.AspNet.Identity;
using System.Data.Entity;
using System.Data.SqlClient;
using System.Configuration;
using System.Data;
using DbmsSims.Models.ICMS_DATA_STAGING;
using DbmsSims.Models.ICMS2;
using DbmsSims.Models.ICMS2.ViewModels;
using DbmsSims.Models.Downloads.ViewModels;
using Excel = Microsoft.Office.Interop.Excel;
using System.Net;
using System.Runtime.InteropServices;
using System.IO;
using System.Text.RegularExpressions;

namespace DbmsSims.Repository
{


    public class DownloadsRepository
    {


        public void PopulateDownloadItems(ref DownloadsViewModel dwnldsvmToPopulate)
        {

            try
            {

                using (var db = new ICMS2DbContext())
                {
                    dwnldsvmToPopulate.ReportDownloadAdminItems = (from rptdowns in db.DbmsReportDownloadAdmin

                                                                 //left outer join
                                                                 join tpas in db.DbmsTpas
                                                                 on rptdowns.tpa_id equals tpas.tpa_id
                                                                 into tpasjoin
                                                                 from tpas in tpasjoin.DefaultIfEmpty()

                                                                 where rptdowns.disabled == null || rptdowns.disabled == 0
                                                                 select new DownloadsViewModel
                                                                 {
                                                                    RptDownloadId = rptdowns.rpt_download_id,
                                                                    TpaName = tpas.tpa_name,
                                                                    DownloadType = ((bool)rptdowns.is_claim_file ? "Claim" :
                                                                                    (bool)rptdowns.is_elgibility_file ? "Eligibility" : "N/A"),
                                                                 }
                                                                 ).ToList();
                }

            }
            catch(Exception ex)
            {

            }

        }

        public ReportDownloadAdmin GetReportDownloadAdminModel(int RptDownloadId)
        {
            ReportDownloadAdmin rptdwnldadminToReturn = new ReportDownloadAdmin();


            try
            {

                using (var db = new ICMS2DbContext())
                {
                    rptdwnldadminToReturn = (from rptdwnldadmin in db.DbmsReportDownloadAdmin
                                             where rptdwnldadmin.rpt_download_id == RptDownloadId
                                             select rptdwnldadmin).SingleOrDefault();
                }


                return rptdwnldadminToReturn;
            }
            catch(Exception ex)
            {
                return rptdwnldadminToReturn;
            }
        }        




        public bool ResetDownloadStatus(ref DownloadsViewModel FileToReset)
        {
            bool Reset = false;

            try
            {
                if (FileToReset.RptDownloadId > 0)
                {
                    if (FileToReset.DownloadItem.rpt_download_id.CompareTo(0) == 0)
                    {
                        FileToReset.DownloadItem = GetReportDownloadAdminModel(FileToReset.RptDownloadId);
                    }


                    if (FileToReset.DownloadItem.rpt_download_id.CompareTo(0) > 0)
                    {
                        FileToReset.DownloadCompleted = false;
                        FileToReset.DownloadSuccessful = false;


                        if (MarkFileAsDownloadComplete(ref FileToReset))
                        {
                            Reset = true;
                        }
                    }
                }


                return Reset;
            }
            catch(Exception ex)
            {
                return Reset;
            }
        }






        public bool VerifyDownloadFileExistsOnFtp(ref DownloadsViewModel dwnldsvmToVerify)
        {

            bool Verified = false;

            try
            {

                if (dwnldsvmToVerify.RptDownloadId > 0)
                {

                    if (dwnldsvmToVerify.DownloadItem.rpt_download_id.CompareTo(0) == 0)
                    {
                        //get a reference to the ReportDownloadAdmin model
                        dwnldsvmToVerify.DownloadItem = GetReportDownloadAdminModel(dwnldsvmToVerify.RptDownloadId);
                    }


                    if (dwnldsvmToVerify.DownloadItem.rpt_download_id.CompareTo(0) > 0)
                    {

                        if (!string.IsNullOrEmpty(dwnldsvmToVerify.DownloadItem.ftp_actual_directory) &&
                            !string.IsNullOrEmpty(dwnldsvmToVerify.DownloadItem.dts_package_filename_to_use))
                        {
                            //check the ftp site for the file mentioned in the ReportDownloadAdmin model
                            if (VerifyFileIsOnFtp(dwnldsvmToVerify))
                            {


                                EmployerRepository emplyRepo = new EmployerRepository();
                                int intTpaId = 0;
                                intTpaId = Convert.ToInt32(dwnldsvmToVerify.DownloadItem.tpa_id);

                                dwnldsvmToVerify.TpaName = emplyRepo.GetTpaNameUsingTpaId(intTpaId);

                                if (dwnldsvmToVerify.DownloadItem.is_elgibility_file != null)
                                {
                                    if ((bool)dwnldsvmToVerify.DownloadItem.is_elgibility_file)
                                    {
                                        dwnldsvmToVerify.DownloadType = "Eligibility";
                                    }
                                }
                                else if (dwnldsvmToVerify.DownloadItem.is_claim_file != null)
                                {
                                    if ((bool)dwnldsvmToVerify.DownloadItem.is_claim_file)
                                    {
                                        dwnldsvmToVerify.DownloadType = "Claim";
                                    }
                                }

                                Verified = true;

                            }
                        }

                    }

                }

                return Verified;

            }
            catch (Exception ex)
            {
                return Verified;
            }

        }

        public bool VerifyDownloadNotInProgress(ref DownloadsViewModel dwnldsvmToDownload)
        {

            bool InProgress = false;

            try
            {

                if (dwnldsvmToDownload.RptDownloadId > 0)
                {

                    if (dwnldsvmToDownload.DownloadItem.rpt_download_id.CompareTo(0) == 0)
                    {
                        dwnldsvmToDownload.DownloadItem = GetReportDownloadAdminModel(dwnldsvmToDownload.RptDownloadId);
                    }


                    if (dwnldsvmToDownload.DownloadItem.rpt_download_id.CompareTo(0) > 0)
                    {

                        if (VerifyDownloadFileExistsOnFtp(ref dwnldsvmToDownload))
                        {

                            if (!string.IsNullOrEmpty(dwnldsvmToDownload.DownloadingUserId))
                            {
                                if (VerifyFileDownloading(ref dwnldsvmToDownload))
                                {
                                    InProgress = true;
                                }
                            }

                        }

                    }

                }

                return InProgress;

            }
            catch (Exception ex)
            {
                return InProgress;
            }

        }

        public bool VerifyFileIsOnFtp(DownloadsViewModel dwnldsvmToVerify)
        {

            bool FileOnFtp = false;

            try
            {
                string strFtpAddress = dwnldsvmToVerify.DownloadItem.ftp_actual_directory + dwnldsvmToVerify.DownloadItem.dts_package_filename_to_use;

                var request = (FtpWebRequest)WebRequest.Create(strFtpAddress);
                request.EnableSsl = true;
                request.Credentials = new NetworkCredential(dwnldsvmToVerify.DownloadItem.UserName, dwnldsvmToVerify.DownloadItem.Password);
                request.Method = WebRequestMethods.Ftp.GetFileSize;


                FtpWebResponse response = (FtpWebResponse)request.GetResponse();

                if (response != null)
                {
                    FileOnFtp = true;
                }

                return FileOnFtp;

            }
            catch (Exception ex)
            {
                return FileOnFtp;
            }

        }

        public bool VerifyFileDownloading(ref DownloadsViewModel dwnldsvmToVerify)
        {

            bool FileDownloading = false;

            try
            {

                ReportDownloadAdminFileDownloads rptdwnlodadmfledwnldsToVerifyAgainst = new ReportDownloadAdminFileDownloads();

                DateTime dteNow = DateTime.Now;

                int intRptDwnlIdToVerify = dwnldsvmToVerify.RptDownloadId;

                using (var db = new ICMS2DbContext())
                {

                    rptdwnlodadmfledwnldsToVerifyAgainst = (from rptdwnldsadmfledwnld in db.DbmsReportDownloadAdminFileDownloads
                                                            where rptdwnldsadmfledwnld.rpt_download_id == intRptDwnlIdToVerify
                                                            && rptdwnldsadmfledwnld.download_end_date == null
                                                            select rptdwnldsadmfledwnld).SingleOrDefault();
                }



                if (rptdwnlodadmfledwnldsToVerifyAgainst != null)
                {
                    if (rptdwnlodadmfledwnldsToVerifyAgainst.rpt_download_id.Value.CompareTo(0) > 0)
                    {
                        dwnldsvmToVerify.DownloadErrorMessage = "File Being Downloaded - REPORT_DOWNLOAD_ADMIN_FILE_DOWNLOADS";
                        FileDownloading = true;
                    }
                }

                return FileDownloading;

            }
            catch (Exception ex)
            {
                return FileDownloading;
            }

        }





        public bool MarkFileAsDownloading(ref DownloadsViewModel FileToMarkAsDownloading)
        {
            bool MarkedAsDownloading = false;

            try
            {
                if (FileToMarkAsDownloading.RptDownloadId > 0 && 
                    !string.IsNullOrEmpty(FileToMarkAsDownloading.DownloadingUserId))
                {
                    Guid OutDownloadUserId = Guid.Empty;


                    if (Guid.TryParse(FileToMarkAsDownloading.DownloadingUserId, out OutDownloadUserId))
                    {
                        ReportDownloadAdminFileDownloads InsertIntoTable = new ReportDownloadAdminFileDownloads();
                        InsertIntoTable.rpt_download_id = FileToMarkAsDownloading.RptDownloadId;
                        InsertIntoTable.download_start_date = DateTime.Now;
                        InsertIntoTable.download_complete = FileToMarkAsDownloading.DownloadCompleted;
                        InsertIntoTable.download_user_id = OutDownloadUserId;


                        using (var db = new ICMS2DbContext())
                        {
                            db.DbmsReportDownloadAdminFileDownloads.Add(InsertIntoTable);


                            int InsertResults = 0;
                            InsertResults = db.SaveChanges();

                            if (InsertResults > 0)
                            {
                                MarkedAsDownloading = true;
                            }
                        }
                    }
                }


                return MarkedAsDownloading;
            }
            catch(Exception ex)
            {
                return MarkedAsDownloading;
            }
        }

        public bool MarkFileAsDownloadComplete(ref DownloadsViewModel FileToMarkAsComplete)
        {
            bool MarkedAsComplete = false;

            try
            {

                if (FileToMarkAsComplete.RptDownloadId > 0)
                {
                    List<ReportDownloadAdminFileDownloads> UpdateDatabase = new List<ReportDownloadAdminFileDownloads>();


                    using (var db = new ICMS2DbContext())
                    {
                        int RptDownloadId = FileToMarkAsComplete.RptDownloadId;


                        UpdateDatabase = (from rptdwldsadmfledwnld in db.DbmsReportDownloadAdminFileDownloads
                                          where rptdwldsadmfledwnld.rpt_download_id == RptDownloadId
                                          select rptdwldsadmfledwnld).ToList();


                        if (UpdateDatabase != null)
                        {
                            if (UpdateDatabase.Count > 1)
                            {
                                foreach (ReportDownloadAdminFileDownloads DownloadToMarkComplete in UpdateDatabase)
                                {
                                    DownloadToMarkComplete.download_complete = FileToMarkAsComplete.DownloadCompleted;
                                    DownloadToMarkComplete.download_successful = FileToMarkAsComplete.DownloadSuccessful;
                                    DownloadToMarkComplete.download_end_date = DateTime.Now;
                                    DownloadToMarkComplete.note = "Marked Complete After Download Failed/Errors/Closed on: " + DownloadToMarkComplete.download_end_date.ToString();


                                    db.Entry(DownloadToMarkComplete).State = EntityState.Modified;
                                    int updatesreturned = db.SaveChanges();


                                    if (updatesreturned > 0)
                                    {
                                        if (!MarkedAsComplete)
                                        {
                                            MarkedAsComplete = true;
                                        }
                                    }
                                }
                            }
                            else
                            {
                                foreach (ReportDownloadAdminFileDownloads DownloadToMarkComplete in UpdateDatabase)
                                {
                                    DownloadToMarkComplete.download_complete = FileToMarkAsComplete.DownloadCompleted;
                                    DownloadToMarkComplete.download_successful = FileToMarkAsComplete.DownloadSuccessful;
                                    DownloadToMarkComplete.download_end_date = DateTime.Now;


                                    db.Entry(DownloadToMarkComplete).State = EntityState.Modified;
                                    int updatesreturned = db.SaveChanges();


                                    if (updatesreturned > 0)
                                    {
                                        if (!MarkedAsComplete)
                                        {
                                            MarkedAsComplete = true;
                                        }
                                    }
                                }
                            }
                        }
                    }

                }

                return MarkedAsComplete;

            }
            catch(Exception ex)
            {
                return MarkedAsComplete;
            }
        }







        public bool ParseDownloadFile(ref DownloadsViewModel FileToDownload)
        {
            bool Downloaded = false;

            try
            {
                if (FileToDownload.RptDownloadId > 0)
                {
                    if (FileToDownload.DownloadItem.rpt_download_id.CompareTo(0) == 0)
                    {
                        FileToDownload.DownloadItem = GetReportDownloadAdminModel(FileToDownload.RptDownloadId);
                    }


                    if (FileToDownload.DownloadItem.rpt_download_id.CompareTo(0) > 0)
                    {
                        SetParsingParameters(ref FileToDownload);


                        if (GetFileFromFtp(FileToDownload))
                        {
                            //ELIGIBILITY
                            if (FileToDownload.DownloadItem.is_elgibility_file != null)
                            {
                                if ((bool)FileToDownload.DownloadItem.is_elgibility_file)
                                {
                                    FileToDownload.DownloadCompleted = false;
                                    FileToDownload.DownloadSuccessful = false;


                                    DeleteEligibilityLoggingFiles(ref FileToDownload);
                                    MarkFileAsDownloading(ref FileToDownload);


                                    if (ParseEligibilityFile(ref FileToDownload))
                                    {
                                        FileToDownload.DownloadCompleted = true;
                                        FileToDownload.DownloadSuccessful = true;


                                        MarkFileAsDownloadComplete(ref FileToDownload);
                                        Downloaded = true;
                                    }
                                }
                            }
                            //CLAIM
                            else if (FileToDownload.DownloadItem.is_claim_file != null)
                            {
                                if ((bool)FileToDownload.DownloadItem.is_claim_file)
                                {
                                    FileToDownload.DownloadCompleted = false;
                                    FileToDownload.DownloadSuccessful = false;


                                    DeleteClaimLoggingFiles(ref FileToDownload);
                                    MarkFileAsDownloading(ref FileToDownload);


                                    if (ParseClaimFile(ref FileToDownload))
                                    {
                                        FileToDownload.DownloadCompleted = true;
                                        FileToDownload.DownloadSuccessful = true;


                                        MarkFileAsDownloadComplete(ref FileToDownload);
                                        Downloaded = true;
                                    }
                                }
                            }
                        }
                    }
                }


                return Downloaded;
            }
            catch(Exception ex)
            {
                return Downloaded;
            }
        }

        public bool ParseEligibilityFile(ref DownloadsViewModel dwnldsvmToParse)
        {
            bool Parsed = false;

            try
            {
                if (!string.IsNullOrEmpty(dwnldsvmToParse.DownloadItem.file_extension_to_look_for))
                {
                    switch (dwnldsvmToParse.DownloadItem.file_extension_to_look_for)
                    {
                        case "*.xls":

                            if (ParseEligibilityFile_Excel97_2003(ref dwnldsvmToParse))
                            {
                                DownloadEligibilityFileMidParse(dwnldsvmToParse);

                                Parsed = true;
                            }

                            break;


                        case "*.csv":

                            if (ParseEligibilityFile_Csv(ref dwnldsvmToParse))
                            {
                                DownloadEligibilityFileMidParse(dwnldsvmToParse);

                                Parsed = true;
                            }

                            break;
                    }
                }


                return Parsed;
            }
            catch(Exception ex)
            {
                return Parsed;
            }
        }

        private bool ParseEligibilityFile_Excel97_2003(ref DownloadsViewModel dwnldsvmToParse)
        {

            bool ParsedExcel = false;


            try
            {

                switch (dwnldsvmToParse.DownloadItem.tpa_id)
                {

                    case 439:
                    case 412:

                        GetGroupName(ref dwnldsvmToParse);

                        if (ParseEligibilityFile_Excel97_2003_Egp(ref dwnldsvmToParse))
                        {
                            ParsedExcel = true;
                        }

                        break;


                    default:

                        if (ParseEligibilityFile_Excel97_2003_Dbms(ref dwnldsvmToParse))
                        {
                            ParsedExcel = true;
                        }

                        break;

                }


                return ParsedExcel;

            }
            catch(Exception ex)
            {                
                return ParsedExcel;
            }
            

        }


        private bool ParseEligibilityFile_Excel97_2003_Egp(ref DownloadsViewModel dwnldsvmToParse)
        {

            bool EgpParsed = false;

            try
            {

                //Create COM Objects (Excel): application
                Excel.Application excelApp = new Excel.Application();

                int intExcelHwnd = excelApp.Hwnd;


                //Create COM Objects (Excel): workbook
                Excel.Workbook excelWrkbook = excelApp.Workbooks.Open(@"C:\ICMS Letter Templates\temp\" + dwnldsvmToParse.FileName,
                                                                      0, true, 5, "", "", true, Microsoft.Office.Interop.Excel.XlPlatform.xlWindows,
                                                                      "\t", false, false, 0, true, Type.Missing, 0);

                //Create COM Objects (Excel): worksheet
                Excel.Worksheet xlWorksheet = excelWrkbook.Sheets[1];

                //Create COM Objects (Excel): range
                Excel.Range xlRange = xlWorksheet.UsedRange;


                //verify if the first row of the Excel file is skipped or not
                int intWrkSheetRowCnt = 1;

                if (dwnldsvmToParse.DownloadItem.skip_first_row != null)
                {
                    if ((bool)dwnldsvmToParse.DownloadItem.skip_first_row)
                    {
                        intWrkSheetRowCnt = 2;
                    }
                }


                //go through the rows of the Excel file
                for (; ; )
                {

                    if (intWrkSheetRowCnt <= xlRange.Rows.Count)
                    {

                        EligibilityViewModel eligvmToLoad = new EligibilityViewModel();

                        dwnldsvmToParse.DuplicateMemberFileWorksheetColumnCount = xlRange.Columns.Count;
                        dwnldsvmToParse.MemberHasNoEmployerFileWorksheetColumnCount = xlRange.Columns.Count;
                        dwnldsvmToParse.MemberEmptyCityFileWorksheetColumnCount = xlRange.Columns.Count;


                        //go through the columns of the Excel file
                        for (int intWrkSheetColumnCnt = 1; intWrkSheetColumnCnt <= xlRange.Columns.Count; intWrkSheetColumnCnt++) // xlWorksheet.Columns.Count; intWrkSheetColumnCnt++)
                        {

                            //new line
                            if (intWrkSheetColumnCnt > 0)
                            {

                                //write the value to the console
                                if (xlRange.Cells[intWrkSheetRowCnt, intWrkSheetColumnCnt] != null && 
                                    xlRange.Cells[intWrkSheetRowCnt, intWrkSheetColumnCnt].Value2 != null)
                                {

                                    Excel.Range rangeToDisplay = xlRange.Cells[intWrkSheetRowCnt, intWrkSheetColumnCnt];


                                    string strValue2 = "";

                                    if (rangeToDisplay.Value2 != null)
                                    {
                                        if (!string.IsNullOrEmpty(Convert.ToString(rangeToDisplay.Value2)))
                                        {
                                            strValue2 = Convert.ToString(rangeToDisplay.Value2);
                                        }

                                    }


                                    SetEligibility_Egp(dwnldsvmToParse, ref eligvmToLoad, strValue2, intWrkSheetColumnCnt);

                                }

                            }

                        }


                        //add the Excel row (that has been parsed) to the collection/List
                        dwnldsvmToParse.EligbilityDownloadItems.Add(eligvmToLoad);


                        if (dwnldsvmToParse.EligbilityDownloadItems.Count >= 3000)
                        {
                            if (DownloadEligibilityFileMidParse(dwnldsvmToParse))
                            {
                                dwnldsvmToParse.EligbilityDownloadItems.Clear();
                            }
                        }

                        intWrkSheetRowCnt++;

                    }
                    else
                    {
                        break;
                    }

                }


                if (dwnldsvmToParse.EligbilityDownloadItems.Count > 0)
                {
                    EgpParsed = true;
                }


                GC.Collect();
                GC.WaitForPendingFinalizers();


                //release com objects to fully kill excel process from running in the background
                Marshal.ReleaseComObject(xlRange);
                Marshal.ReleaseComObject(xlWorksheet);

                //close and release
                excelWrkbook.Close(0);
                Marshal.ReleaseComObject(excelWrkbook);

                excelApp.DisplayAlerts = false;

                //quit and release
                excelApp.Quit();
                 Marshal.FinalReleaseComObject(excelApp);
                
                excelApp = null;


                return EgpParsed;

            }
            catch(Exception ex)
            {
                return EgpParsed;
            }

        }        

        private void SetEligibility_Egp(DownloadsViewModel dwnldsvmToParse, ref EligibilityViewModel eligvmToSet, string strValue, int intColumn)
        {

            try
            {

                if (intColumn.Equals(1))
                {
                    eligvmToSet.Type = strValue.Trim();
                }
                else if (intColumn.Equals(2))
                {

                    eligvmToSet.MemId = strValue.Trim();

                    //set the employer_id by going through the group names (set in GetGroupName)
                    if (!string.IsNullOrEmpty(eligvmToSet.MemId) && dwnldsvmToParse.GroupNames != null)
                    {
                        if (dwnldsvmToParse.GroupNames.Count > 0)
                        {
                            foreach (TpaGroupNames tpagrpnmGroup in dwnldsvmToParse.GroupNames)
                            {

                                if (!string.IsNullOrEmpty(tpagrpnmGroup.GROUPNUM))
                                {
                                    if (tpagrpnmGroup.GROUPNUM.ToString().Equals(eligvmToSet.MemId))
                                    {
                                        eligvmToSet.EmployerId = tpagrpnmGroup.ICM_EMPLOYER_ID;
                                        break;
                                    }
                                }

                                if (!string.IsNullOrEmpty(tpagrpnmGroup.groupNum2))
                                {
                                    if (tpagrpnmGroup.groupNum2.ToString().Equals(eligvmToSet.MemId))
                                    {
                                        eligvmToSet.EmployerId = tpagrpnmGroup.ICM_EMPLOYER_ID;
                                        break;
                                    }
                                }

                                if (!string.IsNullOrEmpty(tpagrpnmGroup.groupNum3))
                                {
                                    if (tpagrpnmGroup.groupNum3.ToString().Equals(eligvmToSet.MemId))
                                    {
                                        eligvmToSet.EmployerId = tpagrpnmGroup.ICM_EMPLOYER_ID;
                                        break;
                                    }
                                }
                            }
                        }
                    }

                }
                else if (intColumn.Equals(3))
                {
                    eligvmToSet.MemFirstName = strValue.Trim();
                }
                else if (intColumn.Equals(4))
                {
                    eligvmToSet.MemLastName = strValue.Trim();
                }
                else if (intColumn.Equals(5))
                {
                    eligvmToSet.MemMiddleName = strValue.Trim();
                }
                else if (intColumn.Equals(6))
                {
                    eligvmToSet.MemAddressLine1 = strValue.Trim();
                }
                else if (intColumn.Equals(7))
                {
                    eligvmToSet.MemAddressLine2 = strValue.Trim();
                }
                else if (intColumn.Equals(8))
                {
                    eligvmToSet.MemCity = strValue.Trim();
                }
                else if (intColumn.Equals(9))
                {
                    eligvmToSet.MemState = strValue.Trim();
                }
                else if (intColumn.Equals(10))
                {
                    eligvmToSet.MemZipCode = strValue.Trim();
                }
                else if (intColumn.Equals(11))
                {
                    eligvmToSet.MemGender = strValue.Trim();
                }
                else if (intColumn.Equals(12))
                {
                    if (!string.IsNullOrEmpty(strValue.Trim()))
                    {
                        int addDaysMemDob = 0;

                        if (int.TryParse(strValue.Trim(), out addDaysMemDob))
                        {
                            DateTime memDobDate = new DateTime(1899, 12, 31).AddDays(addDaysMemDob - 1);
                            eligvmToSet.MemDob = memDobDate.ToShortDateString();
                        }
                    }
                }
                else if (intColumn.Equals(13))
                {
                    if (!string.IsNullOrEmpty(strValue.Trim()))
                    {
                        int addDays = 0;

                        if (int.TryParse(strValue.Trim(), out addDays))
                        {
                            DateTime memEffDate = new DateTime(1899, 12, 31).AddDays(addDays - 1);
                            eligvmToSet.MemEffDate = memEffDate.ToShortDateString();
                        }
                    }
                }
                else if (intColumn.Equals(14))
                {
                    if (!string.IsNullOrEmpty(strValue.Trim()))
                    {
                        int addDaysTerm = 0;

                        if (int.TryParse(strValue.Trim(), out addDaysTerm))
                        {
                            DateTime memTermDate = new DateTime(1899, 12, 31).AddDays(addDaysTerm - 1);
                            eligvmToSet.MemTermDate = memTermDate.ToShortDateString();
                        }
                    }
                }
                else if (intColumn.Equals(15))
                {
                    eligvmToSet.MemSsn = strValue.Trim();
                }
                else if (intColumn.Equals(16))
                {
                    eligvmToSet.MemInsNumber = strValue.Trim();
                }
                else if (intColumn.Equals(17))
                {
                    eligvmToSet.MemPhoneNumber = strValue.Trim();
                }
                else if (intColumn.Equals(18))
                {
                    eligvmToSet.DepFirstName = strValue.Trim();
                }
                else if (intColumn.Equals(19))
                {
                    eligvmToSet.DepLastName = strValue.Trim();
                }
                else if (intColumn.Equals(20))
                {
                    eligvmToSet.DepMiddleName = strValue.Trim();
                }
                else if (intColumn.Equals(21))
                {
                    eligvmToSet.DepAddressLine1 = strValue.Trim();
                }
                else if (intColumn.Equals(22))
                {
                    eligvmToSet.DepAddressLine2 = strValue.Trim();
                }
                else if (intColumn.Equals(23))
                {
                    eligvmToSet.DepCity = strValue.Trim();
                }
                else if (intColumn.Equals(24))
                {
                    eligvmToSet.DepState = strValue.Trim();
                }
                else if (intColumn.Equals(25))
                {
                    eligvmToSet.DepZipCode = strValue.Trim();
                }
                else if (intColumn.Equals(26))
                {
                    eligvmToSet.DepGender = strValue.Trim();
                }
                else if (intColumn.Equals(27))
                {
                    if (!string.IsNullOrEmpty(strValue.Trim()))
                    {
                        int addDaysDepDob = 0;

                        if (int.TryParse(strValue.Trim(), out addDaysDepDob))
                        {
                            DateTime depDobDate = new DateTime(1899, 12, 31).AddDays(addDaysDepDob - 1);
                            eligvmToSet.DepDob = depDobDate.ToShortDateString();
                        }
                    }
                }
                else if (intColumn.Equals(28))
                {
                    if (!string.IsNullOrEmpty(strValue.Trim()))
                    {
                        int addDaysDepEff = 0;

                        if (int.TryParse(strValue.Trim(), out addDaysDepEff))
                        {
                            DateTime depEffDate = new DateTime(1899, 12, 31).AddDays(addDaysDepEff - 1);
                            eligvmToSet.DepEffDate = depEffDate.ToShortDateString();
                        }
                    }
                }
                else if (intColumn.Equals(29))
                {
                    if (!string.IsNullOrEmpty(strValue.Trim()))
                    {
                        int addDaysDepTerm = 0;

                        if (int.TryParse(strValue.Trim(), out addDaysDepTerm))
                        {
                            DateTime depTermDate = new DateTime(1899, 12, 31).AddDays(addDaysDepTerm - 1);
                            eligvmToSet.DepTermDate = depTermDate.ToShortDateString();
                        }
                    }
                }
                else if (intColumn.Equals(30))
                {
                    eligvmToSet.DepSsn = strValue.Trim();
                }
                else if (intColumn.Equals(31))
                {
                    eligvmToSet.DepInsNumber = strValue.Trim();
                }
                else if (intColumn.Equals(32))
                {
                    eligvmToSet.DepPhoneNumber = strValue.Trim();
                }
                else if (intColumn.Equals(33))
                {
                    eligvmToSet.Relationship = strValue.Trim();
                }
                else if (intColumn.Equals(34))
                {
                    eligvmToSet.Network = strValue.Trim();
                }
                else if (intColumn.Equals(35))
                {
                    eligvmToSet.MemMedicarePrim = strValue.Trim();
                }
                else if (intColumn.Equals(36))
                {
                    eligvmToSet.MedicareEffDate = strValue.Trim();
                }

            }
            catch(Exception ex)
            {

            }

        }



        private bool ParseEligibilityFile_Excel97_2003_Dbms(ref DownloadsViewModel dwnldsvmToParse)
        {

            bool ParsedDbms = false;

            try
            {

                return ParsedDbms;

            }
            catch (Exception ex)
            {
                return ParsedDbms;
            }

        }




        private bool ParseEligibilityFile_Csv(ref DownloadsViewModel EligibilityFileData)
        {
            bool ParsedExcel = false;

            try
            {
                switch (EligibilityFileData.DownloadItem.tpa_id)
                {
                    case 298:
                        GetGroupName(ref EligibilityFileData);


                        if (ParseEligibilityFile_Csv_GroupAdmin(ref EligibilityFileData))
                        {
                            ParsedExcel = true;
                        }

                        break;
                }


                return ParsedExcel;
            }
            catch (Exception ex)
            {
                return ParsedExcel;
            }
        }

        private bool ParseEligibilityFile_Csv_GroupAdmin(ref DownloadsViewModel EligibilityFileData)
        {
            bool FileParsed = false;

            try
            {
                DataTable DataTableFromCsvFile = new DataTable();
                DataTableFromCsvFile.Columns.AddRange(new DataColumn[42] {
                    new DataColumn("Type", typeof(string)),
                    new DataColumn("EmpOrGroup", typeof(string)),
                    new DataColumn("EmployerSubGrp", typeof(string)),
                    new DataColumn("MemID",typeof(string)),
                    new DataColumn("MemFirstName", typeof(string)),            
                    new DataColumn("MemLastName", typeof(string)),
                    new DataColumn("MemMiddleName", typeof(string)),
                    new DataColumn("MemAddressLine1", typeof(string)),
                    new DataColumn("MemAddressLine2", typeof(string)),
                    new DataColumn("MemCity", typeof(string)),
                    new DataColumn("MemState", typeof(string)),
                    new DataColumn("MemZipCode", typeof(string)),
                    new DataColumn("MemGender", typeof(string)),
                    new DataColumn("MemDOB", typeof(string)),
                    new DataColumn("MemEffDate", typeof(string)),
                    new DataColumn("MemTermDate", typeof(string)),
                    new DataColumn("MemSSN", typeof(string)),
                    new DataColumn("MemInsNumber", typeof(string)),
                    new DataColumn("MemPhoneNumber", typeof(string)),
                    new DataColumn("DepFirstName", typeof(string)),
                    new DataColumn("DepLastName", typeof(string)),
                    new DataColumn("DepMiddleName", typeof(string)),
                    new DataColumn("DepAddressLine1", typeof(string)),
                    new DataColumn("DepAddressLine2", typeof(string)),
                    new DataColumn("DepCity", typeof(string)),
                    new DataColumn("DepState", typeof(string)),
                    new DataColumn("DepZipCode", typeof(string)),
                    new DataColumn("DepGender", typeof(string)),
                    new DataColumn("DepDOB", typeof(string)),
                    new DataColumn("DepEffDate", typeof(string)),
                    new DataColumn("DepTermDate", typeof(string)),
                    new DataColumn("DepSSN", typeof(string)),
                    new DataColumn("DepInsNumber", typeof(string)),
                    new DataColumn("DepPhoneNumber", typeof(string)),
                    new DataColumn("Relationship", typeof(string)),
                    new DataColumn("Network", typeof(string)),
                    new DataColumn("PlanType", typeof(string)),
                    new DataColumn("PopulationType", typeof(string)),
                    new DataColumn("MemMedicarePrim", typeof(string)),
                    new DataColumn("MedicareEffDate", typeof(string)),
                    new DataColumn("PrimaryInsurance", typeof(string)),
                    new DataColumn("SecondaryInsurance", typeof(string))
                });


                //Read the contents of CSV file.  
                string CsvFileData = File.ReadAllText(@"C:\ICMS Letter Templates\temp\" + EligibilityFileData.FileName);
                Regex csvparser = new Regex(",(?=(?:[^\"]*\"[^\"]*\")*(?![^\"]*\"))");

                //Execute a loop over the rows.  
                foreach (string CsvRow in CsvFileData.Split('\n'))
                {
                    if (!string.IsNullOrEmpty(CsvRow))
                    {
                        if (!CsvRow.Contains("Type,EmpOrGroup,EmployerSubGrp"))
                        {
                            DataTableFromCsvFile.Rows.Add();
                            int i = 0;

                            //Execute a loop over the columns.  
                            //foreach (string CsvCell in CsvRow.Split(','))
                            foreach (string CsvCell in csvparser.Split(CsvRow))
                            {
                                DataTableFromCsvFile.Rows[DataTableFromCsvFile.Rows.Count - 1][i] = CsvCell;
                                i++;
                            }
                        }
                    }
                }



                if (DataTableFromCsvFile.Rows.Count > 0)
                {                   
                    if (LoadEligibility_GroupAdmin(ref EligibilityFileData, DataTableFromCsvFile))
                    {
                        FileParsed = true;
                    }
                }


                return FileParsed;
            }
            catch(Exception ex)
            {
                return FileParsed;
            }
        }

        private bool LoadEligibility_GroupAdmin(ref DownloadsViewModel EligibilityFile, DataTable DataTableFromCsvFile)
        {
            bool Loaded = false;

            try
            {
                foreach (DataRow row in DataTableFromCsvFile.Rows)
                {
                    EligibilityViewModel EligibilityParsedItem = new EligibilityViewModel();


                    if (!string.IsNullOrEmpty(row["Type"].ToString()))
                    {
                        EligibilityParsedItem.Type = row["Type"].ToString();
                    }


                    if (!string.IsNullOrEmpty(row["EmpOrGroup"].ToString()))
                    {
                        EligibilityParsedItem.MemId = row["EmpOrGroup"].ToString();


                        if (!string.IsNullOrEmpty(EligibilityParsedItem.MemId) &&
                            EligibilityFile.GroupNames != null)
                        {
                            if (EligibilityFile.GroupNames.Count > 0)
                            {
                                foreach (TpaGroupNames tpagrpnmGroup in EligibilityFile.GroupNames)
                                {
                                    if (!string.IsNullOrEmpty(tpagrpnmGroup.GROUPNUM))
                                    {
                                        if (tpagrpnmGroup.GROUPNUM.ToString().Equals(EligibilityParsedItem.MemId))
                                        {
                                            EligibilityParsedItem.EmployerId = tpagrpnmGroup.ICM_EMPLOYER_ID;
                                            break;
                                        }
                                    }


                                    if (!string.IsNullOrEmpty(tpagrpnmGroup.groupNum2))
                                    {
                                        if (tpagrpnmGroup.groupNum2.ToString().Equals(EligibilityParsedItem.MemId))
                                        {
                                            EligibilityParsedItem.EmployerId = tpagrpnmGroup.ICM_EMPLOYER_ID;
                                            break;
                                        }
                                    }


                                    if (!string.IsNullOrEmpty(tpagrpnmGroup.groupNum3))
                                    {
                                        if (tpagrpnmGroup.groupNum3.ToString().Equals(EligibilityParsedItem.MemId))
                                        {
                                            EligibilityParsedItem.EmployerId = tpagrpnmGroup.ICM_EMPLOYER_ID;
                                            break;
                                        }
                                    }
                                }
                            }
                        }
                    }


                    if (!string.IsNullOrEmpty(row["EmployerSubGrp"].ToString()))
                    {
                        //EmployerSubGrp
                    }


                    if (!string.IsNullOrEmpty(row["MemID"].ToString()))
                    {
                        //MemId...but MemId is bastardized to capture the GroupNum in EmpOrGroup
                    }


                    if (!string.IsNullOrEmpty(row["MemFirstName"].ToString()))
                    {
                        EligibilityParsedItem.MemFirstName = row["MemFirstName"].ToString();
                    }


                    if (!string.IsNullOrEmpty(row["MemLastName"].ToString()))
                    {
                        EligibilityParsedItem.MemLastName = row["MemLastName"].ToString();
                    }


                    if (!string.IsNullOrEmpty(row["MemMiddleName"].ToString()))
                    {
                        EligibilityParsedItem.MemMiddleName = row["MemMiddleName"].ToString();
                    }


                    if (!string.IsNullOrEmpty(row["MemAddressLine1"].ToString()))
                    {
                        EligibilityParsedItem.MemAddressLine1 = row["MemAddressLine1"].ToString();
                    }


                    if (!string.IsNullOrEmpty(row["MemAddressLine2"].ToString()))
                    {
                        EligibilityParsedItem.MemAddressLine2 = row["MemAddressLine2"].ToString();
                    }
                    

                    if (!string.IsNullOrEmpty(row["MemCity"].ToString()))
                    {
                        EligibilityParsedItem.MemCity = row["MemCity"].ToString();
                    }


                    if (!string.IsNullOrEmpty(row["MemState"].ToString()))
                    {
                        EligibilityParsedItem.MemState = row["MemState"].ToString();
                    }


                    if (!string.IsNullOrEmpty(row["MemZipCode"].ToString()))
                    {
                        EligibilityParsedItem.MemZipCode = row["MemZipCode"].ToString();
                    }


                    if (!string.IsNullOrEmpty(row["MemGender"].ToString()))
                    {
                        EligibilityParsedItem.MemGender = row["MemGender"].ToString();
                    }


                    if (!string.IsNullOrEmpty(row["MemDOB"].ToString()))
                    {
                        EligibilityParsedItem.MemDob = row["MemDOB"].ToString();
                    }


                    if (!string.IsNullOrEmpty(row["MemEffDate"].ToString()))
                    {
                        EligibilityParsedItem.MemEffDate = row["MemEffDate"].ToString();
                    }


                    if (!string.IsNullOrEmpty(row["MemTermDate"].ToString()))
                    {
                        EligibilityParsedItem.MemTermDate = row["MemTermDate"].ToString();
                    }


                    if (!string.IsNullOrEmpty(row["MemSSN"].ToString()))
                    {
                        EligibilityParsedItem.MemSsn = row["MemSSN"].ToString();
                    }


                    if (!string.IsNullOrEmpty(row["MemInsNumber"].ToString()))
                    {
                        EligibilityParsedItem.MemInsNumber = row["MemInsNumber"].ToString();
                    }


                    if (!string.IsNullOrEmpty(row["MemPhoneNumber"].ToString()))
                    {
                        EligibilityParsedItem.MemPhoneNumber = row["MemPhoneNumber"].ToString();
                    }


                    if (!string.IsNullOrEmpty(row["DepFirstName"].ToString()))
                    {
                        EligibilityParsedItem.DepFirstName = row["DepFirstName"].ToString();
                    }


                    if (!string.IsNullOrEmpty(row["DepLastName"].ToString()))
                    {
                        EligibilityParsedItem.DepLastName = row["DepLastName"].ToString();
                    }


                    if (!string.IsNullOrEmpty(row["DepMiddleName"].ToString()))
                    {
                        EligibilityParsedItem.DepMiddleName = row["DepMiddleName"].ToString();
                    }


                    if (!string.IsNullOrEmpty(row["DepAddressLine1"].ToString()))
                    {
                        EligibilityParsedItem.DepAddressLine1 = row["DepAddressLine1"].ToString();
                    }
                    else if (!string.IsNullOrEmpty(EligibilityParsedItem.MemAddressLine1))
                    {
                        EligibilityParsedItem.DepAddressLine1 = EligibilityParsedItem.MemAddressLine1;
                    }


                    if (!string.IsNullOrEmpty(row["DepAddressLine2"].ToString()))
                    {
                        EligibilityParsedItem.DepAddressLine2 = row["DepAddressLine2"].ToString();
                    }
                    else if (!string.IsNullOrEmpty(EligibilityParsedItem.MemAddressLine2))
                    {
                        EligibilityParsedItem.DepAddressLine2 = EligibilityParsedItem.MemAddressLine2;
                    }


                    if (!string.IsNullOrEmpty(row["DepCity"].ToString()))
                    {
                        EligibilityParsedItem.DepCity = row["DepCity"].ToString();
                    }
                    else if (!string.IsNullOrEmpty(EligibilityParsedItem.MemCity))
                    {
                        EligibilityParsedItem.DepCity = EligibilityParsedItem.MemCity;
                    }


                    if (!string.IsNullOrEmpty(row["DepState"].ToString()))
                    {
                        EligibilityParsedItem.DepState = row["DepState"].ToString();
                    }
                    else if (!string.IsNullOrEmpty(EligibilityParsedItem.MemState))
                    {
                        EligibilityParsedItem.DepState = EligibilityParsedItem.MemState;
                    }


                    if (!string.IsNullOrEmpty(row["DepZipCode"].ToString()))
                    {
                        EligibilityParsedItem.DepZipCode = row["DepZipCode"].ToString();
                    }
                    else if (!string.IsNullOrEmpty(EligibilityParsedItem.MemZipCode))
                    {
                        EligibilityParsedItem.DepZipCode = EligibilityParsedItem.MemZipCode;
                    }


                    if (!string.IsNullOrEmpty(row["DepGender"].ToString()))
                    {
                        EligibilityParsedItem.DepGender = row["DepGender"].ToString();
                    }


                    if (!string.IsNullOrEmpty(row["DepDOB"].ToString()))
                    {
                        EligibilityParsedItem.DepDob = row["DepDOB"].ToString();
                    }


                    if (!string.IsNullOrEmpty(row["DepEffDate"].ToString()))
                    {
                        EligibilityParsedItem.DepEffDate = row["DepEffDate"].ToString();
                    }


                    if (!string.IsNullOrEmpty(row["DepTermDate"].ToString()))
                    {
                        EligibilityParsedItem.DepTermDate = row["DepTermDate"].ToString();
                    }


                    if (!string.IsNullOrEmpty(row["DepSSN"].ToString()))
                    {
                        EligibilityParsedItem.DepSsn = row["DepSSN"].ToString();
                    }


                    if (!string.IsNullOrEmpty(row["DepInsNumber"].ToString()))
                    {
                        EligibilityParsedItem.DepInsNumber = row["DepInsNumber"].ToString();
                    }
                    

                    if (!string.IsNullOrEmpty(row["DepPhoneNumber"].ToString()))
                    {
                        EligibilityParsedItem.DepPhoneNumber = row["DepPhoneNumber"].ToString();
                    }


                    if (!string.IsNullOrEmpty(row["Relationship"].ToString()))
                    {
                        EligibilityParsedItem.Relationship = row["Relationship"].ToString();
                    }


                    if (!string.IsNullOrEmpty(row["Network"].ToString()))
                    {
                        EligibilityParsedItem.Network = row["Network"].ToString();
                    }


                    if (!string.IsNullOrEmpty(row["PlanType"].ToString()))
                    {
                        //PlanType
                    }


                    if (!string.IsNullOrEmpty(row["PopulationType"].ToString()))
                    {
                        //PopulationType
                    }


                    if (!string.IsNullOrEmpty(row["MemMedicarePrim"].ToString()))
                    {
                        EligibilityParsedItem.MemMedicarePrim = row["MemMedicarePrim"].ToString();
                    }


                    if (!string.IsNullOrEmpty(row["MedicareEffDate"].ToString()))
                    {
                        EligibilityParsedItem.MedicareEffDate = row["MedicareEffDate"].ToString();
                    }


                    if (!string.IsNullOrEmpty(row["PrimaryInsurance"].ToString()))
                    {
                        //PrimaryInsurance
                    }


                    if (!string.IsNullOrEmpty(row["SecondaryInsurance"].ToString()))
                    {
                        //SecondaryInsurance
                    }



                    //add the Excel row (that has been parsed) to the collection/List
                    EligibilityFile.EligbilityDownloadItems.Add(EligibilityParsedItem);


                    if (EligibilityFile.EligbilityDownloadItems.Count >= 3000)
                    {
                        if (DownloadEligibilityFileMidParse(EligibilityFile))
                        {
                            Loaded = true;
                            EligibilityFile.EligbilityDownloadItems.Clear();
                        }
                    }
                }


                if (EligibilityFile.EligbilityDownloadItems.Count > 0)
                {
                    Loaded = true;
                }


                return Loaded;
            }
            catch(Exception ex)
            {
                return Loaded;
            }
        }








        public bool ParseClaimFile(ref DownloadsViewModel ClaimFile)
        {
            bool Parsed = false;

            try
            {
                if (!string.IsNullOrEmpty(ClaimFile.DownloadItem.file_extension_to_look_for))
                {
                    switch (ClaimFile.DownloadItem.file_extension_to_look_for)
                    {
                        case "*.xls":

                            if (ParseClaimFile_Excel97_2003(ref ClaimFile))
                            {
                                DownloadClaimFileMidParse(ClaimFile);

                                Parsed = true;
                            }

                            break;


                        case "*.csv":

                            if (ParseClaimFile_Csv(ref ClaimFile))
                            {
                                DownloadClaimFileMidParse(ClaimFile);

                                Parsed = true;
                            }

                            break;
                    }
                }


                return Parsed;
            }
            catch(Exception ex)
            {
                return Parsed;
            }
        }

        private bool ParseClaimFile_Excel97_2003(ref DownloadsViewModel ClaimFile)
        {

            bool ParsedExcel = false;


            try
            {

                switch (ClaimFile.DownloadItem.tpa_id)
                {

                    case 439:
                    case 412:

                        GetGroupName(ref ClaimFile);

                        if (ParseClaimFile_Excel97_2003_Egp(ref ClaimFile))
                        {
                            ParsedExcel = true;
                        }

                        break;


                    default:

                        if (ParseClaimFile_Excel97_2003_Dbms(ref ClaimFile))
                        {
                            ParsedExcel = true;
                        }

                        break;

                }

                return ParsedExcel;

            }
            catch (Exception ex)
            {
                return ParsedExcel;
            }
        }

        
        private bool ParseClaimFile_Excel97_2003_Egp(ref DownloadsViewModel ClaimFile)
        {

            bool EgpParsed = false;

            try
            {

                //Create COM Objects (Excel): application
                Excel.Application excelApp = new Excel.Application();

                int intExcelHwnd = excelApp.Hwnd;


                //Create COM Objects (Excel): workbook
                Excel.Workbook excelWrkbook = excelApp.Workbooks.Open(@"C:\ICMS Letter Templates\temp\" + ClaimFile.FileName,
                                                                      0, true, 5, "", "", true, Microsoft.Office.Interop.Excel.XlPlatform.xlWindows,
                                                                      "\t", false, false, 0, true, Type.Missing, 0);

                //Create COM Objects (Excel): worksheet
                Excel.Worksheet xlWorksheet = excelWrkbook.Sheets[1];

                //Create COM Objects (Excel): range
                Excel.Range xlRange = xlWorksheet.UsedRange;


                //verify if the first row of the Excel file is skipped or not
                int intWrkSheetRowCnt = 1;

                if (ClaimFile.DownloadItem.skip_first_row != null)
                {
                    if ((bool)ClaimFile.DownloadItem.skip_first_row)
                    {
                        intWrkSheetRowCnt = 2;
                    }
                }


                //go through the rows of the Excel file
                for (; ; )
                {

                    if (intWrkSheetRowCnt <= xlRange.Rows.Count)
                    {

                        ClaimViewModel clmToLoad = new ClaimViewModel();

                        ClaimFile.ClaimMemberNotInSystemFileWorksheetColumnCount = xlRange.Columns.Count;
                        ClaimFile.ClaimEmployerNotInSystemFileWorksheetColumnCount = xlRange.Columns.Count;
                        ClaimFile.ClaimClaimInSystemFileWorksheetColumnCount = xlRange.Columns.Count;


                        //go through the columns of the Excel file
                        for (int intWrkSheetColumnCnt = 1; intWrkSheetColumnCnt <= xlRange.Columns.Count; intWrkSheetColumnCnt++) // xlWorksheet.Columns.Count; intWrkSheetColumnCnt++)
                        {

                            //new line
                            if (intWrkSheetColumnCnt > 0)
                            {

                                //write the value to the console
                                if (xlRange.Cells[intWrkSheetRowCnt, intWrkSheetColumnCnt] != null &&
                                    xlRange.Cells[intWrkSheetRowCnt, intWrkSheetColumnCnt].Value2 != null)
                                {

                                    Excel.Range rangeToDisplay = xlRange.Cells[intWrkSheetRowCnt, intWrkSheetColumnCnt];


                                    string strValue2 = "";

                                    if (rangeToDisplay.Value2 != null)
                                    {
                                        if (!string.IsNullOrEmpty(Convert.ToString(rangeToDisplay.Value2)))
                                        {
                                            strValue2 = Convert.ToString(rangeToDisplay.Value2);
                                        }

                                    }


                                    SetClaim_Egp(ClaimFile, ref clmToLoad, strValue2, intWrkSheetColumnCnt);
                                }
                            }
                        }


                        //add the Excel row (that has been parsed) to the collection/List
                        ClaimFile.ClaimDownloadItems.Add(clmToLoad);


                        if (ClaimFile.ClaimDownloadItems.Count >= 3000)
                        {
                            if (DownloadClaimFileMidParse(ClaimFile))
                            {
                                ClaimFile.ClaimDownloadItems.Clear();
                            }
                        }

                        intWrkSheetRowCnt++;

                    }
                    else
                    {
                        break;
                    }

                }


                if (ClaimFile.ClaimDownloadItems.Count > 0)
                {
                    EgpParsed = true;
                }


                GC.Collect();
                GC.WaitForPendingFinalizers();


                //release com objects to fully kill excel process from running in the background
                Marshal.ReleaseComObject(xlRange);
                Marshal.ReleaseComObject(xlWorksheet);

                //close and release
                excelWrkbook.Close(0);
                Marshal.ReleaseComObject(excelWrkbook);

                excelApp.DisplayAlerts = false;

                //quit and release
                excelApp.Quit();
                Marshal.FinalReleaseComObject(excelApp);

                excelApp = null;


                return EgpParsed;

            }
            catch (Exception ex)
            {
                return EgpParsed;
            }

        }

        private void SetClaim_Egp(DownloadsViewModel ClaimFile, ref ClaimViewModel clmToSet, string strValue, int intColumn)
        {

            try
            {

                if (intColumn.Equals(1))
                {

                    clmToSet.GroupNum = strValue.Trim();


                    //set the employer_id by going through the group names (set in GetGroupName)
                    if (!string.IsNullOrEmpty(clmToSet.GroupNum) && ClaimFile.GroupNames != null)
                    {
                        if (ClaimFile.GroupNames.Count > 0)
                        {
                            foreach (TpaGroupNames tpagrpnmGroup in ClaimFile.GroupNames)
                            {
                                if (!string.IsNullOrEmpty(tpagrpnmGroup.GROUPNUM))
                                {
                                    if (tpagrpnmGroup.GROUPNUM.ToString().Equals(clmToSet.GroupNum))
                                    {
                                        clmToSet.EmployerId = tpagrpnmGroup.ICM_EMPLOYER_ID;
                                        break;
                                    }
                                }

                                if (!string.IsNullOrEmpty(tpagrpnmGroup.groupNum2))
                                {
                                    if (tpagrpnmGroup.groupNum2.ToString().Equals(clmToSet.GroupNum))
                                    {
                                        clmToSet.EmployerId = tpagrpnmGroup.ICM_EMPLOYER_ID;
                                        break;
                                    }
                                }

                                if (!string.IsNullOrEmpty(tpagrpnmGroup.groupNum3))
                                {
                                    if (tpagrpnmGroup.groupNum3.ToString().Equals(clmToSet.GroupNum))
                                    {
                                        clmToSet.EmployerId = tpagrpnmGroup.ICM_EMPLOYER_ID;
                                        break;
                                    }
                                }
                            }
                        }
                    }

                }
                else if (intColumn.Equals(2))
                {
                    clmToSet.GroupName = strValue.Trim();
                }
                else if (intColumn.Equals(3))
                {
                    clmToSet.MemberId = strValue.Trim();
                }
                else if (intColumn.Equals(4))
                {
                    clmToSet.FirstName = strValue.Trim();
                }
                else if (intColumn.Equals(5))
                {
                    clmToSet.LastName = strValue.Trim();
                }
                else if (intColumn.Equals(6))
                {
                    clmToSet.EmployeeSsn = strValue.Trim();
                }
                else if (intColumn.Equals(7))
                {
                    clmToSet.Birth = strValue.Trim();
                }
                else if (intColumn.Equals(8))
                {
                    clmToSet.MemFirstName = strValue.Trim();
                }
                else if (intColumn.Equals(9))
                {
                    clmToSet.MemLastName = strValue.Trim();
                }
                else if (intColumn.Equals(10))
                {
                    clmToSet.ClaimantSsn = strValue.Trim();
                }
                else if (intColumn.Equals(11))
                {
                    clmToSet.SubAdd1 = strValue.Trim();
                }
                else if (intColumn.Equals(12))
                {
                    clmToSet.SubAdd2 = strValue.Trim();
                }
                else if (intColumn.Equals(13))
                {
                    clmToSet.SubCity = strValue.Trim();
                }
                else if (intColumn.Equals(14))
                {
                    clmToSet.SubState = strValue.Trim();
                }
                else if (intColumn.Equals(15))
                {
                    clmToSet.SubZip = strValue.Trim();
                }
                else if (intColumn.Equals(16))
                {
                    clmToSet.SubPhone = strValue.Trim();
                }
                else if (intColumn.Equals(17))
                {
                    clmToSet.Diag1 = strValue.Trim();
                }
                else if (intColumn.Equals(18))
                {
                    clmToSet.Diag2 = strValue.Trim();
                }
                else if (intColumn.Equals(19))
                {
                    clmToSet.Diag3 = strValue.Trim();
                }
                else if (intColumn.Equals(20))
                {
                    clmToSet.Diag4 = strValue.Trim();
                }
                else if (intColumn.Equals(21))
                {
                    clmToSet.Diag5 = strValue.Trim();
                }
                else if (intColumn.Equals(22))
                {
                    clmToSet.CptCode = strValue.Trim();
                }
                else if (intColumn.Equals(23))
                {
                    clmToSet.ServiceToDate = strValue.Trim();
                }
                else if (intColumn.Equals(24))
                {
                    clmToSet.CheckDate = strValue.Trim();
                }
                else if (intColumn.Equals(25))
                {
                    clmToSet.PosName = strValue.Trim();
                }
                else if (intColumn.Equals(26))
                {
                    clmToSet.PosAddress1 = strValue.Trim();
                }
                else if (intColumn.Equals(27))
                {
                    clmToSet.PosAddress2 = strValue.Trim();
                }
                else if (intColumn.Equals(28))
                {
                    clmToSet.PosCity = strValue.Trim();
                }
                else if (intColumn.Equals(29))
                {
                    clmToSet.PosState = strValue.Trim();
                }
                else if (intColumn.Equals(30))
                {
                    clmToSet.PosZip = strValue.Trim();
                }
                else if (intColumn.Equals(31))
                {
                    clmToSet.PosPhone = strValue.Trim();
                }
                else if (intColumn.Equals(32))
                {
                    clmToSet.HospitalInDate = strValue.Trim();
                }
                else if (intColumn.Equals(33))
                {
                    clmToSet.HospitalOutDate = strValue.Trim();
                }
                else if (intColumn.Equals(34))
                {
                    clmToSet.ClaimNumber = strValue.Trim();
                }
                else if (intColumn.Equals(35))
                {
                    clmToSet.ClaimLineNumber = strValue.Trim();
                }
                else if (intColumn.Equals(36))
                {
                    clmToSet.ClaimPaidAmount = strValue.Trim();
                }
                else if (intColumn.Equals(37))
                {
                    clmToSet.ClaimBillAmount = strValue.Trim();
                }

            }
            catch (Exception ex)
            {

            }

        }


        private bool ParseClaimFile_Excel97_2003_Dbms(ref DownloadsViewModel ClaimFile)
        {

            bool ParsedDbms = false;

            try
            {

                return ParsedDbms;

            }
            catch (Exception ex)
            {
                return ParsedDbms;
            }

        }



        private bool ParseClaimFile_Csv(ref DownloadsViewModel ClaimFile)
        {
            bool ParsedExcel = false;

            try
            {
                switch (ClaimFile.DownloadItem.tpa_id)
                {
                    case 298:
                        GetGroupName(ref ClaimFile);


                        if (ParseClaimFile_Csv_GroupAdmin(ref ClaimFile))
                        {
                            ParsedExcel = true;
                        }


                        break;
                }


                return ParsedExcel;
            }
            catch (Exception ex)
            {
                return ParsedExcel;
            }
        }

        private bool ParseClaimFile_Csv_GroupAdmin(ref DownloadsViewModel ClaimFile)
        {
            bool FileParsed = false;

            try
            {
                DataTable DataTableFromCsvFile = new DataTable();
                DataTableFromCsvFile.Columns.AddRange(new DataColumn[42] {
                    new DataColumn("Group#", typeof(string)),
                    new DataColumn("EmpOrGroup", typeof(string)),
                    new DataColumn("MemID", typeof(string)),
                    new DataColumn("MemFirstName",typeof(string)),
                    new DataColumn("MemLastName", typeof(string)),
                    new DataColumn("MemSSN", typeof(string)),
                    new DataColumn("MemDOB", typeof(string)),
                    new DataColumn("ClaimantFirstName", typeof(string)),
                    new DataColumn("ClaimantLastName", typeof(string)),
                    new DataColumn("ClaimantSSN", typeof(string)),
                    new DataColumn("ClaimantDOB", typeof(string)),
                    new DataColumn("MemAddressLine1", typeof(string)),
                    new DataColumn("MemAddressLine2", typeof(string)),
                    new DataColumn("MemCity", typeof(string)),
                    new DataColumn("MemState", typeof(string)),
                    new DataColumn("MemZipCode", typeof(string)),
                    new DataColumn("Diag1", typeof(string)),
                    new DataColumn("Diag2", typeof(string)),
                    new DataColumn("Diag3", typeof(string)),
                    new DataColumn("Diag4", typeof(string)),
                    new DataColumn("Diag5", typeof(string)),
                    new DataColumn("ProcedureCode", typeof(string)),
                    new DataColumn("DRG", typeof(string)),
                    new DataColumn("UnitsofService", typeof(string)),
                    new DataColumn("ServiceFromDate", typeof(string)),
                    new DataColumn("ServiceToDate", typeof(string)),
                    new DataColumn("CheckDate", typeof(string)),
                    new DataColumn("NPI", typeof(string)),
                    new DataColumn("POSName", typeof(string)),
                    new DataColumn("ProvName", typeof(string)),
                    new DataColumn("ProvAddressLine1", typeof(string)),
                    new DataColumn("ProvAddressLine2", typeof(string)),
                    new DataColumn("ProvCity", typeof(string)),
                    new DataColumn("ProvState", typeof(string)),
                    new DataColumn("ProvZipCode", typeof(string)),
                    new DataColumn("HospitalInDate", typeof(string)),
                    new DataColumn("HospitalOutDate", typeof(string)),
                    new DataColumn("Claim#", typeof(string)),
                    new DataColumn("ClaimLine#", typeof(string)),
                    new DataColumn("claimstatus", typeof(string)),
                    new DataColumn("ClaimAmountPaid", typeof(string)),
                    new DataColumn("ClaimaintPaidAmount", typeof(string))
                });


                //Read the contents of CSV file.  
                string CsvFileData = File.ReadAllText(@"C:\ICMS Letter Templates\temp\" + ClaimFile.FileName);
                Regex csvparser = new Regex(",(?=(?:[^\"]*\"[^\"]*\")*(?![^\"]*\"))");

                //Execute a loop over the rows.  
                foreach (string CsvRow in CsvFileData.Split('\n'))
                {
                    if (!string.IsNullOrEmpty(CsvRow))
                    {
                        if (!CsvRow.Contains("Group#,EmpOrGroup,MemID,MemFirstName"))
                        {
                            DataTableFromCsvFile.Rows.Add();
                            int i = 0;

                            //Execute a loop over the columns.  
                            //foreach (string CsvCell in CsvRow.Split(','))
                            foreach (string CsvCell in csvparser.Split(CsvRow))
                            {
                                DataTableFromCsvFile.Rows[DataTableFromCsvFile.Rows.Count - 1][i] = CsvCell;
                                i++;
                            }
                        }
                    }
                }



                if (DataTableFromCsvFile.Rows.Count > 0)
                {
                    if (LoadClaim_GroupAdmin(ref ClaimFile, DataTableFromCsvFile))
                    {
                        FileParsed = true;
                    }
                }



                ////Create COM Objects (Excel): application
                //Excel.Application excelApp = new Excel.Application();

                //int intExcelHwnd = excelApp.Hwnd;


                ////Create COM Objects (Excel): workbook
                //Excel.Workbook excelWrkbook = excelApp.Workbooks.Open(@"C:\ICMS Letter Templates\temp\" + ClaimFile.FileName,
                //                                                      0, true, 5, "", "", true, Microsoft.Office.Interop.Excel.XlPlatform.xlWindows,
                //                                                      "\t", false, false, 0, true, Type.Missing, 0);

                ////Create COM Objects (Excel): worksheet
                //Excel.Worksheet xlWorksheet = excelWrkbook.Sheets[1];

                ////Create COM Objects (Excel): range
                //Excel.Range xlRange = xlWorksheet.UsedRange;


                ////verify if the first row of the Excel file is skipped or not
                //int WorksheetRowCount = 1;

                //if (ClaimFile.DownloadItem.skip_first_row != null)
                //{
                //    if ((bool)ClaimFile.DownloadItem.skip_first_row)
                //    {
                //        WorksheetRowCount = 2;
                //    }
                //}


                ////go through the rows of the Excel file
                //for (; ; )
                //{
                //    if (WorksheetRowCount <= xlRange.Rows.Count)
                //    {
                //        ClaimViewModel ClaimParsedItem = new ClaimViewModel();

                //        ClaimFile.ClaimMemberNotInSystemFileWorksheetColumnCount = xlRange.Columns.Count;
                //        ClaimFile.ClaimEmployerNotInSystemFileWorksheetColumnCount = xlRange.Columns.Count;
                //        ClaimFile.ClaimClaimInSystemFileWorksheetColumnCount = xlRange.Columns.Count;


                //        //go through the columns of the Excel file
                //        for (int WorksheetColumn = 1; WorksheetColumn <= xlRange.Columns.Count; WorksheetColumn++) // xlWorksheet.Columns.Count; WorksheetColumn++)
                //        {
                //            //new line
                //            if (WorksheetColumn > 0)
                //            {
                //                //write the value to the console
                //                if (xlRange.Cells[WorksheetRowCount, WorksheetColumn] != null &&
                //                    xlRange.Cells[WorksheetRowCount, WorksheetColumn].Value2 != null)
                //                {
                //                    Excel.Range rangeToDisplay = xlRange.Cells[WorksheetRowCount, WorksheetColumn];


                //                    string ClaimFileValue = "";


                //                    if (rangeToDisplay.Value2 != null)
                //                    {
                //                        if (!string.IsNullOrEmpty(Convert.ToString(rangeToDisplay.Value2)))
                //                        {
                //                            ClaimFileValue = Convert.ToString(rangeToDisplay.Value2);
                //                        }
                //                    }


                //                    SetClaim_GroupAdmin(ClaimFile, ref ClaimParsedItem, ClaimFileValue, WorksheetColumn);
                //                }
                //            }
                //        }


                //        //add the Excel row (that has been parsed) to the collection/List
                //        ClaimFile.ClaimDownloadItems.Add(ClaimParsedItem);


                //        if (ClaimFile.ClaimDownloadItems.Count >= 3000)
                //        {
                //            if (DownloadClaimFileMidParse(ClaimFile))
                //            {
                //                ClaimFile.ClaimDownloadItems.Clear();
                //            }
                //        }


                //        WorksheetRowCount++;
                //    }
                //    else
                //    {
                //        break;
                //    }
                //}


                //if (ClaimFile.ClaimDownloadItems.Count > 0)
                //{
                //    FileParsed = true;
                //}


                //GC.Collect();
                //GC.WaitForPendingFinalizers();


                ////release com objects to fully kill excel process from running in the background
                //Marshal.ReleaseComObject(xlRange);
                //Marshal.ReleaseComObject(xlWorksheet);

                ////close and release
                //excelWrkbook.Close(0);
                //Marshal.ReleaseComObject(excelWrkbook);

                //excelApp.DisplayAlerts = false;

                ////quit and release
                //excelApp.Quit();
                //Marshal.FinalReleaseComObject(excelApp);

                //excelApp = null;


                return FileParsed;
            }
            catch (Exception ex)
            {
                return FileParsed;
            }
        }

        private bool LoadClaim_GroupAdmin(ref DownloadsViewModel ClaimFile, DataTable DataTableFromCsvFile)
        {
            bool Loaded = false;

            try
            {
                foreach (DataRow row in DataTableFromCsvFile.Rows)
                {
                    ClaimViewModel ClaimParsedItem = new ClaimViewModel();


                    if (!string.IsNullOrEmpty(row["Group#"].ToString()))
                    {
                        ClaimParsedItem.GroupName = row["Group#"].ToString();
                    }


                    if (!string.IsNullOrEmpty(row["EmpOrGroup"].ToString()))
                    {
                        ClaimParsedItem.GroupNum = row["EmpOrGroup"].ToString();


                        if (!string.IsNullOrEmpty(ClaimParsedItem.GroupNum) &&
                            ClaimFile.GroupNames != null)
                        {
                            if (ClaimFile.GroupNames.Count > 0)
                            {
                                foreach (TpaGroupNames tpagrpnmGroup in ClaimFile.GroupNames)
                                {
                                    if (!string.IsNullOrEmpty(tpagrpnmGroup.GROUPNUM))
                                    {
                                        if (tpagrpnmGroup.GROUPNUM.ToString().Equals(ClaimParsedItem.GroupNum))
                                        {
                                            ClaimParsedItem.EmployerId = tpagrpnmGroup.ICM_EMPLOYER_ID;
                                            break;
                                        }
                                    }


                                    if (!string.IsNullOrEmpty(tpagrpnmGroup.groupNum2))
                                    {
                                        if (tpagrpnmGroup.groupNum2.ToString().Equals(ClaimParsedItem.GroupNum))
                                        {
                                            ClaimParsedItem.EmployerId = tpagrpnmGroup.ICM_EMPLOYER_ID;
                                            break;
                                        }
                                    }


                                    if (!string.IsNullOrEmpty(tpagrpnmGroup.groupNum3))
                                    {
                                        if (tpagrpnmGroup.groupNum3.ToString().Equals(ClaimParsedItem.GroupNum))
                                        {
                                            ClaimParsedItem.EmployerId = tpagrpnmGroup.ICM_EMPLOYER_ID;
                                            break;
                                        }
                                    }
                                }
                            }
                        }
                    }


                    if (!string.IsNullOrEmpty(row["MemID"].ToString()))
                    {
                        ClaimParsedItem.MemberId = row["MemID"].ToString();
                    }
                    

                    if (!string.IsNullOrEmpty(row["MemFirstName"].ToString()))
                    {
                        ClaimParsedItem.FirstName = row["MemFirstName"].ToString();
                    }


                    if (!string.IsNullOrEmpty(row["MemLastName"].ToString()))
                    {
                        ClaimParsedItem.LastName = row["MemLastName"].ToString();
                    }


                    if (!string.IsNullOrEmpty(row["MemSSN"].ToString()))
                    {
                        ClaimParsedItem.EmployeeSsn = row["MemSSN"].ToString();
                    }


                    if (!string.IsNullOrEmpty(row["MemDOB"].ToString()))
                    {
                        ClaimParsedItem.Birth = row["MemDOB"].ToString();
                    }


                    if (!string.IsNullOrEmpty(row["ClaimantFirstName"].ToString()))
                    {
                        ClaimParsedItem.MemFirstName = row["ClaimantFirstName"].ToString();
                    }
                    

                    if (!string.IsNullOrEmpty(row["ClaimantLastName"].ToString()))
                    {
                        ClaimParsedItem.MemLastName = row["ClaimantLastName"].ToString();
                    }


                    if (!string.IsNullOrEmpty(row["ClaimantSSN"].ToString()))
                    {
                        ClaimParsedItem.ClaimantSsn = row["ClaimantSSN"].ToString();
                    }


                    if (!string.IsNullOrEmpty(row["ClaimantDOB"].ToString()))
                    {
                        ClaimParsedItem.ClaimantBirth = row["ClaimantDOB"].ToString();
                    }


                    if (!string.IsNullOrEmpty(row["MemAddressLine1"].ToString()))
                    {
                        ClaimParsedItem.SubAdd1 = row["MemAddressLine1"].ToString();
                    }


                    if (!string.IsNullOrEmpty(row["MemAddressLine2"].ToString()))
                    {
                        ClaimParsedItem.SubAdd2 = row["MemAddressLine2"].ToString();
                    }


                    if (!string.IsNullOrEmpty(row["MemCity"].ToString()))
                    {
                        ClaimParsedItem.SubCity = row["MemCity"].ToString();
                    }


                    if (!string.IsNullOrEmpty(row["MemState"].ToString()))
                    {
                        ClaimParsedItem.SubState = row["MemState"].ToString();
                    }


                    if (!string.IsNullOrEmpty(row["MemZipCode"].ToString()))
                    {
                        ClaimParsedItem.SubZip = row["MemZipCode"].ToString();
                    }


                    if (!string.IsNullOrEmpty(row["Diag1"].ToString()))
                    {
                        ClaimParsedItem.Diag1 = row["Diag1"].ToString();
                    }


                    if (!string.IsNullOrEmpty(row["Diag2"].ToString()))
                    {
                        ClaimParsedItem.Diag2 = row["Diag2"].ToString();
                    }


                    if (!string.IsNullOrEmpty(row["Diag3"].ToString()))
                    {
                        ClaimParsedItem.Diag3 = row["Diag3"].ToString();
                    }


                    if (!string.IsNullOrEmpty(row["Diag4"].ToString()))
                    {
                        ClaimParsedItem.Diag4 = row["Diag4"].ToString();
                    }


                    if (!string.IsNullOrEmpty(row["Diag5"].ToString()))
                    {
                        ClaimParsedItem.Diag5 = row["Diag5"].ToString();
                    }


                    if (!string.IsNullOrEmpty(row["ProcedureCode"].ToString()))
                    {
                        ClaimParsedItem.CptCode = row["ProcedureCode"].ToString();
                    }
                   

                    if (!string.IsNullOrEmpty(row["DRG"].ToString()))
                    {
                        //DRG
                    }


                    if (!string.IsNullOrEmpty(row["UnitsofService"].ToString()))
                    {
                        //Units of Service
                    }


                    if (!string.IsNullOrEmpty(row["ServiceFromDate"].ToString()))
                    {
                        ClaimParsedItem.ServiceFromDate = row["ServiceFromDate"].ToString();
                    }


                    if (!string.IsNullOrEmpty(row["ServiceToDate"].ToString()))
                    {
                        ClaimParsedItem.ServiceToDate = row["ServiceToDate"].ToString();
                    }


                    if (!string.IsNullOrEmpty(row["CheckDate"].ToString()))
                    {
                        ClaimParsedItem.CheckDate = row["CheckDate"].ToString();
                    }


                    if (!string.IsNullOrEmpty(row["NPI"].ToString()))
                    {
                        ClaimParsedItem.ProvNpi = row["NPI"].ToString();
                    }


                    if (!string.IsNullOrEmpty(row["POSName"].ToString()))
                    {
                        ClaimParsedItem.PosName = row["POSName"].ToString();
                    }


                    if (!string.IsNullOrEmpty(row["ProvName"].ToString()))
                    {
                        ClaimParsedItem.ProvName = row["ProvName"].ToString();
                    }


                    if (!string.IsNullOrEmpty(row["ProvAddressLine1"].ToString()))
                    {
                        ClaimParsedItem.PosAddress1 = row["ProvAddressLine1"].ToString();
                    }


                    if (!string.IsNullOrEmpty(row["ProvAddressLine2"].ToString()))
                    {
                        ClaimParsedItem.PosAddress2 = row["ProvAddressLine2"].ToString();
                    }


                    if (!string.IsNullOrEmpty(row["ProvCity"].ToString()))
                    {
                        ClaimParsedItem.PosCity = row["ProvCity"].ToString();
                    }
                   

                    if (!string.IsNullOrEmpty(row["ProvState"].ToString()))
                    {
                        ClaimParsedItem.PosState = row["ProvState"].ToString();
                    }
                    

                    if (!string.IsNullOrEmpty(row["ProvZipCode"].ToString()))
                    {
                        ClaimParsedItem.PosZip = row["ProvZipCode"].ToString();
                    }


                    if (!string.IsNullOrEmpty(row["HospitalInDate"].ToString()))
                    {
                        ClaimParsedItem.HospitalInDate = row["HospitalInDate"].ToString();
                    }


                    if (!string.IsNullOrEmpty(row["HospitalOutDate"].ToString()))
                    {
                        ClaimParsedItem.HospitalOutDate = row["HospitalOutDate"].ToString();
                    }


                    if (!string.IsNullOrEmpty(row["Claim#"].ToString()))
                    {
                        ClaimParsedItem.ClaimNumber = row["Claim#"].ToString(); 
                    }


                    if (!string.IsNullOrEmpty(row["ClaimLine#"].ToString()))
                    {
                        ClaimParsedItem.ClaimLineNumber = row["ClaimLine#"].ToString(); 
                    }


                    if (!string.IsNullOrEmpty(row["claimstatus"].ToString()))
                    {
                        //Claim Status
                    }


                    if (!string.IsNullOrEmpty(row["ClaimAmountPaid"].ToString()))
                    {
                        ClaimParsedItem.ClaimPaidAmount = row["ClaimAmountPaid"].ToString();
                    }


                    if (!string.IsNullOrEmpty(row["ClaimaintPaidAmount"].ToString()))
                    {
                        ClaimParsedItem.ClaimantPaidAmount = row["ClaimaintPaidAmount"].ToString(); 
                    }




                    //add the Excel row (that has been parsed) to the collection/List
                    ClaimFile.ClaimDownloadItems.Add(ClaimParsedItem);


                    if (ClaimFile.ClaimDownloadItems.Count >= 3000)
                    {
                        if (DownloadClaimFileMidParse(ClaimFile))
                        {
                            Loaded = true;
                            ClaimFile.ClaimDownloadItems.Clear();
                        }
                    }
                }


                if (ClaimFile.ClaimDownloadItems.Count > 0)
                {
                    Loaded = true;
                }


                return Loaded;
            }
            catch (Exception ex)
            {
                return Loaded;
            }
        }

        private void SetClaim_GroupAdmin(DownloadsViewModel ClaimFile, ref ClaimViewModel ClaimParsedItem, string ClaimFileValue, int WorksheetColumn)
        {
            try
            {
                if (WorksheetColumn.Equals(1))
                {
                    ClaimParsedItem.GroupName = ClaimFileValue.Trim();
                }
                else if (WorksheetColumn.Equals(2))
                {
                    ClaimParsedItem.GroupNum = ClaimFileValue.Trim();


                    //set the employer_id by going through the group names (set in GetGroupName)
                    if (!string.IsNullOrEmpty(ClaimParsedItem.GroupNum) && 
                        ClaimFile.GroupNames != null)
                    {
                        if (ClaimFile.GroupNames.Count > 0)
                        {
                            foreach (TpaGroupNames tpagrpnmGroup in ClaimFile.GroupNames)
                            {
                                if (!string.IsNullOrEmpty(tpagrpnmGroup.GROUPNUM))
                                {
                                    if (tpagrpnmGroup.GROUPNUM.ToString().Equals(ClaimParsedItem.GroupNum))
                                    {
                                        ClaimParsedItem.EmployerId = tpagrpnmGroup.ICM_EMPLOYER_ID;
                                        break;
                                    }
                                }


                                if (!string.IsNullOrEmpty(tpagrpnmGroup.groupNum2))
                                {
                                    if (tpagrpnmGroup.groupNum2.ToString().Equals(ClaimParsedItem.GroupNum))
                                    {
                                        ClaimParsedItem.EmployerId = tpagrpnmGroup.ICM_EMPLOYER_ID;
                                        break;
                                    }
                                }


                                if (!string.IsNullOrEmpty(tpagrpnmGroup.groupNum3))
                                {
                                    if (tpagrpnmGroup.groupNum3.ToString().Equals(ClaimParsedItem.GroupNum))
                                    {
                                        ClaimParsedItem.EmployerId = tpagrpnmGroup.ICM_EMPLOYER_ID;
                                        break;
                                    }
                                }
                            }
                        }
                    }
                }
                else if (WorksheetColumn.Equals(3))
                {
                    ClaimParsedItem.MemberId = ClaimFileValue.Trim();
                }
                else if (WorksheetColumn.Equals(4))
                {
                    ClaimParsedItem.FirstName = ClaimFileValue.Trim();
                }
                else if (WorksheetColumn.Equals(5))
                {
                    ClaimParsedItem.LastName = ClaimFileValue.Trim();
                }
                else if (WorksheetColumn.Equals(6))
                {
                    ClaimParsedItem.EmployeeSsn = ClaimFileValue.Trim();
                }
                else if (WorksheetColumn.Equals(7))
                {
                    ClaimParsedItem.Birth = ClaimFileValue.Trim();
                }
                else if (WorksheetColumn.Equals(8))
                {
                    ClaimParsedItem.MemFirstName = ClaimFileValue.Trim();
                }
                else if (WorksheetColumn.Equals(9))
                {
                    ClaimParsedItem.MemLastName = ClaimFileValue.Trim();
                }
                else if (WorksheetColumn.Equals(10))
                {
                    ClaimParsedItem.ClaimantSsn = ClaimFileValue.Trim();
                }
                else if (WorksheetColumn.Equals(11))
                {
                    ClaimParsedItem.ClaimantBirth = ClaimFileValue.Trim(); //**
                }
                else if (WorksheetColumn.Equals(12))
                {
                    ClaimParsedItem.SubAdd1 = ClaimFileValue.Trim();
                }
                else if (WorksheetColumn.Equals(13))
                {
                    ClaimParsedItem.SubAdd2 = ClaimFileValue.Trim();
                }
                else if (WorksheetColumn.Equals(14))
                {
                    ClaimParsedItem.SubCity = ClaimFileValue.Trim();
                }
                else if (WorksheetColumn.Equals(15))
                {
                    ClaimParsedItem.SubState = ClaimFileValue.Trim();
                }
                else if (WorksheetColumn.Equals(16))
                {
                    ClaimParsedItem.SubZip = ClaimFileValue.Trim();
                }
                else if (WorksheetColumn.Equals(17))
                {
                    ClaimParsedItem.Diag1 = ClaimFileValue.Trim();
                }
                else if (WorksheetColumn.Equals(18))
                {
                    ClaimParsedItem.Diag2 = ClaimFileValue.Trim();
                }
                else if (WorksheetColumn.Equals(19))
                {
                    ClaimParsedItem.Diag3 = ClaimFileValue.Trim();
                }
                else if (WorksheetColumn.Equals(20))
                {
                    ClaimParsedItem.Diag4 = ClaimFileValue.Trim();
                }
                else if (WorksheetColumn.Equals(21))
                {
                    ClaimParsedItem.Diag5 = ClaimFileValue.Trim();
                }
                else if (WorksheetColumn.Equals(22))
                {
                    ClaimParsedItem.CptCode = ClaimFileValue.Trim();
                }
                else if (WorksheetColumn.Equals(23))
                {
                    //DRG
                }
                else if (WorksheetColumn.Equals(24))
                {
                    //Units of Service
                }
                else if (WorksheetColumn.Equals(25))
                {
                    ClaimParsedItem.ServiceFromDate = ClaimFileValue.Trim(); //**
                }
                else if (WorksheetColumn.Equals(26))
                {
                    ClaimParsedItem.ServiceToDate = ClaimFileValue.Trim();
                }
                else if (WorksheetColumn.Equals(27))
                {
                    ClaimParsedItem.CheckDate = ClaimFileValue.Trim();
                }
                else if (WorksheetColumn.Equals(28))
                {
                    ClaimParsedItem.ProvNpi = ClaimFileValue.Trim(); //**
                }
                else if (WorksheetColumn.Equals(29))
                {
                    ClaimParsedItem.PosName = ClaimFileValue.Trim();
                }
                else if (WorksheetColumn.Equals(30))
                {
                    ClaimParsedItem.ProvName = ClaimFileValue.Trim(); //**
                }
                else if (WorksheetColumn.Equals(31))
                {
                    ClaimParsedItem.PosAddress1 = ClaimFileValue.Trim();
                }
                else if (WorksheetColumn.Equals(32))
                {
                    ClaimParsedItem.PosAddress2 = ClaimFileValue.Trim();
                }
                else if (WorksheetColumn.Equals(33))
                {
                    ClaimParsedItem.PosCity = ClaimFileValue.Trim();
                }
                else if (WorksheetColumn.Equals(34))
                {
                    ClaimParsedItem.PosState = ClaimFileValue.Trim();
                }
                else if (WorksheetColumn.Equals(35))
                {
                    ClaimParsedItem.PosZip = ClaimFileValue.Trim();
                }
                else if (WorksheetColumn.Equals(36))
                {
                    ClaimParsedItem.HospitalInDate = ClaimFileValue.Trim();
                }
                else if (WorksheetColumn.Equals(37))
                {
                    ClaimParsedItem.HospitalOutDate = ClaimFileValue.Trim();
                }
                else if (WorksheetColumn.Equals(38))
                {
                    ClaimParsedItem.ClaimNumber = ClaimFileValue.Trim();
                }
                else if (WorksheetColumn.Equals(39))
                {
                    ClaimParsedItem.ClaimLineNumber = ClaimFileValue.Trim();
                }
                else if (WorksheetColumn.Equals(40))
                {
                    //Claim Status
                }
                else if (WorksheetColumn.Equals(41))
                {
                    ClaimParsedItem.ClaimPaidAmount = ClaimFileValue.Trim();
                }
                else if (WorksheetColumn.Equals(42))
                {
                    ClaimParsedItem.ClaimantPaidAmount = ClaimFileValue.Trim(); //**
                }
            }
            catch (Exception ex)
            {

            }
        }







        private bool DownloadEligibilityFileMidParse(DownloadsViewModel EligibilityFileData)
        {
            bool Downloaded = false;

            try
            { 
                if (EligibilityFileData.RptDownloadId > 0)
                {
                    if (EligibilityFileData.DownloadItem.rpt_download_id.CompareTo(0) == 0)
                    {
                        EligibilityFileData.DownloadItem = GetReportDownloadAdminModel(EligibilityFileData.RptDownloadId);
                    }


                    //download eligibility file
                    if (EligibilityFileData.DownloadItem.is_elgibility_file != null)
                    {
                        if ((bool)EligibilityFileData.DownloadItem.is_elgibility_file)
                        {
                            //set in ParseEligibilityFile
                            if (EligibilityFileData.EligbilityDownloadItems.Count > 0)
                            {
                                if (DownloadEligibilityFile(ref EligibilityFileData))
                                {
                                    Downloaded = true;


                                    if (EligibilityFileData.EligibilityDownload_CreateDuplicateMemberFile)
                                    {
                                        //Create a new file here for each time DownloadEligibilityFileMidParse is run...put timestamp in filename
                                        if (CreateDuplicateMemberFile(ref EligibilityFileData))
                                        {
                                            AutoMergeDuplicateMembers(EligibilityFileData);
                                        }
                                    }


                                    if (EligibilityFileData.EligibilityDownload_CreateMemberHasNoEmployerFile)
                                    {
                                        //Create a new file here for each time DownloadEligibilityFileMidParse is run...put timestamp in filename
                                        CreateMemberHasNoEmployerFile(ref EligibilityFileData);
                                    }


                                    if (EligibilityFileData.EligibilityDownload_CreateMemberEmptyCityFile)
                                    {
                                        CreateMemberEmptyCityFile(ref EligibilityFileData);
                                    }


                                    if (EligibilityFileData.EligibilityDownload_CreateMemberEmptyEmployerFile)
                                    {
                                        CreateMemberEmptyEmployerFile(ref EligibilityFileData);
                                    }
                                }
                            }
                        }
                    }
                }


                return Downloaded;
            }
            catch(Exception ex)
            {
                return Downloaded;
            }
        }

        public bool DownloadFile(ref DownloadsViewModel dwnldsvmToProcess)
        {

            bool Processed = false;

            try
            {

                if (dwnldsvmToProcess.RptDownloadId > 0)
                {

                    if (dwnldsvmToProcess.DownloadItem.rpt_download_id.CompareTo(0) == 0)
                    {
                        dwnldsvmToProcess.DownloadItem = GetReportDownloadAdminModel(dwnldsvmToProcess.RptDownloadId);
                    }


                    //download eligibility file
                    if (dwnldsvmToProcess.DownloadItem.is_elgibility_file != null)
                    {
                        if ((bool)dwnldsvmToProcess.DownloadItem.is_elgibility_file)
                        {

                            //set in ParseEligibilityFile
                            if (dwnldsvmToProcess.EligbilityDownloadItems.Count > 0)
                            {

                                if (DownloadEligibilityFile(ref dwnldsvmToProcess))
                                {

                                    Processed = true;


                                    if (dwnldsvmToProcess.EligibilityDownload_CreateDuplicateMemberFile)
                                    {

                                    }

                                    if (dwnldsvmToProcess.EligibilityDownload_CreateMemberHasNoEmployerFile)
                                    {

                                    }

                                }

                            }

                        }
                    }
                    //download claim file
                    //else if ((bool)dwnldsvmToProcess.DownloadItem.is_claim_file)
                    //{

                    //}

                }


                return Processed;

            }
            catch(Exception ex)
            {
                return Processed;
            }

        }

        private bool DownloadEligibilityFile(ref DownloadsViewModel EligibilityFileData)
        {

            bool ProcessedEligibility = false;


            try
            {

                switch (EligibilityFileData.DownloadItem.tpa_id)
                {

                    case 439:
                    case 412:

                        if (DownloadEligibilityFile_Egp(ref EligibilityFileData))
                        {
                            ProcessedEligibility = true;
                        }

                        break;


                    default:

                        if (DownloadEligibilityFile_Dbms(ref EligibilityFileData))
                        {
                            ProcessedEligibility = true;
                        }

                        break;

                }


                return ProcessedEligibility;

            }
            catch(Exception ex)
            {
                return ProcessedEligibility;
            }

        }




        private bool DownloadEligibilityFile_Egp(ref DownloadsViewModel dwnldsvmToProcess)
        {

            bool ProcessedEgp = false;


            try
            {

                int intDownloadCnt = 1;

                foreach (EligibilityViewModel eligvmItem in dwnldsvmToProcess.EligbilityDownloadItems)
                {

                    EligibilityViewModel eligvmPotentialMember = eligvmItem;

                    eligvmPotentialMember.SystemUserId = dwnldsvmToProcess.DownloadingUserId;
                    eligvmPotentialMember.GroupNames = dwnldsvmToProcess.GroupNames;


                    //checks to see if there is one or multiple members in the system
                    if (VerifyEligibilityMemberInSystem_Egp(ref eligvmPotentialMember))
                    {
                        //because there is 1 member in the system, update the member
                        if (UpdateMemberInSystem_Egp(ref eligvmPotentialMember))
                        {
                            //flag the return function value
                            if (!ProcessedEgp)
                            {
                                ProcessedEgp = true;
                            }
                        }

                    }
                    else
                    { 
                        if (!eligvmPotentialMember.MultipleMembersInSystem)
                        {
                            if (!eligvmPotentialMember.EmptyCityInFile && !eligvmPotentialMember.EmptyEmployerInFile)
                            {
                                //because there is 1 member in the system, insert the member
                                if (InsertMemberInSystem_Egp(ref eligvmPotentialMember))
                                {
                                    //flag the return function value
                                    if (!ProcessedEgp)
                                    {
                                        ProcessedEgp = true;
                                    }
                                }
                            }
                            else
                            {
                                if (eligvmPotentialMember.EmptyCityInFile)
                                {
                                    dwnldsvmToProcess.MemberEmptyCity.Add(eligvmPotentialMember);

                                    if (!dwnldsvmToProcess.EligibilityDownload_CreateMemberEmptyCityFile)
                                    {
                                        dwnldsvmToProcess.EligibilityDownload_CreateMemberEmptyCityFile = true;
                                    }

                                    //flag the return function value
                                    if (!ProcessedEgp)
                                    {
                                        ProcessedEgp = true;
                                    }
                                }

                                if (eligvmPotentialMember.EmptyEmployerInFile)
                                {
                                    dwnldsvmToProcess.MemberEmptyEmployer.Add(eligvmPotentialMember);

                                    if (!dwnldsvmToProcess.EligibilityDownload_CreateMemberEmptyEmployerFile)
                                    {
                                        dwnldsvmToProcess.EligibilityDownload_CreateMemberEmptyEmployerFile = true;
                                    }

                                    //flag the return function value
                                    if (!ProcessedEgp)
                                    {
                                        ProcessedEgp = true;
                                    }
                                }
                            }

                        }
                        else
                        {

                            //**UPDATE - put the eligibility item that has multiple members in the system into a file to be downloaded to the user's pc
                            dwnldsvmToProcess.DuplicateMembersToMerge.Add(eligvmPotentialMember);

                            if (!dwnldsvmToProcess.EligibilityDownload_CreateDuplicateMemberFile)
                            {
                                dwnldsvmToProcess.EligibilityDownload_CreateDuplicateMemberFile = true;
                            }


                            //Danny said if a Term Date exists that ALL duplicate members should be termed...03/01/2018
                            if (VerifyEligibilityMemberHasTermDate_Egp(eligvmPotentialMember))
                            {
                                UpdateDuplicateMembersTermDate_Egp(eligvmPotentialMember);
                            }


                            //flag the return function value
                            if (!ProcessedEgp)
                            {
                                ProcessedEgp = true;
                            }

                        }

                    }


                    //**UPDATE - put the eligibility item that has no employer into a file to be downloaded to the user's pc
                    if (eligvmPotentialMember.NoEmployer)
                    {

                        dwnldsvmToProcess.MemberHasNoEmployer.Add(eligvmPotentialMember);

                        if (!dwnldsvmToProcess.EligibilityDownload_CreateMemberHasNoEmployerFile)
                        {
                            dwnldsvmToProcess.EligibilityDownload_CreateMemberHasNoEmployerFile = true;
                        }

                        //flag the return function value
                        if (!ProcessedEgp)
                        {
                            ProcessedEgp = true;
                        }

                    }
                    else
                    {
                        eligvmItem.MemberUpdated = eligvmPotentialMember.MemberUpdated;
                        eligvmItem.MemberInserted = eligvmPotentialMember.MemberInserted;

                        //flag the return function value
                        if (!ProcessedEgp)
                        {
                            ProcessedEgp = true;
                        }
                    }


                    intDownloadCnt++;

                }  //foreach (EligibilityViewModel eligvmItem in dwnldsvmToProcess.EligbilityDownloadItems)...END


                return ProcessedEgp;

            }
            catch (Exception ex)
            {
                return ProcessedEgp;
            }

        }        

        private bool VerifyEligibilityMemberInSystem_Egp(ref EligibilityViewModel eligvmItem)
        {
            bool InSystem = false;

            try
            {

                eligvmItem.MultipleMembersInSystem = false;


                if (!string.IsNullOrEmpty(eligvmItem.DepCity) && !string.IsNullOrEmpty(eligvmItem.MemId))
                {
                    List<IcmsMember> lstMembersInSystem = new List<IcmsMember>();

                    lstMembersInSystem = GetEligibilityMembers(ref eligvmItem);


                    if (lstMembersInSystem != null)
                    {
                        if (lstMembersInSystem.Count == 1)
                        {
                            eligvmItem.MemberFoundInSystem = lstMembersInSystem.ElementAt(0);
                            InSystem = true;
                        }
                        else
                        {
                            //multiple members in the system with the same First, Last, DOB
                            if (!VerifyEligibilityMemberCity(eligvmItem, ref lstMembersInSystem))
                            {
                                if (!VerifyMemberEmployer(eligvmItem, ref lstMembersInSystem))
                                {
                                    if (lstMembersInSystem.Count == 1)
                                    {
                                        eligvmItem.MemberFoundInSystem = lstMembersInSystem.ElementAt(0);
                                        InSystem = true;
                                    }
                                    else if (lstMembersInSystem.Count > 1)
                                    {
                                        eligvmItem.MultipleMembersInSystem = true;
                                        InSystem = false;
                                    }
                                    else
                                    {
                                        eligvmItem.MultipleMembersInSystem = false;
                                        InSystem = false;
                                    }
                                }
                                else
                                {
                                    if (lstMembersInSystem.Count > 1)
                                    {
                                        eligvmItem.MultipleMembersInSystem = true;
                                        InSystem = false;
                                    }
                                    else
                                    {
                                        if (lstMembersInSystem.Count == 1)
                                        {
                                            eligvmItem.MultipleMembersInSystem = false;
                                            InSystem = true;
                                        }
                                        else
                                        {
                                            eligvmItem.MultipleMembersInSystem = false;
                                            InSystem = false;
                                        }
                                    }
                                }
                            }
                            else
                            {
                                if (lstMembersInSystem.Count > 1)
                                {
                                    eligvmItem.MultipleMembersInSystem = true;
                                    InSystem = false;
                                }
                                else
                                {
                                    if (lstMembersInSystem.Count == 1)
                                    {
                                        eligvmItem.MultipleMembersInSystem = false;
                                        InSystem = true;
                                    }
                                    else
                                    {
                                        eligvmItem.MultipleMembersInSystem = true;
                                        InSystem = false;
                                    }
                                }
                            }

                        }
                    }
                    else
                    {
                        eligvmItem.MultipleMembersInSystem = false;
                        InSystem = false;
                    }

                }
                else
                {
                    if (string.IsNullOrEmpty(eligvmItem.DepCity))
                    {
                        eligvmItem.EmptyCityInFile = true;
                    }
                    else if (string.IsNullOrEmpty(eligvmItem.MemId))
                    {
                        eligvmItem.EmptyEmployerInFile = true;
                    }
                }


                return InSystem;

            }
            catch(Exception ex)
            {
                return InSystem;
            }

        }        

        private bool VerifyEligibilityMemberHasTermDate_Egp(EligibilityViewModel VerifyPotentialMember)
        {
            bool HasTermDate = false;


            try
            {

                if (!string.IsNullOrEmpty(VerifyPotentialMember.DepTermDate))
                {

                    try
                    {
                        DateTime dtResult;

                        if (DateTime.TryParse(VerifyPotentialMember.DepTermDate, out dtResult))
                        {
                            HasTermDate = true;
                        }
                    }
                    catch(Exception exDate)
                    {
                        return HasTermDate;
                    }

                }


                return HasTermDate;

            }
            catch (Exception ex)
            {
                return HasTermDate;
            }
        }

        private bool UpdateMemberInSystem_Egp(ref EligibilityViewModel eligvmPotentialMember)
        {
            bool UpdatedEgp = false;

            try
            {
                AddMemberViewModel addmemvmToUpdate = new AddMemberViewModel();


                //EMPLOYER
                if (eligvmPotentialMember.GroupNames != null)
                {

                    foreach (TpaGroupNames tpagrpnmGroupNum in eligvmPotentialMember.GroupNames)
                    {

                        if (!string.IsNullOrEmpty(tpagrpnmGroupNum.GROUPNUM))
                        {
                            if (tpagrpnmGroupNum.GROUPNUM.ToString().Equals(eligvmPotentialMember.MemId))
                            {
                                addmemvmToUpdate.EmployerId = tpagrpnmGroupNum.ICM_EMPLOYER_ID;
                                break;
                            }
                        }

                        if (!string.IsNullOrEmpty(tpagrpnmGroupNum.groupNum2))
                        {
                            if (tpagrpnmGroupNum.groupNum2.ToString().Equals(eligvmPotentialMember.MemId))
                            {
                                addmemvmToUpdate.EmployerId = tpagrpnmGroupNum.ICM_EMPLOYER_ID;
                                break;
                            }
                        }

                        if (!string.IsNullOrEmpty(tpagrpnmGroupNum.groupNum3))
                        {
                            if (tpagrpnmGroupNum.groupNum3.ToString().Equals(eligvmPotentialMember.MemId))
                            {
                                addmemvmToUpdate.EmployerId = tpagrpnmGroupNum.ICM_EMPLOYER_ID;
                                break;
                            }
                        }

                    }

                }
                else
                {
                    addmemvmToUpdate.EmployerId = 0;
                }


                if (addmemvmToUpdate.EmployerId != null)
                {
                    if (addmemvmToUpdate.EmployerId.Value.CompareTo(0) > 0 &&
                        !string.IsNullOrEmpty(eligvmPotentialMember.MemberFoundInSystem.member_id.ToString()))
                    {

                        //get other employer related data (client_id, client_bu_id)
                        MemberRepository memRepo = new MemberRepository();
                        memRepo.GetMembersEmployerClientAndClientBu(addmemvmToUpdate);


                        //set in VerifyEligibilityMemberInSystem_Egp > GetEligibilityMembers(ref EligibilityViewModel)-------------
                        //                                                                                             |
                        addmemvmToUpdate.MemberId = eligvmPotentialMember.MemberFoundInSystem.member_id.ToString();//<--


                        SetAddMemberViewModel(ref addmemvmToUpdate, eligvmPotentialMember);


                        if (!string.IsNullOrEmpty(addmemvmToUpdate.MemberId))
                        {
                            if (UpdateMember(addmemvmToUpdate))
                            {

                                UpdateMemberEnrollment(addmemvmToUpdate);
                                UpdateMemberAddress(addmemvmToUpdate);
                                UpdateMemberPhone(addmemvmToUpdate);

                                UpdatedEgp = true;

                                eligvmPotentialMember.MemberUpdated = true;

                            }
                        }

                    }
                    else
                    {
                        eligvmPotentialMember.NoEmployer = true;
                    }
                }
                else
                {
                    eligvmPotentialMember.NoEmployer = true;
                }


                return UpdatedEgp;

            }
            catch(Exception ex)
            {
                return UpdatedEgp;
            }


        }        

        private void UpdateDuplicateMembersTermDate_Egp(EligibilityViewModel UpdatePotentialMember)
        {
            try
            {
                if (!string.IsNullOrEmpty(UpdatePotentialMember.DepCity) && !string.IsNullOrEmpty(UpdatePotentialMember.MemId))
                {
                    List<IcmsMember> lstMembersInSystem = new List<IcmsMember>();

                    lstMembersInSystem = GetEligibilityMembers(ref UpdatePotentialMember);

                    if (lstMembersInSystem != null)
                    {
                        if (lstMembersInSystem.Count > 1)
                        {
                            if (!VerifyEligibilityMemberCity(UpdatePotentialMember, ref lstMembersInSystem))
                            {
                                if (!VerifyMemberEmployer(UpdatePotentialMember, ref lstMembersInSystem))
                                {
                                    foreach (IcmsMember memToUpdate in lstMembersInSystem)
                                    {
                                        using (var db = new ICMS2DbContext())
                                        {
                                            UpdateMemberTermDate(memToUpdate, UpdatePotentialMember);
                                            UpdateMemberEnrollmentTermDate(memToUpdate, UpdatePotentialMember);
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            catch(Exception ex)
            {

            }
        }

        private bool InsertMemberInSystem_Egp(ref EligibilityViewModel eligvmPotentialMember)
        {

            bool InsertedEgp = false;

            try
            {
                AddMemberViewModel addmemvmToInsert = new AddMemberViewModel();


                if (eligvmPotentialMember.GroupNames != null)
                {

                    foreach (TpaGroupNames tpagrpnmGroupNum in eligvmPotentialMember.GroupNames)
                    {

                        if (!string.IsNullOrEmpty(tpagrpnmGroupNum.GROUPNUM))
                        {
                            if (tpagrpnmGroupNum.GROUPNUM.ToString().Equals(eligvmPotentialMember.MemId))
                            {
                                addmemvmToInsert.EmployerId = tpagrpnmGroupNum.ICM_EMPLOYER_ID;
                                break;
                            }
                        }

                        if (!string.IsNullOrEmpty(tpagrpnmGroupNum.groupNum2))
                        {
                            if (tpagrpnmGroupNum.groupNum2.ToString().Equals(eligvmPotentialMember.MemId))
                            {
                                addmemvmToInsert.EmployerId = tpagrpnmGroupNum.ICM_EMPLOYER_ID;
                                break;
                            }
                        }

                        if (!string.IsNullOrEmpty(tpagrpnmGroupNum.groupNum3))
                        {
                            if (tpagrpnmGroupNum.groupNum3.ToString().Equals(eligvmPotentialMember.MemId))
                            {
                                addmemvmToInsert.EmployerId = tpagrpnmGroupNum.ICM_EMPLOYER_ID;
                                break;
                            }
                        }

                    }

                }
                else
                {
                    addmemvmToInsert.EmployerId = 0;
                }




                if (addmemvmToInsert.EmployerId > 0)
                {

                    SetAddMemberViewModel(ref addmemvmToInsert, eligvmPotentialMember);


                    if (string.IsNullOrEmpty(addmemvmToInsert.MemberId))
                    {
                        if (InsertMember(addmemvmToInsert))
                        {

                            InsertMemberEnrollment(addmemvmToInsert);
                            InsertMemberAddress(addmemvmToInsert);
                            InsertMemberPhone(addmemvmToInsert);

                            InsertedEgp = true;

                            eligvmPotentialMember.MemberInserted = true;

                        }
                    }

                }
                else
                {
                    eligvmPotentialMember.NoEmployer = true;
                }


                return InsertedEgp;

            }
            catch(Exception ex)
            {
                return InsertedEgp;
            }

        }




        private bool DownloadEligibilityFile_Dbms(ref DownloadsViewModel EligibilityFileData)
        {

            bool ProcessedDbms = false;

            try
            {
                int DownloadedCount = 1;


                foreach (EligibilityViewModel eligvmItem in EligibilityFileData.EligbilityDownloadItems)
                {
                    EligibilityViewModel PotentialMemberBeingDownloaded = eligvmItem;
                    PotentialMemberBeingDownloaded.SystemUserId = EligibilityFileData.DownloadingUserId;
                    PotentialMemberBeingDownloaded.GroupNames = EligibilityFileData.GroupNames;


                    //checks to see if there is one or multiple members in the system
                    if (VerifyEligibilityMemberInSystem_Dbms(ref PotentialMemberBeingDownloaded))
                    {
                        //because there is 1 member in the system, update the member
                        if (UpdateMemberInSystem_Dbms(ref PotentialMemberBeingDownloaded))
                        {
                            //flag the return function value
                            if (!ProcessedDbms)
                            {
                                ProcessedDbms = true;
                            }
                        }
                    }
                    else
                    {
                        if (!PotentialMemberBeingDownloaded.MultipleMembersInSystem)
                        {
                            if (!PotentialMemberBeingDownloaded.EmptyCityInFile && 
                                !PotentialMemberBeingDownloaded.EmptyEmployerInFile)
                            {
                                //because there is 1 member in the system, insert the member
                                if (InsertedMemberInSystem_Dbms(ref PotentialMemberBeingDownloaded))
                                {
                                    //flag the return function value
                                    if (!ProcessedDbms)
                                    {
                                        ProcessedDbms = true;
                                    }
                                }
                            }
                            else
                            {
                                if (PotentialMemberBeingDownloaded.EmptyCityInFile)
                                {
                                    EligibilityFileData.MemberEmptyCity.Add(PotentialMemberBeingDownloaded);


                                    if (!EligibilityFileData.EligibilityDownload_CreateMemberEmptyCityFile)
                                    {
                                        EligibilityFileData.EligibilityDownload_CreateMemberEmptyCityFile = true;
                                    }


                                    //flag the return function value
                                    if (!ProcessedDbms)
                                    {
                                        ProcessedDbms = true;
                                    }
                                }


                                if (PotentialMemberBeingDownloaded.EmptyEmployerInFile)
                                {
                                    EligibilityFileData.MemberEmptyEmployer.Add(PotentialMemberBeingDownloaded);


                                    if (!EligibilityFileData.EligibilityDownload_CreateMemberEmptyEmployerFile)
                                    {
                                        EligibilityFileData.EligibilityDownload_CreateMemberEmptyEmployerFile = true;
                                    }


                                    //flag the return function value
                                    if (!ProcessedDbms)
                                    {
                                        ProcessedDbms = true;
                                    }
                                }
                            }

                        }
                        else
                        {

                            //**UPDATE - put the eligibility item that has multiple members in the system into a file to be downloaded to the user's pc
                            EligibilityFileData.DuplicateMembersToMerge.Add(PotentialMemberBeingDownloaded);


                            if (!EligibilityFileData.EligibilityDownload_CreateDuplicateMemberFile)
                            {
                                EligibilityFileData.EligibilityDownload_CreateDuplicateMemberFile = true;
                            }


                            //Danny said if a Term Date exists that ALL duplicate members should be termed...03/01/2018
                            if (VerifyEligibilityMemberHasTermDate_Dbms(PotentialMemberBeingDownloaded))
                            {
                                UpdateDuplicateMembersTermDate_Dbms(PotentialMemberBeingDownloaded);
                            }


                            //flag the return function value
                            if (!ProcessedDbms)
                            {
                                ProcessedDbms = true;
                            }
                        }
                    }


                    //**UPDATE - put the eligibility item that has no employer into a file to be downloaded to the user's pc
                    if (PotentialMemberBeingDownloaded.NoEmployer)
                    {
                        EligibilityFileData.MemberHasNoEmployer.Add(PotentialMemberBeingDownloaded);


                        if (!EligibilityFileData.EligibilityDownload_CreateMemberHasNoEmployerFile)
                        {
                            EligibilityFileData.EligibilityDownload_CreateMemberHasNoEmployerFile = true;
                        }


                        //flag the return function value
                        if (!ProcessedDbms)
                        {
                            ProcessedDbms = true;
                        }
                    }
                    else
                    {
                        eligvmItem.MemberUpdated = PotentialMemberBeingDownloaded.MemberUpdated;
                        eligvmItem.MemberInserted = PotentialMemberBeingDownloaded.MemberInserted;


                        //flag the return function value
                        if (!ProcessedDbms)
                        {
                            ProcessedDbms = true;
                        }
                    }


                    DownloadedCount++;
                }


                return ProcessedDbms;
            }
            catch (Exception ex)
            {
                return ProcessedDbms;
            }
        }

        private bool VerifyEligibilityMemberInSystem_Dbms(ref EligibilityViewModel PotentialMemberBeingDownloaded)
        {
            bool InSystem = false;

            try
            {
                PotentialMemberBeingDownloaded.MultipleMembersInSystem = false;


                if (!string.IsNullOrEmpty(PotentialMemberBeingDownloaded.DepCity) && 
                    !string.IsNullOrEmpty(PotentialMemberBeingDownloaded.MemId))
                {
                    List<IcmsMember> MembersInSystemMatchingCriteria = new List<IcmsMember>();
                    MembersInSystemMatchingCriteria = GetEligibilityMembers(ref PotentialMemberBeingDownloaded);


                    if (MembersInSystemMatchingCriteria != null)
                    {
                        if (MembersInSystemMatchingCriteria.Count.Equals(1))
                        {
                            PotentialMemberBeingDownloaded.MemberFoundInSystem = MembersInSystemMatchingCriteria.ElementAt(0);
                            InSystem = true;
                        }
                        else
                        {
                            //multiple members in the system with the same First, Last, DOB
                            if (!VerifyEligibilityMemberCity(PotentialMemberBeingDownloaded, ref MembersInSystemMatchingCriteria))
                            {
                                if (!VerifyMemberEmployer(PotentialMemberBeingDownloaded, ref MembersInSystemMatchingCriteria))
                                {
                                    if (MembersInSystemMatchingCriteria.Count.Equals(1))
                                    {
                                        PotentialMemberBeingDownloaded.MemberFoundInSystem = MembersInSystemMatchingCriteria.ElementAt(0);
                                        InSystem = true;
                                    }
                                    else if (MembersInSystemMatchingCriteria.Count > 1)
                                    {
                                        PotentialMemberBeingDownloaded.MultipleMembersInSystem = true;
                                        InSystem = false;
                                    }
                                    else
                                    {
                                        PotentialMemberBeingDownloaded.MultipleMembersInSystem = false;
                                        InSystem = false;
                                    }
                                }
                                else
                                {
                                    if (MembersInSystemMatchingCriteria.Count > 1)
                                    {
                                        PotentialMemberBeingDownloaded.MultipleMembersInSystem = true;
                                        InSystem = false;
                                    }
                                    else
                                    {
                                        if (MembersInSystemMatchingCriteria.Count.Equals(1))
                                        {
                                            PotentialMemberBeingDownloaded.MultipleMembersInSystem = false;
                                            InSystem = true;
                                        }
                                        else
                                        {
                                            PotentialMemberBeingDownloaded.MultipleMembersInSystem = false;
                                            InSystem = false;
                                        }
                                    }
                                }
                            }
                            else
                            {
                                if (MembersInSystemMatchingCriteria.Count > 1)
                                {
                                    PotentialMemberBeingDownloaded.MultipleMembersInSystem = true;
                                    InSystem = false;
                                }
                                else
                                {
                                    if (MembersInSystemMatchingCriteria.Count.Equals(1))
                                    {
                                        PotentialMemberBeingDownloaded.MultipleMembersInSystem = false;
                                        InSystem = true;
                                    }
                                    else
                                    {
                                        PotentialMemberBeingDownloaded.MultipleMembersInSystem = true;
                                        InSystem = false;
                                    }
                                }
                            }
                        }
                    }
                    else
                    {
                        PotentialMemberBeingDownloaded.MultipleMembersInSystem = false;
                        InSystem = false;
                    }
                }
                else
                {
                    if (string.IsNullOrEmpty(PotentialMemberBeingDownloaded.DepCity))
                    {
                        PotentialMemberBeingDownloaded.EmptyCityInFile = true;
                    }
                    else if (string.IsNullOrEmpty(PotentialMemberBeingDownloaded.MemId))
                    {
                        PotentialMemberBeingDownloaded.EmptyEmployerInFile = true;
                    }
                }


                return InSystem;
            }
            catch(Exception ex)
            {
                return InSystem;
            }
        }

        private bool VerifyEligibilityMemberHasTermDate_Dbms(EligibilityViewModel PotentialMemberBeingDownloaded)
        {
            bool HasTermDate = false;

            try
            {
                if (!string.IsNullOrEmpty(PotentialMemberBeingDownloaded.DepTermDate))
                {
                    try
                    {
                        DateTime OutDepTermDate = DateTime.MinValue;


                        if (DateTime.TryParse(PotentialMemberBeingDownloaded.DepTermDate, out OutDepTermDate))
                        {
                            HasTermDate = true;
                        }
                    }
                    catch (Exception ex)
                    {
                        return HasTermDate;
                    }
                }


                return HasTermDate;
            }
            catch (Exception ex)
            {
                return HasTermDate;
            }
        }

        private bool UpdateMemberInSystem_Dbms(ref EligibilityViewModel PotentialMemberBeingDownloaded)
        {

            bool UpdatedDbms = false;

            try
            {
                AddMemberViewModel MemberInSystemToUpdate = new AddMemberViewModel();


                //EMPLOYER
                if (PotentialMemberBeingDownloaded.GroupNames != null)
                {
                    foreach (TpaGroupNames tpagrpnmGroupNum in PotentialMemberBeingDownloaded.GroupNames)
                    {
                        if (!string.IsNullOrEmpty(tpagrpnmGroupNum.GROUPNUM))
                        {
                            if (tpagrpnmGroupNum.GROUPNUM.ToString().Equals(PotentialMemberBeingDownloaded.MemId))
                            {
                                MemberInSystemToUpdate.EmployerId = tpagrpnmGroupNum.ICM_EMPLOYER_ID;
                                break;
                            }
                        }

                        if (!string.IsNullOrEmpty(tpagrpnmGroupNum.groupNum2))
                        {
                            if (tpagrpnmGroupNum.groupNum2.ToString().Equals(PotentialMemberBeingDownloaded.MemId))
                            {
                                MemberInSystemToUpdate.EmployerId = tpagrpnmGroupNum.ICM_EMPLOYER_ID;
                                break;
                            }
                        }

                        if (!string.IsNullOrEmpty(tpagrpnmGroupNum.groupNum3))
                        {
                            if (tpagrpnmGroupNum.groupNum3.ToString().Equals(PotentialMemberBeingDownloaded.MemId))
                            {
                                MemberInSystemToUpdate.EmployerId = tpagrpnmGroupNum.ICM_EMPLOYER_ID;
                                break;
                            }
                        }
                    }
                }
                else
                {
                    MemberInSystemToUpdate.EmployerId = 0;
                }


                if (MemberInSystemToUpdate.EmployerId != null)
                {
                    if (MemberInSystemToUpdate.EmployerId.Value > 0 &&
                        !string.IsNullOrEmpty(PotentialMemberBeingDownloaded.MemberFoundInSystem.member_id.ToString()))
                    {

                        //get other employer related data (client_id, client_bu_id)
                        MemberRepository MemberInfo = new MemberRepository();
                        MemberInfo.GetMembersEmployerClientAndClientBu(MemberInSystemToUpdate);


                        //set in VerifyEligibilityMemberInSystem_Egp > GetEligibilityMembers(ref EligibilityViewModel)-------------
                        //                                                                                             |
                        MemberInSystemToUpdate.MemberId = PotentialMemberBeingDownloaded.MemberFoundInSystem.member_id.ToString();//<--


                        SetAddMemberViewModel(ref MemberInSystemToUpdate, PotentialMemberBeingDownloaded);


                        if (!string.IsNullOrEmpty(MemberInSystemToUpdate.MemberId))
                        {
                            if (UpdateMember(MemberInSystemToUpdate))
                            {
                                UpdateMemberEnrollment(MemberInSystemToUpdate);
                                UpdateMemberAddress(MemberInSystemToUpdate);
                                UpdateMemberPhone(MemberInSystemToUpdate);


                                UpdatedDbms = true;
                                PotentialMemberBeingDownloaded.MemberUpdated = true;
                            }
                        }
                    }
                    else
                    {
                        PotentialMemberBeingDownloaded.NoEmployer = true;
                    }
                }
                else
                {
                    PotentialMemberBeingDownloaded.NoEmployer = true;
                }


                return UpdatedDbms;
            }
            catch(Exception ex)
            {
                return UpdatedDbms;
            }
        }

        private void UpdateDuplicateMembersTermDate_Dbms(EligibilityViewModel PotentialMemberBeingDownloaded)
        {
            try
            {
                if (!string.IsNullOrEmpty(PotentialMemberBeingDownloaded.DepCity) && 
                    !string.IsNullOrEmpty(PotentialMemberBeingDownloaded.MemId))
                {
                    List<IcmsMember> MembersInSystemMatchingCriteria = new List<IcmsMember>();
                    MembersInSystemMatchingCriteria = GetEligibilityMembers(ref PotentialMemberBeingDownloaded);


                    if (MembersInSystemMatchingCriteria != null)
                    {
                        if (MembersInSystemMatchingCriteria.Count > 1)
                        {
                            if (!VerifyEligibilityMemberCity(PotentialMemberBeingDownloaded, ref MembersInSystemMatchingCriteria))
                            {
                                if (!VerifyMemberEmployer(PotentialMemberBeingDownloaded, ref MembersInSystemMatchingCriteria))
                                {
                                    foreach (IcmsMember MemberToUpdateTermDate in MembersInSystemMatchingCriteria)
                                    {
                                        using (var db = new ICMS2DbContext())
                                        {
                                            UpdateMemberTermDate(MemberToUpdateTermDate, PotentialMemberBeingDownloaded);
                                            UpdateMemberEnrollmentTermDate(MemberToUpdateTermDate, PotentialMemberBeingDownloaded);
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {

            }
        }

        private bool InsertedMemberInSystem_Dbms(ref EligibilityViewModel PotentialMemberBeingDownloaded)
        {
            bool InsertedDbms = false;

            try
            {
                AddMemberViewModel MemberToInsert = new AddMemberViewModel();


                if (PotentialMemberBeingDownloaded.GroupNames != null)
                {
                    foreach (TpaGroupNames tpagrpnmGroupNum in PotentialMemberBeingDownloaded.GroupNames)
                    {
                        if (!string.IsNullOrEmpty(tpagrpnmGroupNum.GROUPNUM))
                        {
                            if (tpagrpnmGroupNum.GROUPNUM.ToString().Equals(PotentialMemberBeingDownloaded.MemId))
                            {
                                MemberToInsert.EmployerId = tpagrpnmGroupNum.ICM_EMPLOYER_ID;
                                break;
                            }
                        }


                        if (!string.IsNullOrEmpty(tpagrpnmGroupNum.groupNum2))
                        {
                            if (tpagrpnmGroupNum.groupNum2.ToString().Equals(PotentialMemberBeingDownloaded.MemId))
                            {
                                MemberToInsert.EmployerId = tpagrpnmGroupNum.ICM_EMPLOYER_ID;
                                break;
                            }
                        }


                        if (!string.IsNullOrEmpty(tpagrpnmGroupNum.groupNum3))
                        {
                            if (tpagrpnmGroupNum.groupNum3.ToString().Equals(PotentialMemberBeingDownloaded.MemId))
                            {
                                MemberToInsert.EmployerId = tpagrpnmGroupNum.ICM_EMPLOYER_ID;
                                break;
                            }
                        }
                    }
                }
                else
                {
                    MemberToInsert.EmployerId = 0;
                }
                

                if (MemberToInsert.EmployerId > 0)
                {
                    SetAddMemberViewModel(ref MemberToInsert, PotentialMemberBeingDownloaded);


                    if (string.IsNullOrEmpty(MemberToInsert.MemberId))
                    {
                        if (InsertMember(MemberToInsert))
                        {
                            InsertMemberEnrollment(MemberToInsert);
                            InsertMemberAddress(MemberToInsert);
                            InsertMemberPhone(MemberToInsert);


                            InsertedDbms = true;
                            PotentialMemberBeingDownloaded.MemberInserted = true;
                        }
                    }
                }
                else
                {
                    PotentialMemberBeingDownloaded.NoEmployer = true;
                }


                return InsertedDbms;
            }
            catch(Exception ex)
            {
                return InsertedDbms;
            }
        }








        private bool DownloadClaimFileMidParse(DownloadsViewModel ClaimFile)
        {
            bool Downloaded = false;

            try
            {
                if (ClaimFile.RptDownloadId > 0)
                {
                    if (ClaimFile.DownloadItem.rpt_download_id.CompareTo(0) == 0)
                    {
                        ClaimFile.DownloadItem = GetReportDownloadAdminModel(ClaimFile.RptDownloadId);
                    }


                    if (ClaimFile.DownloadItem.is_claim_file != null)
                    {
                        if ((bool)ClaimFile.DownloadItem.is_claim_file)
                        {
                            if (ClaimFile.ClaimDownloadItems.Count > 0)
                            {
                                if (DownloadClaimFile(ref ClaimFile))
                                {
                                    Downloaded = true;


                                    if (ClaimFile.ClaimDownload_CreateEmployerNotInSystemFile)
                                    {
                                        CreateClaimEmployerNotInSystemFile(ref ClaimFile);
                                    }


                                    if (ClaimFile.ClaimDownload_CreateMemberNotInSystemFile)
                                    {
                                        CreateClaimMemberNotInSystemFile(ref ClaimFile);
                                    }


                                    if (ClaimFile.ClaimDownload_CreateClaimInSystemFile)
                                    {
                                        CreateClaimInSystemFile(ref ClaimFile);
                                    }
                                }
                            }
                        }
                    }
                }


                return Downloaded;
            }
            catch (Exception ex)
            {
                return Downloaded;
            }
        }

        public bool DownloadClaimFile(ref DownloadsViewModel ClaimFile)
        {

            bool Downloaded = false;

            try
            {
                switch (ClaimFile.DownloadItem.tpa_id)
                {

                    case 439:
                    case 412:

                        if (DownloadClaimFile_Egp(ref ClaimFile))
                        {
                            Downloaded = true;
                        }

                        break;


                    default:

                        if (DownloadClaimFile_Dbms(ref ClaimFile))
                        {
                            Downloaded = true;
                        }

                        break;
                }

                return Downloaded;

            }
            catch (Exception ex)
            {
                return Downloaded;
            }

        }



        private bool DownloadClaimFile_Egp(ref DownloadsViewModel ClaimFile)
        {
            bool DownloadedEgp = false;

            try
            {
                int intDownloadCnt = 1;

                foreach (ClaimViewModel clmItem in ClaimFile.ClaimDownloadItems)
                {
                    ClaimViewModel clmPotentialMember = clmItem;

                    clmPotentialMember.SystemUserId = ClaimFile.DownloadingUserId;
                    clmPotentialMember.GroupNames = ClaimFile.GroupNames;



                    if (VerifyClaimMemberInSystem_Egp(ref clmPotentialMember))
                    {
                        if (VerifyClaimNotAlreadyInSystem_Egp(ref clmPotentialMember))
                        {
                            if (InsertClaimInSystem_Egp(ref clmPotentialMember))
                            {
                                if (!DownloadedEgp)
                                {
                                    DownloadedEgp = true;
                                }
                            }
                        }
                        else
                        {
                            //set in VerifyClaimNotAlreadyInSystem_Egp()
                            if (clmPotentialMember.ClaimInSystem)
                            {

                                if (!UpdateClaimInSystem_Egp(ref clmPotentialMember))
                                {
                                    ClaimFile.ClaimInSystem.Add(clmPotentialMember);

                                    if (!ClaimFile.ClaimDownload_CreateClaimInSystemFile)
                                    {
                                        ClaimFile.ClaimDownload_CreateClaimInSystemFile = true;
                                    }

                                    if (!DownloadedEgp)
                                    {
                                        DownloadedEgp = true;
                                    }
                                }
                            }
                        }
                    }
                    else
                    {
                        //set in VerifyClaimMemberInSystem_Egp()
                        if (clmPotentialMember.EmployerNotInSystem)
                        {
                            ClaimFile.ClaimEmployerNotInSystem.Add(clmPotentialMember);

                            if (!ClaimFile.ClaimDownload_CreateEmployerNotInSystemFile)
                            {
                                ClaimFile.ClaimDownload_CreateEmployerNotInSystemFile = true;
                            }
                        }


                        //set in VerifyClaimMemberInSystem_Egp()
                        if (clmPotentialMember.MemberNotInSystem)
                        {
                            ClaimFile.ClaimInSystem.Add(clmPotentialMember);

                            if (!ClaimFile.ClaimDownload_CreateMemberNotInSystemFile)
                            {
                                ClaimFile.ClaimDownload_CreateMemberNotInSystemFile = true;
                            }

                            if (!DownloadedEgp)
                            {
                                DownloadedEgp = true;
                            }
                        }
                    }

                    intDownloadCnt++;

                }

                return DownloadedEgp;

            }
            catch (Exception ex)
            {
                return DownloadedEgp;
            }

        }

        private bool VerifyClaimMemberInSystem_Egp(ref ClaimViewModel VerifyMember)
        {
            bool Verified = false;

            try
            {
                if (VerifyMember.EmployerId > 0)
                {
                    List<IcmsMember> lstMembersInSystem = new List<IcmsMember>();
                    lstMembersInSystem = GetClaimMembers_Egp(ref VerifyMember);


                    if (lstMembersInSystem != null)
                    {
                        if (lstMembersInSystem.Count > 0)
                        {
                            Verified = true;
                        }
                        else
                        {
                            VerifyMember.MemberNotInSystem = true;
                        }
                    }
                    else
                    {
                        VerifyMember.MemberNotInSystem = true;
                    }
                }
                else
                {
                    VerifyMember.EmployerNotInSystem = true;
                }


                return Verified;
            }
            catch(Exception ex)
            {
                return Verified;
            }
        }

        private bool VerifyClaimNotAlreadyInSystem_Egp(ref ClaimViewModel VerifyClaim)
        {
            bool NotAlreadyInSystem = true;

            List<TpaMedicalClaims> MedicalClaimInSystem = new List<TpaMedicalClaims>();

            try
            {
                using (var db = new IcmsDataStagingDbContext())
                {
                    string strFirstName = VerifyClaim.MemFirstName;
                    string strLastName = VerifyClaim.MemLastName;
                    string strBirth = VerifyClaim.Birth;
                    string strDiag1 = VerifyClaim.Diag1;
                    string strDiag2 = VerifyClaim.Diag2;
                    string strDiag3 = VerifyClaim.Diag3;
                    string strDiag4 = VerifyClaim.Diag4;
                    string strDiag5 = VerifyClaim.Diag5;
                    string strCpt = VerifyClaim.CptCode;

                    if (!string.IsNullOrEmpty(VerifyClaim.MemFirstName) && !string.IsNullOrEmpty(VerifyClaim.MemLastName) &&
                        !string.IsNullOrEmpty(VerifyClaim.Birth) && !string.IsNullOrEmpty(VerifyClaim.Diag1))
                    {
                        if (!string.IsNullOrEmpty(VerifyClaim.Diag2) && !string.IsNullOrEmpty(VerifyClaim.Diag3) &&
                            !string.IsNullOrEmpty(VerifyClaim.Diag4) && !string.IsNullOrEmpty(VerifyClaim.Diag5) &&
                            !string.IsNullOrEmpty(VerifyClaim.CptCode))
                        {
                            MedicalClaimInSystem = (from medclms in db.DataStagingTpaMedicalClaims
                                                    where medclms.claimant_first_name == strFirstName
                                                    && medclms.claimant_last_name == strLastName
                                                    && medclms.DIAG_1 == strDiag1
                                                    && medclms.DIAG_2 == strDiag2
                                                    && medclms.DIAG_3 == strDiag3
                                                    && medclms.DIAG_4 == strDiag4
                                                    && medclms.DIAG_5 == strDiag5
                                                    && medclms.CPT_CODE == strCpt
                                                    select medclms).ToList();

                            if (MedicalClaimInSystem != null)
                            {
                                if (MedicalClaimInSystem.Count > 0)
                                {
                                    if (MedicalClaimInSystem.Count.Equals(1))
                                    {
                                        VerifyClaim.ClaimToUpdate = MedicalClaimInSystem.ElementAt(0);
                                    }

                                    VerifyClaim.ClaimInSystem = true;
                                    NotAlreadyInSystem = false;
                                }
                            }
                        }
                        else if (!string.IsNullOrEmpty(VerifyClaim.Diag2) && !string.IsNullOrEmpty(VerifyClaim.Diag3) &&
                                 !string.IsNullOrEmpty(VerifyClaim.Diag4) && !string.IsNullOrEmpty(VerifyClaim.Diag5))
                        {
                            

                            MedicalClaimInSystem = (from medclms in db.DataStagingTpaMedicalClaims
                                                    where medclms.claimant_first_name == strFirstName
                                                    && medclms.claimant_last_name == strLastName
                                                    && medclms.DIAG_1 == strDiag1
                                                    && medclms.DIAG_2 == strDiag2
                                                    && medclms.DIAG_3 == strDiag3
                                                    && medclms.DIAG_4 == strDiag4
                                                    && medclms.DIAG_5 == strDiag5
                                                    select medclms).ToList();

                            if (MedicalClaimInSystem != null)
                            {
                                if (MedicalClaimInSystem.Count > 0)
                                {
                                    if (MedicalClaimInSystem.Count.Equals(1))
                                    {
                                        VerifyClaim.ClaimToUpdate = MedicalClaimInSystem.ElementAt(0);
                                    }

                                    VerifyClaim.ClaimInSystem = true;
                                    NotAlreadyInSystem = false;
                                }
                            }
                        }
                        else if (!string.IsNullOrEmpty(VerifyClaim.Diag2) && !string.IsNullOrEmpty(VerifyClaim.Diag3) &&
                                 !string.IsNullOrEmpty(VerifyClaim.Diag4))
                        {
                            

                            MedicalClaimInSystem = (from medclms in db.DataStagingTpaMedicalClaims
                                                    where medclms.claimant_first_name == strFirstName
                                                    && medclms.claimant_last_name == strLastName
                                                    && medclms.DIAG_1 == strDiag1
                                                    && medclms.DIAG_2 == strDiag2
                                                    && medclms.DIAG_3 == strDiag3
                                                    && medclms.DIAG_4 == strDiag4
                                                    select medclms).ToList();

                            if (MedicalClaimInSystem != null)
                            {
                                if (MedicalClaimInSystem.Count > 0)
                                {
                                    if (MedicalClaimInSystem.Count.Equals(1))
                                    {
                                        VerifyClaim.ClaimToUpdate = MedicalClaimInSystem.ElementAt(0);
                                    }

                                    VerifyClaim.ClaimInSystem = true;
                                    NotAlreadyInSystem = false;
                                }
                            }
                        }
                        else if (!string.IsNullOrEmpty(VerifyClaim.Diag2) && !string.IsNullOrEmpty(VerifyClaim.Diag3))
                        {
                            

                            MedicalClaimInSystem = (from medclms in db.DataStagingTpaMedicalClaims
                                                    where medclms.claimant_first_name == strFirstName
                                                    && medclms.claimant_last_name == strLastName
                                                    && medclms.DIAG_1 == strDiag1
                                                    && medclms.DIAG_2 == strDiag2
                                                    && medclms.DIAG_3 == strDiag3
                                                    select medclms).ToList();

                            if (MedicalClaimInSystem != null)
                            {
                                if (MedicalClaimInSystem.Count > 0)
                                {
                                    if (MedicalClaimInSystem.Count.Equals(1))
                                    {
                                        VerifyClaim.ClaimToUpdate = MedicalClaimInSystem.ElementAt(0);
                                    }

                                    VerifyClaim.ClaimInSystem = true;
                                    NotAlreadyInSystem = false;
                                }
                            }
                        }
                        else if (!string.IsNullOrEmpty(VerifyClaim.Diag2))
                        {
                            

                            MedicalClaimInSystem = (from medclms in db.DataStagingTpaMedicalClaims
                                                    where medclms.claimant_first_name == strFirstName
                                                    && medclms.claimant_last_name == strLastName
                                                    && medclms.DIAG_1 == strDiag1
                                                    && medclms.DIAG_2 == strDiag2
                                                    select medclms).ToList();

                            if (MedicalClaimInSystem != null)
                            {
                                if (MedicalClaimInSystem.Count > 0)
                                {
                                    if (MedicalClaimInSystem.Count.Equals(1))
                                    {
                                        VerifyClaim.ClaimToUpdate = MedicalClaimInSystem.ElementAt(0);
                                    }

                                    VerifyClaim.ClaimInSystem = true;
                                    NotAlreadyInSystem = false;
                                }
                            }
                        }
                        else if (!string.IsNullOrEmpty(VerifyClaim.Diag1))
                        {
                            

                            MedicalClaimInSystem = (from medclms in db.DataStagingTpaMedicalClaims
                                                    where medclms.claimant_first_name == strFirstName
                                                    && medclms.claimant_last_name == strLastName
                                                    && medclms.DIAG_1 == strDiag1
                                                    select medclms).ToList();

                            if (MedicalClaimInSystem != null)
                            {
                                if (MedicalClaimInSystem.Count > 0)
                                {
                                    if (MedicalClaimInSystem.Count.Equals(1))
                                    {
                                        VerifyClaim.ClaimToUpdate = MedicalClaimInSystem.ElementAt(0);
                                    }

                                    VerifyClaim.ClaimInSystem = true;
                                    NotAlreadyInSystem = false;
                                }
                            }
                        }
                    }
                }


                return NotAlreadyInSystem;

            }
            catch(Exception ex)
            {
                return NotAlreadyInSystem;
            }
        }

        private bool InsertClaimInSystem_Egp(ref ClaimViewModel Claim)
        {
            bool Inserted = false;

            try
            {

                DateTime dteCreationDate = DateTime.Now;

                TpaMedicalClaims InsertClaim = new TpaMedicalClaims();

                InsertClaim.TPA_ID = 439;

                if (!string.IsNullOrEmpty(Claim.GroupNum))
                {
                    InsertClaim.GROUPNUM = Claim.GroupNum;
                }

                if (!string.IsNullOrEmpty(Claim.GroupName))
                {
                    InsertClaim.group_name = Claim.GroupName;
                }

                if (!string.IsNullOrEmpty(Claim.FirstName) && !string.IsNullOrEmpty(Claim.LastName))
                {
                    InsertClaim.MEM_NAME = Claim.FirstName + " " + Claim.LastName;
                }

                if (!string.IsNullOrEmpty(Claim.MemberId))
                {
                    InsertClaim.MEMBERID = Claim.MemberId;
                }

                if (!string.IsNullOrEmpty(Claim.FirstName))
                {
                    InsertClaim.first_name = Claim.FirstName;
                }

                if (!string.IsNullOrEmpty(Claim.LastName))
                {
                    InsertClaim.last_name = Claim.LastName;
                }

                if (!string.IsNullOrEmpty(Claim.EmployeeSsn))
                {
                    InsertClaim.employee_ssn = Claim.EmployeeSsn;
                }

                if (!string.IsNullOrEmpty(Claim.Birth))
                {
                    InsertClaim.BIRTH = Convert.ToDateTime(Claim.Birth);
                }

                if (!string.IsNullOrEmpty(Claim.MemFirstName))
                {
                    InsertClaim.claimant_first_name = Claim.MemFirstName;
                }

                if (!string.IsNullOrEmpty(Claim.MemLastName))
                {
                    InsertClaim.claimant_last_name = Claim.MemLastName;
                }

                if (!string.IsNullOrEmpty(Claim.ClaimantSsn))
                {
                    InsertClaim.claimant_ssn = Claim.ClaimantSsn;
                }

                if (!string.IsNullOrEmpty(Claim.SubAdd1))
                {
                    InsertClaim.SUB_ADD1 = Claim.SubAdd1;
                }

                if (!string.IsNullOrEmpty(Claim.SubAdd2))
                {
                    InsertClaim.SUB_ADD2 = Claim.SubAdd2;
                }

                if (!string.IsNullOrEmpty(Claim.SubCity))
                {
                    InsertClaim.SUB_CITY = Claim.SubCity;
                }

                if (!string.IsNullOrEmpty(Claim.SubZip))
                {
                    InsertClaim.SUB_ZIP = Claim.SubZip;
                }

                if (!string.IsNullOrEmpty(Claim.SubPhone))
                {
                    InsertClaim.SUB_PHONE = Claim.SubPhone;
                }

                if (!string.IsNullOrEmpty(Claim.Diag1))
                {
                    InsertClaim.DIAG_1 = Claim.Diag1;
                }

                if (!string.IsNullOrEmpty(Claim.Diag2))
                {
                    InsertClaim.DIAG_2 = Claim.Diag2;
                }

                if (!string.IsNullOrEmpty(Claim.Diag3))
                {
                    InsertClaim.DIAG_3 = Claim.Diag3;
                }

                if (!string.IsNullOrEmpty(Claim.Diag4))
                {
                    InsertClaim.DIAG_4 = Claim.Diag4;
                }

                if (!string.IsNullOrEmpty(Claim.Diag5))
                {
                    InsertClaim.DIAG_5 = Claim.Diag5;
                }

                if (!string.IsNullOrEmpty(Claim.CptCode))
                {
                    InsertClaim.CPT_CODE = Claim.CptCode;
                }

                if (!string.IsNullOrEmpty(Claim.ServiceToDate))
                {
                    InsertClaim.service_date = Convert.ToDateTime(FormatClaimDate_Egp(Claim.ServiceToDate));
                }

                if (!string.IsNullOrEmpty(Claim.CheckDate))
                {
                    InsertClaim.check_date = Convert.ToDateTime(FormatClaimDate_Egp(Claim.CheckDate));
                }

                if (!string.IsNullOrEmpty(Claim.PosName))
                {
                    InsertClaim.pos_name = Claim.PosName;
                }
                if (!string.IsNullOrEmpty(Claim.PosAddress1))
                {
                    InsertClaim.pos_address1 = Claim.PosAddress1;
                }

                if (!string.IsNullOrEmpty(Claim.PosAddress2))
                {
                    InsertClaim.pos_address2 = Claim.PosAddress2;
                }

                if (!string.IsNullOrEmpty(Claim.PosCity))
                {
                    InsertClaim.pos_city = Claim.PosCity;
                }

                if (!string.IsNullOrEmpty(Claim.PosState))
                {
                    InsertClaim.pos_state = Claim.PosState;
                }

                if (!string.IsNullOrEmpty(Claim.PosZip))
                {
                    InsertClaim.pos_zip = Claim.PosZip;
                }

                if (!string.IsNullOrEmpty(Claim.PosPhone))
                {
                    InsertClaim.pos_phone = Claim.PosPhone.Substring(0, 11);
                }

                if (!string.IsNullOrEmpty(Claim.HospitalInDate))
                {
                    InsertClaim.hospital_in_date = Convert.ToDateTime(FormatClaimDate_Egp(Claim.HospitalInDate));
                }

                if (!string.IsNullOrEmpty(Claim.HospitalOutDate))
                {
                    InsertClaim.hospital_out_date = Convert.ToDateTime(FormatClaimDate_Egp(Claim.HospitalOutDate));
                }

                if (!string.IsNullOrEmpty(Claim.ClaimNumber))
                {
                    InsertClaim.CLAIM_NUMBER = Claim.ClaimNumber;
                }

                if (!string.IsNullOrEmpty(Claim.ClaimLineNumber))
                {
                    InsertClaim.claim_line_number = Claim.ClaimLineNumber;
                }

                if (!string.IsNullOrEmpty(Claim.ClaimPaidAmount))
                {
                    InsertClaim.claim_paid_amount = Convert.ToDecimal(Claim.ClaimPaidAmount);
                }

                if (!string.IsNullOrEmpty(Claim.ClaimBillAmount))
                {
                    InsertClaim.claim_bill_amount = Convert.ToDecimal(Claim.ClaimBillAmount);
                }
                

                InsertClaim.FILE_DATE = dteCreationDate;
                InsertClaim.creation_date = dteCreationDate;



                using (var db = new IcmsDataStagingDbContext())
                {
                    db.DataStagingTpaMedicalClaims.Add(InsertClaim);

                    int InsertResults = db.SaveChanges();


                    if (InsertResults > 0)
                    {
                        Inserted = true;
                    }
                }

                return Inserted;

            }
            catch(Exception ex)
            {
                return Inserted;
            }
        }

        private bool UpdateClaimInSystem_Egp(ref ClaimViewModel Claim)
        {
            bool Updated = false;

            try
            {

                if (Claim.ClaimToUpdate != null)
                {

                    if (Claim.ClaimToUpdate.tpa_medical_claims_id > 0)
                    {

                        int intTpaMedicalClaimId = Claim.ClaimToUpdate.tpa_medical_claims_id;

                        using (var db = new IcmsDataStagingDbContext())
                        {

                            TpaMedicalClaims ClaimToUpdate = (from tpaclm in db.DataStagingTpaMedicalClaims
                                                              where tpaclm.tpa_medical_claims_id == intTpaMedicalClaimId
                                                              select tpaclm).SingleOrDefault();

                            if (ClaimToUpdate != null)
                            {

                                if (!string.IsNullOrEmpty(Claim.SubAdd1))
                                {
                                    ClaimToUpdate.SUB_ADD1 = Claim.SubAdd1;
                                }

                                if (!string.IsNullOrEmpty(Claim.SubAdd2))
                                {
                                    ClaimToUpdate.SUB_ADD2 = Claim.SubAdd2;
                                }

                                if (!string.IsNullOrEmpty(Claim.SubCity))
                                {
                                    ClaimToUpdate.SUB_CITY = Claim.SubCity;
                                }

                                if (!string.IsNullOrEmpty(Claim.SubZip))
                                {
                                    ClaimToUpdate.SUB_ZIP = Claim.SubZip;
                                }

                                if (!string.IsNullOrEmpty(Claim.SubPhone))
                                {
                                    ClaimToUpdate.SUB_PHONE = Claim.SubPhone;
                                }

                                if (!string.IsNullOrEmpty(Claim.Diag1))
                                {
                                    ClaimToUpdate.DIAG_1 = Claim.Diag1;
                                }

                                if (!string.IsNullOrEmpty(Claim.Diag2))
                                {
                                    ClaimToUpdate.DIAG_2 = Claim.Diag2;
                                }

                                if (!string.IsNullOrEmpty(Claim.Diag3))
                                {
                                    ClaimToUpdate.DIAG_3 = Claim.Diag3;
                                }

                                if (!string.IsNullOrEmpty(Claim.Diag4))
                                {
                                    ClaimToUpdate.DIAG_4 = Claim.Diag4;
                                }

                                if (!string.IsNullOrEmpty(Claim.Diag5))
                                {
                                    ClaimToUpdate.DIAG_5 = Claim.Diag5;
                                }

                                if (!string.IsNullOrEmpty(Claim.CptCode))
                                {
                                    ClaimToUpdate.CPT_CODE = Claim.CptCode;
                                }

                                if (!string.IsNullOrEmpty(Claim.ServiceToDate))
                                {
                                    ClaimToUpdate.service_date = Convert.ToDateTime(FormatClaimDate_Egp(Claim.ServiceToDate));
                                }

                                if (!string.IsNullOrEmpty(Claim.CheckDate))
                                {
                                    ClaimToUpdate.check_date = Convert.ToDateTime(FormatClaimDate_Egp(Claim.CheckDate));
                                }

                                if (!string.IsNullOrEmpty(Claim.PosName))
                                {
                                    ClaimToUpdate.pos_name = Claim.PosName;
                                }

                                if (!string.IsNullOrEmpty(Claim.PosAddress1))
                                {
                                    ClaimToUpdate.pos_address1 = Claim.PosAddress1;
                                }

                                if (!string.IsNullOrEmpty(Claim.PosAddress2))
                                {
                                    ClaimToUpdate.pos_address2 = Claim.PosAddress2;
                                }

                                if (!string.IsNullOrEmpty(Claim.PosCity))
                                {
                                    ClaimToUpdate.pos_city = Claim.PosCity;
                                }

                                if (!string.IsNullOrEmpty(Claim.PosState))
                                {
                                    ClaimToUpdate.pos_state = Claim.PosState;
                                }

                                if (!string.IsNullOrEmpty(Claim.PosZip))
                                {
                                    ClaimToUpdate.pos_zip = Claim.PosZip;
                                }

                                if (!string.IsNullOrEmpty(Claim.PosPhone))
                                {
                                    ClaimToUpdate.pos_phone = Claim.PosPhone.Substring(0, 11);
                                }

                                if (!string.IsNullOrEmpty(Claim.HospitalInDate))
                                {
                                    ClaimToUpdate.hospital_in_date = Convert.ToDateTime(FormatClaimDate_Egp(Claim.HospitalInDate));
                                }

                                if (!string.IsNullOrEmpty(Claim.HospitalOutDate))
                                {
                                    ClaimToUpdate.hospital_out_date = Convert.ToDateTime(FormatClaimDate_Egp(Claim.HospitalOutDate));
                                }

                                if (!string.IsNullOrEmpty(Claim.ClaimPaidAmount))
                                {
                                    ClaimToUpdate.claim_paid_amount = Convert.ToDecimal(Claim.ClaimPaidAmount);
                                }

                                if (!string.IsNullOrEmpty(Claim.ClaimBillAmount))
                                {
                                    ClaimToUpdate.claim_bill_amount = Convert.ToDecimal(Claim.ClaimBillAmount);
                                }
                                

                                ClaimToUpdate.last_update_date = DateTime.Now;


                                db.Entry(ClaimToUpdate).State = EntityState.Modified;
                                int updatesreturned = db.SaveChanges();

                                if (updatesreturned.CompareTo(0) > 0)
                                {
                                    Updated = true;
                                }
                            }
                        }
                    }
                }


                return Updated;

            }
            catch (Exception ex)
            {
                return Updated;
            }
        }



        private bool DownloadClaimFile_Dbms(ref DownloadsViewModel ClaimFile)
        {
            bool DownloadedDbms = false;

            try
            {
                int DownloadCount = 1;


                foreach (ClaimViewModel clmItem in ClaimFile.ClaimDownloadItems)
                {
                    ClaimViewModel PotentialClaimBeingDownloaded = clmItem;
                    PotentialClaimBeingDownloaded.SystemUserId = ClaimFile.DownloadingUserId;
                    PotentialClaimBeingDownloaded.GroupNames = ClaimFile.GroupNames;
                    PotentialClaimBeingDownloaded.TpaId = (int)ClaimFile.DownloadItem.tpa_id;


                    if (PotentialClaimBeingDownloaded.TpaId > 0)
                    {
                        if (VerifyClaimMemberInSystem_Dbms(ref PotentialClaimBeingDownloaded))
                        {
                            if (VerifyClaimNotAlreadyInSystem_Dbms(ref PotentialClaimBeingDownloaded))
                            {
                                if (InsertClaimInSystem_Dbms(ref PotentialClaimBeingDownloaded))
                                {
                                    if (!DownloadedDbms)
                                    {
                                        DownloadedDbms = true;
                                    }
                                }
                            }
                            else
                            {
                                //set in VerifyClaimNotAlreadyInSystem_Egp()
                                if (PotentialClaimBeingDownloaded.ClaimInSystem)
                                {
                                    if (!UpdateClaimInSystem_Dbms(ref PotentialClaimBeingDownloaded))
                                    {
                                        ClaimFile.ClaimInSystem.Add(PotentialClaimBeingDownloaded);


                                        if (!ClaimFile.ClaimDownload_CreateClaimInSystemFile)
                                        {
                                            ClaimFile.ClaimDownload_CreateClaimInSystemFile = true;
                                        }


                                        if (!DownloadedDbms)
                                        {
                                            DownloadedDbms = true;
                                        }
                                    }
                                }
                            }
                        }
                        else
                        {
                            //set in VerifyClaimMemberInSystem_Dbms()
                            if (PotentialClaimBeingDownloaded.EmployerNotInSystem)
                            {
                                ClaimFile.ClaimEmployerNotInSystem.Add(PotentialClaimBeingDownloaded);


                                if (!ClaimFile.ClaimDownload_CreateEmployerNotInSystemFile)
                                {
                                    ClaimFile.ClaimDownload_CreateEmployerNotInSystemFile = true;
                                }
                            }


                            //set in VerifyClaimMemberInSystem_Dbms()
                            if (PotentialClaimBeingDownloaded.MemberNotInSystem)
                            {
                                ClaimFile.ClaimInSystem.Add(PotentialClaimBeingDownloaded);


                                if (!ClaimFile.ClaimDownload_CreateMemberNotInSystemFile)
                                {
                                    ClaimFile.ClaimDownload_CreateMemberNotInSystemFile = true;
                                }


                                if (!DownloadedDbms)
                                {
                                    DownloadedDbms = true;
                                }
                            }
                        }


                        DownloadCount++;
                    }
                }


                return DownloadedDbms;
            }
            catch (Exception ex)
            {
                return DownloadedDbms;
            }
        }

        private bool VerifyClaimMemberInSystem_Dbms(ref ClaimViewModel VerifyMember)
        {
            bool Verified = false;

            try
            {
                if (VerifyMember.EmployerId > 0)
                {
                    List<IcmsMember> MembersInSystemMatchingCriteria = new List<IcmsMember>();
                    MembersInSystemMatchingCriteria = GetClaimMembers_Dbms(ref VerifyMember);


                    if (MembersInSystemMatchingCriteria != null)
                    {
                        if (MembersInSystemMatchingCriteria.Count > 0)
                        {
                            Verified = true;
                        }
                        else
                        {
                            VerifyMember.MemberNotInSystem = true;
                        }
                    }
                    else
                    {
                        VerifyMember.MemberNotInSystem = true;
                    }
                }
                else
                {
                    VerifyMember.EmployerNotInSystem = true;
                }


                return Verified;
            }
            catch (Exception ex)
            {
                return Verified;
            }
        }

        private bool VerifyClaimNotAlreadyInSystem_Dbms(ref ClaimViewModel VerifyClaim)
        {
            bool NotAlreadyInSystem = true;            

            try
            {
                List<TpaMedicalClaims> MedicalClaimInSystem = new List<TpaMedicalClaims>();


                using (var db = new IcmsDataStagingDbContext())
                {
                    string strFirstName = VerifyClaim.MemFirstName;
                    string strLastName = VerifyClaim.MemLastName;
                    DateTime OutBirth = DateTime.MinValue;


                    if (!string.IsNullOrEmpty(VerifyClaim.ClaimantBirth))
                    {
                        if (!DateTime.TryParse(VerifyClaim.ClaimantBirth, out OutBirth))
                        {
                            return NotAlreadyInSystem;
                        }
                    }
                    else if (!string.IsNullOrEmpty(VerifyClaim.Birth))
                    {
                        if (!DateTime.TryParse(VerifyClaim.Birth, out OutBirth))
                        {
                            return NotAlreadyInSystem;
                        }
                    }
                    

                    string strDiag1 = VerifyClaim.Diag1;
                    string strDiag2 = VerifyClaim.Diag2;
                    string strDiag3 = VerifyClaim.Diag3;
                    string strDiag4 = VerifyClaim.Diag4;
                    string strDiag5 = VerifyClaim.Diag5;
                    string strCpt = VerifyClaim.CptCode;


                    if (!string.IsNullOrEmpty(VerifyClaim.MemFirstName) && 
                        !string.IsNullOrEmpty(VerifyClaim.MemLastName) &&
                        (!string.IsNullOrEmpty(VerifyClaim.ClaimantBirth) || !string.IsNullOrEmpty(VerifyClaim.Birth)) && 
                        !string.IsNullOrEmpty(VerifyClaim.Diag1))
                    {
                        if (!string.IsNullOrEmpty(VerifyClaim.Diag2) && 
                            !string.IsNullOrEmpty(VerifyClaim.Diag3) &&
                            !string.IsNullOrEmpty(VerifyClaim.Diag4) && 
                            !string.IsNullOrEmpty(VerifyClaim.Diag5) &&
                            !string.IsNullOrEmpty(VerifyClaim.CptCode))
                        {
                            MedicalClaimInSystem = (from medclms in db.DataStagingTpaMedicalClaims
                                                    where medclms.claimant_first_name == strFirstName
                                                    && medclms.claimant_last_name == strLastName
                                                    && medclms.BIRTH == OutBirth
                                                    && medclms.DIAG_1 == strDiag1
                                                    && medclms.DIAG_2 == strDiag2
                                                    && medclms.DIAG_3 == strDiag3
                                                    && medclms.DIAG_4 == strDiag4
                                                    && medclms.DIAG_5 == strDiag5
                                                    && medclms.CPT_CODE == strCpt
                                                    select medclms).ToList();


                            if (MedicalClaimInSystem != null)
                            {
                                if (MedicalClaimInSystem.Count > 0)
                                {
                                    if (MedicalClaimInSystem.Count.Equals(1))
                                    {
                                        VerifyClaim.ClaimToUpdate = MedicalClaimInSystem.ElementAt(0);
                                    }


                                    VerifyClaim.ClaimInSystem = true;
                                    NotAlreadyInSystem = false;
                                }
                            }
                        }
                        else if (!string.IsNullOrEmpty(VerifyClaim.Diag2) && 
                                 !string.IsNullOrEmpty(VerifyClaim.Diag3) &&
                                 !string.IsNullOrEmpty(VerifyClaim.Diag4) && 
                                 !string.IsNullOrEmpty(VerifyClaim.Diag5))
                        {
                            MedicalClaimInSystem = (from medclms in db.DataStagingTpaMedicalClaims
                                                    where medclms.claimant_first_name == strFirstName
                                                    && medclms.claimant_last_name == strLastName
                                                    && medclms.BIRTH == OutBirth
                                                    && medclms.DIAG_1 == strDiag1
                                                    && medclms.DIAG_2 == strDiag2
                                                    && medclms.DIAG_3 == strDiag3
                                                    && medclms.DIAG_4 == strDiag4
                                                    && medclms.DIAG_5 == strDiag5
                                                    select medclms).ToList();


                            if (MedicalClaimInSystem != null)
                            {
                                if (MedicalClaimInSystem.Count > 0)
                                {
                                    if (MedicalClaimInSystem.Count.Equals(1))
                                    {
                                        VerifyClaim.ClaimToUpdate = MedicalClaimInSystem.ElementAt(0);
                                    }


                                    VerifyClaim.ClaimInSystem = true;
                                    NotAlreadyInSystem = false;
                                }
                            }
                        }
                        else if (!string.IsNullOrEmpty(VerifyClaim.Diag2) && 
                                 !string.IsNullOrEmpty(VerifyClaim.Diag3) &&
                                 !string.IsNullOrEmpty(VerifyClaim.Diag4))
                        {
                            MedicalClaimInSystem = (from medclms in db.DataStagingTpaMedicalClaims
                                                    where medclms.claimant_first_name == strFirstName
                                                    && medclms.claimant_last_name == strLastName
                                                    && medclms.BIRTH == OutBirth
                                                    && medclms.DIAG_1 == strDiag1
                                                    && medclms.DIAG_2 == strDiag2
                                                    && medclms.DIAG_3 == strDiag3
                                                    && medclms.DIAG_4 == strDiag4
                                                    select medclms).ToList();


                            if (MedicalClaimInSystem != null)
                            {
                                if (MedicalClaimInSystem.Count > 0)
                                {
                                    if (MedicalClaimInSystem.Count.Equals(1))
                                    {
                                        VerifyClaim.ClaimToUpdate = MedicalClaimInSystem.ElementAt(0);
                                    }


                                    VerifyClaim.ClaimInSystem = true;
                                    NotAlreadyInSystem = false;
                                }
                            }
                        }
                        else if (!string.IsNullOrEmpty(VerifyClaim.Diag2) && 
                                 !string.IsNullOrEmpty(VerifyClaim.Diag3))
                        {
                            MedicalClaimInSystem = (from medclms in db.DataStagingTpaMedicalClaims
                                                    where medclms.claimant_first_name == strFirstName
                                                    && medclms.claimant_last_name == strLastName
                                                    && medclms.BIRTH == OutBirth
                                                    && medclms.DIAG_1 == strDiag1
                                                    && medclms.DIAG_2 == strDiag2
                                                    && medclms.DIAG_3 == strDiag3
                                                    select medclms).ToList();


                            if (MedicalClaimInSystem != null)
                            {
                                if (MedicalClaimInSystem.Count > 0)
                                {
                                    if (MedicalClaimInSystem.Count.Equals(1))
                                    {
                                        VerifyClaim.ClaimToUpdate = MedicalClaimInSystem.ElementAt(0);
                                    }


                                    VerifyClaim.ClaimInSystem = true;
                                    NotAlreadyInSystem = false;
                                }
                            }
                        }
                        else if (!string.IsNullOrEmpty(VerifyClaim.Diag2))
                        {
                            MedicalClaimInSystem = (from medclms in db.DataStagingTpaMedicalClaims
                                                    where medclms.claimant_first_name == strFirstName
                                                    && medclms.claimant_last_name == strLastName
                                                    && medclms.BIRTH == OutBirth
                                                    && medclms.DIAG_1 == strDiag1
                                                    && medclms.DIAG_2 == strDiag2
                                                    select medclms).ToList();


                            if (MedicalClaimInSystem != null)
                            {
                                if (MedicalClaimInSystem.Count > 0)
                                {
                                    if (MedicalClaimInSystem.Count.Equals(1))
                                    {
                                        VerifyClaim.ClaimToUpdate = MedicalClaimInSystem.ElementAt(0);
                                    }


                                    VerifyClaim.ClaimInSystem = true;
                                    NotAlreadyInSystem = false;
                                }
                            }
                        }
                        else if (!string.IsNullOrEmpty(VerifyClaim.Diag1))
                        {
                            MedicalClaimInSystem = (from medclms in db.DataStagingTpaMedicalClaims
                                                    where medclms.claimant_first_name == strFirstName
                                                    && medclms.claimant_last_name == strLastName
                                                    && medclms.BIRTH == OutBirth
                                                    && medclms.DIAG_1 == strDiag1
                                                    select medclms).ToList();


                            if (MedicalClaimInSystem != null)
                            {
                                if (MedicalClaimInSystem.Count > 0)
                                {
                                    if (MedicalClaimInSystem.Count.Equals(1))
                                    {
                                        VerifyClaim.ClaimToUpdate = MedicalClaimInSystem.ElementAt(0);
                                    }


                                    VerifyClaim.ClaimInSystem = true;
                                    NotAlreadyInSystem = false;
                                }
                            }
                        }
                    }
                }


                return NotAlreadyInSystem;
            }
            catch (Exception ex)
            {
                return NotAlreadyInSystem;
            }
        }

        private bool InsertClaimInSystem_Dbms(ref ClaimViewModel Claim)
        {
            bool Inserted = false;

            try
            {

                DateTime dteCreationDate = DateTime.Now;
                TpaMedicalClaims InsertClaim = new TpaMedicalClaims();
                InsertClaim.TPA_ID = Claim.TpaId;


                if (!string.IsNullOrEmpty(Claim.GroupNum))
                {
                    InsertClaim.GROUPNUM = Claim.GroupNum;
                }


                if (!string.IsNullOrEmpty(Claim.GroupName))
                {
                    InsertClaim.group_name = Claim.GroupName;
                }


                if (!string.IsNullOrEmpty(Claim.FirstName) && 
                    !string.IsNullOrEmpty(Claim.LastName))
                {
                    InsertClaim.MEM_NAME = Claim.FirstName + " " + Claim.LastName;
                }


                if (!string.IsNullOrEmpty(Claim.MemberId))
                {
                    InsertClaim.MEMBERID = Claim.MemberId;
                }


                if (!string.IsNullOrEmpty(Claim.FirstName))
                {
                    InsertClaim.first_name = Claim.FirstName;
                }


                if (!string.IsNullOrEmpty(Claim.LastName))
                {
                    InsertClaim.last_name = Claim.LastName;
                }


                if (!string.IsNullOrEmpty(Claim.EmployeeSsn))
                {
                    InsertClaim.employee_ssn = Claim.EmployeeSsn;
                }


                if (!string.IsNullOrEmpty(Claim.Birth))
                {
                    DateTime OutBirth = DateTime.MinValue;


                    if (DateTime.TryParse(Claim.Birth, out OutBirth))
                    {
                        InsertClaim.BIRTH = OutBirth;
                    }
                }


                if (!string.IsNullOrEmpty(Claim.MemFirstName))
                {
                    InsertClaim.claimant_first_name = Claim.MemFirstName;
                }


                if (!string.IsNullOrEmpty(Claim.MemLastName))
                {
                    InsertClaim.claimant_last_name = Claim.MemLastName;
                }


                if (!string.IsNullOrEmpty(Claim.ClaimantSsn))
                {
                    InsertClaim.claimant_ssn = Claim.ClaimantSsn;
                }


                if (!string.IsNullOrEmpty(Claim.ClaimantBirth))
                {
                    DateTime OutClaimantBirth = DateTime.MinValue;


                    if (DateTime.TryParse(Claim.Birth, out OutClaimantBirth))
                    {
                        InsertClaim.BIRTH = OutClaimantBirth;
                    }
                }


                if (!string.IsNullOrEmpty(Claim.SubAdd1))
                {
                    InsertClaim.SUB_ADD1 = Claim.SubAdd1;
                }


                if (!string.IsNullOrEmpty(Claim.SubAdd2))
                {
                    InsertClaim.SUB_ADD2 = Claim.SubAdd2;
                }


                if (!string.IsNullOrEmpty(Claim.SubCity))
                {
                    InsertClaim.SUB_CITY = Claim.SubCity;
                }


                if (!string.IsNullOrEmpty(Claim.SubZip))
                {
                    InsertClaim.SUB_ZIP = Claim.SubZip;
                }


                if (!string.IsNullOrEmpty(Claim.SubPhone))
                {
                    InsertClaim.SUB_PHONE = Claim.SubPhone;
                }


                if (!string.IsNullOrEmpty(Claim.Diag1))
                {
                    InsertClaim.DIAG_1 = Claim.Diag1;
                }


                if (!string.IsNullOrEmpty(Claim.Diag2))
                {
                    InsertClaim.DIAG_2 = Claim.Diag2;
                }


                if (!string.IsNullOrEmpty(Claim.Diag3))
                {
                    InsertClaim.DIAG_3 = Claim.Diag3;
                }


                if (!string.IsNullOrEmpty(Claim.Diag4))
                {
                    InsertClaim.DIAG_4 = Claim.Diag4;
                }


                if (!string.IsNullOrEmpty(Claim.Diag5))
                {
                    InsertClaim.DIAG_5 = Claim.Diag5;
                }


                if (!string.IsNullOrEmpty(Claim.CptCode))
                {
                    InsertClaim.CPT_CODE = Claim.CptCode;
                }


                if (!string.IsNullOrEmpty(Claim.ServiceFromDate))
                {
                    DateTime OutServiceFromDate = DateTime.MinValue;


                    if (DateTime.TryParse(Claim.ServiceFromDate, out OutServiceFromDate))
                    {
                        InsertClaim.service_start_date = OutServiceFromDate.ToShortDateString();
                    }
                }


                if (!string.IsNullOrEmpty(Claim.ServiceToDate))
                {
                    DateTime OutServiceToDate = DateTime.MinValue;


                    if (DateTime.TryParse(Claim.ServiceToDate, out OutServiceToDate))
                    {
                        InsertClaim.service_end_date = OutServiceToDate.ToShortDateString();
                    }
                }


                if (!string.IsNullOrEmpty(Claim.CheckDate))
                {
                    DateTime OutCheckDate= DateTime.MinValue;


                    if (DateTime.TryParse(Claim.CheckDate, out OutCheckDate))
                    {
                        InsertClaim.check_date = OutCheckDate;
                    }
                }


                if (!string.IsNullOrEmpty(Claim.ProvNpi))
                {
                    InsertClaim.provider_npi = Claim.ProvNpi;
                }


                if (!string.IsNullOrEmpty(Claim.PosName))
                {
                    InsertClaim.pos_name = Claim.PosName;
                }


                if (!string.IsNullOrEmpty(Claim.ProvName))
                {
                    InsertClaim.PROVIDER_NAME = Claim.ProvName;
                }


                if (!string.IsNullOrEmpty(Claim.PosAddress1))
                {
                    InsertClaim.pos_address1 = Claim.PosAddress1;
                }


                if (!string.IsNullOrEmpty(Claim.PosAddress2))
                {
                    InsertClaim.pos_address2 = Claim.PosAddress2;
                }


                if (!string.IsNullOrEmpty(Claim.PosCity))
                {
                    InsertClaim.pos_city = Claim.PosCity;
                }


                if (!string.IsNullOrEmpty(Claim.PosState))
                {
                    InsertClaim.pos_state = Claim.PosState;
                }


                if (!string.IsNullOrEmpty(Claim.PosZip))
                {
                    InsertClaim.pos_zip = Claim.PosZip;
                }


                if (!string.IsNullOrEmpty(Claim.PosPhone))
                {
                    InsertClaim.pos_phone = Claim.PosPhone.Substring(0, 11);
                }


                if (!string.IsNullOrEmpty(Claim.HospitalInDate))
                {
                    DateTime OutHospitalInDate = DateTime.MinValue;


                    if (DateTime.TryParse(Claim.HospitalInDate, out OutHospitalInDate))
                    {
                        InsertClaim.hospital_in_date = OutHospitalInDate;
                    }
                }


                if (!string.IsNullOrEmpty(Claim.HospitalOutDate))
                {
                    DateTime OutHospitalOutDate = DateTime.MinValue;


                    if (DateTime.TryParse(Claim.HospitalOutDate, out OutHospitalOutDate))
                    {
                        InsertClaim.hospital_out_date = OutHospitalOutDate;
                    }
                }


                if (!string.IsNullOrEmpty(Claim.ClaimNumber))
                {
                    InsertClaim.CLAIM_NUMBER = Claim.ClaimNumber;
                }


                if (!string.IsNullOrEmpty(Claim.ClaimLineNumber))
                {
                    InsertClaim.claim_line_number = Claim.ClaimLineNumber;
                }


                if (!string.IsNullOrEmpty(Claim.ClaimPaidAmount))
                {
                    InsertClaim.claim_paid_amount = 0;
                    decimal OutClaimPaidAmount = 0;


                    if (decimal.TryParse(Claim.ClaimPaidAmount, out OutClaimPaidAmount))
                    {
                        InsertClaim.claim_paid_amount = OutClaimPaidAmount;
                    }
                }


                if (!string.IsNullOrEmpty(Claim.ClaimantPaidAmount))
                {
                    InsertClaim.claimant_paid_amount = 0;
                    decimal OutClaimantPaidAmount = 0;


                    if (decimal.TryParse(Claim.ClaimantPaidAmount, out OutClaimantPaidAmount))
                    {
                        InsertClaim.claimant_paid_amount = OutClaimantPaidAmount;
                    }
                }


                InsertClaim.FILE_DATE = dteCreationDate;
                InsertClaim.creation_date = dteCreationDate;


                using (var db = new IcmsDataStagingDbContext())
                {
                    db.DataStagingTpaMedicalClaims.Add(InsertClaim);

                    int InsertResults = db.SaveChanges();


                    if (InsertResults > 0)
                    {
                        Inserted = true;
                    }
                }


                return Inserted;
            }
            catch (Exception ex)
            {
                return Inserted;
            }
        }

        private bool UpdateClaimInSystem_Dbms(ref ClaimViewModel Claim)
        {
            bool Updated = false;

            try
            {
                if (Claim.ClaimToUpdate != null)
                {
                    if (Claim.ClaimToUpdate.tpa_medical_claims_id > 0)
                    {
                        int intTpaMedicalClaimId = Claim.ClaimToUpdate.tpa_medical_claims_id;


                        using (var db = new IcmsDataStagingDbContext())
                        {
                            TpaMedicalClaims ClaimToUpdate = (from tpaclm in db.DataStagingTpaMedicalClaims
                                                              where tpaclm.tpa_medical_claims_id == intTpaMedicalClaimId
                                                              select tpaclm).SingleOrDefault();


                            if (ClaimToUpdate != null)
                            {
                                if (!string.IsNullOrEmpty(Claim.SubAdd1))
                                {
                                    ClaimToUpdate.SUB_ADD1 = Claim.SubAdd1;
                                }


                                if (!string.IsNullOrEmpty(Claim.SubAdd2))
                                {
                                    ClaimToUpdate.SUB_ADD2 = Claim.SubAdd2;
                                }


                                if (!string.IsNullOrEmpty(Claim.SubCity))
                                {
                                    ClaimToUpdate.SUB_CITY = Claim.SubCity;
                                }


                                if (!string.IsNullOrEmpty(Claim.SubZip))
                                {
                                    ClaimToUpdate.SUB_ZIP = Claim.SubZip;
                                }


                                if (!string.IsNullOrEmpty(Claim.SubPhone))
                                {
                                    ClaimToUpdate.SUB_PHONE = Claim.SubPhone;
                                }


                                if (!string.IsNullOrEmpty(Claim.Diag1))
                                {
                                    ClaimToUpdate.DIAG_1 = Claim.Diag1;
                                }


                                if (!string.IsNullOrEmpty(Claim.Diag2))
                                {
                                    ClaimToUpdate.DIAG_2 = Claim.Diag2;
                                }


                                if (!string.IsNullOrEmpty(Claim.Diag3))
                                {
                                    ClaimToUpdate.DIAG_3 = Claim.Diag3;
                                }


                                if (!string.IsNullOrEmpty(Claim.Diag4))
                                {
                                    ClaimToUpdate.DIAG_4 = Claim.Diag4;
                                }


                                if (!string.IsNullOrEmpty(Claim.Diag5))
                                {
                                    ClaimToUpdate.DIAG_5 = Claim.Diag5;
                                }


                                if (!string.IsNullOrEmpty(Claim.CptCode))
                                {
                                    ClaimToUpdate.CPT_CODE = Claim.CptCode;
                                }


                                if (!string.IsNullOrEmpty(Claim.ServiceFromDate))
                                {
                                    ClaimToUpdate.service_start_date = Claim.ServiceFromDate;
                                }


                                if (!string.IsNullOrEmpty(Claim.ServiceToDate))
                                {
                                    ClaimToUpdate.service_end_date = Claim.ServiceToDate;
                                }


                                if (!string.IsNullOrEmpty(Claim.CheckDate))
                                {
                                    DateTime OutCheckDate = DateTime.MinValue;


                                    if (DateTime.TryParse(Claim.CheckDate, out OutCheckDate))
                                    {
                                        ClaimToUpdate.check_date = OutCheckDate;
                                    }
                                }


                                if (!string.IsNullOrEmpty(Claim.ProvNpi))
                                {
                                    ClaimToUpdate.provider_npi = Claim.ProvNpi;
                                }


                                if (!string.IsNullOrEmpty(Claim.PosName))
                                {
                                    ClaimToUpdate.pos_name = Claim.PosName;
                                }


                                if (!string.IsNullOrEmpty(Claim.ProvName))
                                {
                                    ClaimToUpdate.PROVIDER_NAME = Claim.ProvName;
                                }


                                if (!string.IsNullOrEmpty(Claim.PosAddress1))
                                {
                                    ClaimToUpdate.pos_address1 = Claim.PosAddress1;
                                }


                                if (!string.IsNullOrEmpty(Claim.PosAddress2))
                                {
                                    ClaimToUpdate.pos_address2 = Claim.PosAddress2;
                                }


                                if (!string.IsNullOrEmpty(Claim.PosCity))
                                {
                                    ClaimToUpdate.pos_city = Claim.PosCity;
                                }


                                if (!string.IsNullOrEmpty(Claim.PosState))
                                {
                                    ClaimToUpdate.pos_state = Claim.PosState;
                                }


                                if (!string.IsNullOrEmpty(Claim.PosZip))
                                {
                                    ClaimToUpdate.pos_zip = Claim.PosZip;
                                }


                                if (!string.IsNullOrEmpty(Claim.PosPhone))
                                {
                                    ClaimToUpdate.pos_phone = Claim.PosPhone.Substring(0, 11);
                                }


                                if (!string.IsNullOrEmpty(Claim.HospitalInDate))
                                {
                                    DateTime OutHospitalInDate = DateTime.MinValue;


                                    if (DateTime.TryParse(Claim.HospitalInDate, out OutHospitalInDate))
                                    {
                                        ClaimToUpdate.hospital_in_date = OutHospitalInDate;
                                    }
                                }


                                if (!string.IsNullOrEmpty(Claim.HospitalOutDate))
                                {
                                    DateTime OutHospitalOutDate = DateTime.MinValue;


                                    if (DateTime.TryParse(Claim.HospitalOutDate, out OutHospitalOutDate))
                                    {
                                        ClaimToUpdate.hospital_out_date = OutHospitalOutDate;
                                    }
                                }


                                if (!string.IsNullOrEmpty(Claim.ClaimPaidAmount))
                                {
                                    decimal OutClaimPaidAmount = 0;


                                    if (decimal.TryParse(Claim.ClaimPaidAmount, out OutClaimPaidAmount))
                                    {
                                        ClaimToUpdate.claim_paid_amount = OutClaimPaidAmount;
                                    }
                                }


                                if (!string.IsNullOrEmpty(Claim.ClaimantPaidAmount))
                                {
                                    decimal OutClaimantPaidAmount = 0;


                                    if (decimal.TryParse(Claim.ClaimantPaidAmount, out OutClaimantPaidAmount))
                                    {
                                        ClaimToUpdate.claim_bill_amount = OutClaimantPaidAmount;
                                    }
                                }


                                ClaimToUpdate.last_update_date = DateTime.Now;


                                db.Entry(ClaimToUpdate).State = EntityState.Modified;
                                int updatesreturned = db.SaveChanges();

                                if (updatesreturned.CompareTo(0) > 0)
                                {
                                    Updated = true;
                                }
                            }
                        }
                    }
                }


                return Updated;
            }
            catch (Exception ex)
            {
                return Updated;
            }
        }







        private void DeleteEligibilityLoggingFiles(ref DownloadsViewModel ClaimLoggingFile)
        {
            try
            {
                string ftphost = ClaimLoggingFile.FtpHost;
                string ftpfilepath = ClaimLoggingFile.FtpFilePath;
                string ftpfullfilepath = "ftp://" + ftphost + ftpfilepath;
                string ftpfullarchivepath = "ftp://" + ftphost + ftpfilepath + "Archive/";

                ClaimLoggingFile.FtpHost = ftphost;
                ClaimLoggingFile.FtpFullFilePath = ftpfullfilepath;
                ClaimLoggingFile.FtpFullArchivePath = ftpfullarchivepath;


                //Duplicate Member File
                GetSystemGeneratedExcelFileNamesAndPath(ref ClaimLoggingFile, "DBMS_Eligibility_DuplicateMember_");

                DeleteFtpExistingDuplicateMemberFileForUser(ClaimLoggingFile);
                DeleteLocalExistingDuplicateMemberFileForUser(ClaimLoggingFile);


                //No Employer File
                GetSystemGeneratedExcelFileNamesAndPath(ref ClaimLoggingFile, "DBMS_Eligibility_MemberHasNoEmployer_");

                DeleteFtpExistingMemberHasNoEmployerFileForUser(ClaimLoggingFile);
                DeleteLocalExistingMemberHasNoEmployerFileForUser(ClaimLoggingFile);


                //Empty City File
                GetSystemGeneratedExcelFileNamesAndPath(ref ClaimLoggingFile, "DBMS_Eligibility_MemberEmptyCity_");

                DeleteFtpExistingMemberEmptyCityFileForUser(ClaimLoggingFile);
                DeleteLocalExistingMemberEmptyCityFileForUser(ClaimLoggingFile);
            }
            catch(Exception ex)
            {

            }
        }

        private void DeleteClaimLoggingFiles(ref DownloadsViewModel ClaimLoggingFile)
        {
            try
            {
                string ftphost = ClaimLoggingFile.FtpHost;
                string ftpfilepath = ClaimLoggingFile.FtpFilePath;
                string ftpfullfilepath = "ftp://" + ftphost + ftpfilepath;
                string ftpfullarchivepath = "ftp://" + ftphost + ftpfilepath + "Archive/";

                ClaimLoggingFile.FtpHost = ftphost;
                ClaimLoggingFile.FtpFullFilePath = ftpfullfilepath;
                ClaimLoggingFile.FtpFullArchivePath = ftpfullarchivepath;

                GetSystemGeneratedExcelFileNamesAndPath(ref ClaimLoggingFile, "DBMS_Claim_MemberNotInSystem_");

                DeleteFtpExistingClaimMemberNotInSystemFileForUser(ClaimLoggingFile);
                DeleteLocalExistingClaimMemberNotInSystemFileForUser(ClaimLoggingFile);


                GetSystemGeneratedExcelFileNamesAndPath(ref ClaimLoggingFile, "DBMS_Claim_EmployerNotInSystem_");

                DeleteFtpExistingClaimEmployerNotInSystemFileForUser(ClaimLoggingFile);
                DeleteLocalExistingClaimEmployerNotInSystemFileForUser(ClaimLoggingFile);


                GetSystemGeneratedExcelFileNamesAndPath(ref ClaimLoggingFile, "DBMS_Claim_ClaimInSystem_");

                DeleteFtpExistingClaimClaimInSystemFileForUser(ClaimLoggingFile);
                DeleteFtpExistingClaimClaimInSystemFileForUser(ClaimLoggingFile);
            }
            catch(Exception ex)
            {

            }
        }




        public bool CreateDuplicateMemberFile(ref DownloadsViewModel dwnldsvmToCreateFile)
        {

            bool Created = false;


            try
            {

                if (dwnldsvmToCreateFile.DuplicateMembersToMerge.Count > 0)
                {

                    if (dwnldsvmToCreateFile.DownloadItem.rpt_download_id.CompareTo(0) == 0)
                    {
                        dwnldsvmToCreateFile.DownloadItem = GetReportDownloadAdminModel(dwnldsvmToCreateFile.RptDownloadId);
                    }


                    if (dwnldsvmToCreateFile.DuplicateMembersToMerge != null)
                    {

                        if (dwnldsvmToCreateFile.DuplicateMembersToMerge.Count > 0)
                        {

                            if (GenerateNewDuplicateMemberExcelFile(ref dwnldsvmToCreateFile))
                            {
                                Created = true;
                            }

                        }

                    }

                }


                return Created;

            }
            catch(Exception ex)
            {
                return Created;
            }

        }

        public bool CreateMemberHasNoEmployerFile(ref DownloadsViewModel dwnldsvmToCreateFile)
        {

            bool Created = false;


            try
            {

                if (dwnldsvmToCreateFile.MemberHasNoEmployer.Count > 0)
                {

                    if (dwnldsvmToCreateFile.DownloadItem.rpt_download_id.CompareTo(0) == 0)
                    {
                        dwnldsvmToCreateFile.DownloadItem = GetReportDownloadAdminModel(dwnldsvmToCreateFile.RptDownloadId);
                    }


                    if (dwnldsvmToCreateFile.MemberHasNoEmployer != null)
                    {

                        if (dwnldsvmToCreateFile.MemberHasNoEmployer.Count > 0)
                        {

                            if (GenerateNewMemberHasNoEmployerExcelFile(ref dwnldsvmToCreateFile))
                            {
                                Created = true;
                            }

                        }

                    }

                }


                return Created;

            }
            catch (Exception ex)
            {
                return Created;
            }

        }

        public bool CreateMemberEmptyCityFile(ref DownloadsViewModel dwnldsvmToCreateFile)
        {
            bool Created = false;

            try
            {

                if (dwnldsvmToCreateFile.MemberEmptyCity.Count > 0)
                {

                    if (dwnldsvmToCreateFile.DownloadItem.rpt_download_id.CompareTo(0) == 0)
                    {
                        dwnldsvmToCreateFile.DownloadItem = GetReportDownloadAdminModel(dwnldsvmToCreateFile.RptDownloadId);
                    }


                    if (dwnldsvmToCreateFile.MemberEmptyCity != null)
                    {

                        if (dwnldsvmToCreateFile.MemberEmptyCity.Count > 0)
                        {

                            if (GenerateNewMemberEmptyCityExcelFile(ref dwnldsvmToCreateFile))
                            {
                                Created = true;
                            }

                        }

                    }

                }


                return Created;

            }
            catch (Exception ex)
            {
                return Created;
            }

        }

        public bool CreateMemberEmptyEmployerFile(ref DownloadsViewModel dwnldsvmToCreateFile)
        {
            bool Created = false;

            try
            {

                if (dwnldsvmToCreateFile.MemberEmptyEmployer.Count > 0)
                {

                    if (dwnldsvmToCreateFile.DownloadItem.rpt_download_id.CompareTo(0) == 0)
                    {
                        dwnldsvmToCreateFile.DownloadItem = GetReportDownloadAdminModel(dwnldsvmToCreateFile.RptDownloadId);
                    }


                    if (dwnldsvmToCreateFile.MemberEmptyEmployer != null)
                    {

                        if (dwnldsvmToCreateFile.MemberEmptyEmployer.Count > 0)
                        {

                            if (GenerateNewMemberEmptyEmployerExcelFile(ref dwnldsvmToCreateFile))
                            {
                                Created = true;
                            }

                        }

                    }

                }


                return Created;

            }
            catch (Exception ex)
            {
                return Created;
            }

        }



        public bool CreateClaimEmployerNotInSystemFile(ref DownloadsViewModel LogFile)
        {
            bool Created = false;

            try
            {
                if (LogFile.ClaimEmployerNotInSystem != null)
                {
                    if (LogFile.ClaimEmployerNotInSystem.Count > 0)
                    {
                        if (LogFile.DownloadItem.rpt_download_id.CompareTo(0) == 0)
                        {
                            LogFile.DownloadItem = GetReportDownloadAdminModel(LogFile.RptDownloadId);
                        }

                        if (GenerateNewClaimEmployerNotInSystemExcelFile(ref LogFile))
                        {
                            Created = true;
                        }
                    }
                }

                return Created;
            }
            catch (Exception ex)
            {
                return Created;
            }
        }

        public bool CreateClaimMemberNotInSystemFile(ref DownloadsViewModel LogFile)
        {
            bool Created = false;

            try
            {
                if (LogFile.ClaimInSystem != null)
                {
                    if (LogFile.ClaimInSystem.Count > 0)
                    {
                        if (LogFile.DownloadItem.rpt_download_id.CompareTo(0) == 0)
                        {
                            LogFile.DownloadItem = GetReportDownloadAdminModel(LogFile.RptDownloadId);
                        }

                        if (GenerateNewClaimMemberNotInSystemExcelFile(ref LogFile))
                        {
                            Created = true;
                        }
                    }
                }

                return Created;

            }
            catch (Exception ex)
            {
                return Created;
            }

        }

        public bool CreateClaimInSystemFile(ref DownloadsViewModel LogFile)
        {
            bool Created = false;

            try
            {
                if (LogFile.ClaimInSystem != null)
                {
                    if (LogFile.ClaimInSystem.Count > 0)
                    {
                        if (LogFile.DownloadItem.rpt_download_id.CompareTo(0) == 0)
                        {
                            LogFile.DownloadItem = GetReportDownloadAdminModel(LogFile.RptDownloadId);
                        }

                        if (GenerateNewClaimClaimInSystemExcelFile(ref LogFile))
                        {
                            Created = true;
                        }
                    }
                }

                return Created;
            }
            catch(Exception ex)
            {
                return Created;
            }
        }





        private bool GenerateNewDuplicateMemberExcelFile(ref DownloadsViewModel dwnldsvmToCreateFile)
        {

            bool Generated = false;


            try
            {

                //string ftphost = dwnldsvmToCreateFile.FtpHost;                                  //"ftps.dbmshealth.com";
                //string ftpfilepath = dwnldsvmToCreateFile.FtpFilePath;                          // "/EGP/Eligibility/";
                //string ftpfullfilepath = "ftp://" + ftphost + ftpfilepath;
                //string ftpfullarchivepath = "ftp://" + ftphost + ftpfilepath + "Archive/";

                //dwnldsvmToCreateFile.FtpHost = ftphost;
                //dwnldsvmToCreateFile.FtpFullFilePath = ftpfullfilepath;
                //dwnldsvmToCreateFile.FtpFullArchivePath = ftpfullarchivepath;


                //GetSystemGeneratedExcelFileNamesAndPath(ref dwnldsvmToCreateFile, "DBMS_Eligibility_DuplicateMember_");


                //DeleteFtpExistingDuplicateMemberFileForUser(dwnldsvmToCreateFile);
                //DeleteLocalExistingDuplicateMemberFileForUser(dwnldsvmToCreateFile);


                if (CreateLocalNewDuplicateMemberExcelFile(ref dwnldsvmToCreateFile))
                {

                    if (AddDuplicateMembersToLocalNewDuplicatMemberExcelFile(dwnldsvmToCreateFile))
                    {

                        if (UploadLocalNewDuplicateMemberExcelFileToFtp(dwnldsvmToCreateFile))
                        {

                            if (VerifyDuplicateMemberFileExistsOnFtp(dwnldsvmToCreateFile))
                            {
                                Generated = true;
                            }

                        }

                    }

                }



                return Generated;

            }
            catch(Exception ex)
            {
                return Generated;
            }

        }

        private bool GenerateNewMemberHasNoEmployerExcelFile(ref DownloadsViewModel dwnldsvmToCreateFile)
        {

            bool Generated = false;


            try
            {
                //string ftphost = dwnldsvmToCreateFile.FtpHost;                                  //"ftps.dbmshealth.com";
                //string ftpfilepath = dwnldsvmToCreateFile.FtpFilePath;                          //"/EGP/Eligibility/";
                //string ftpfullfilepath = "ftp://" + ftphost + ftpfilepath;
                //string ftpfullarchivepath = "ftp://" + ftphost + ftpfilepath + "Archive/";

                //dwnldsvmToCreateFile.FtpHost = ftphost;
                //dwnldsvmToCreateFile.FtpFullFilePath = ftpfullfilepath;
                //dwnldsvmToCreateFile.FtpFullArchivePath = ftpfullarchivepath;


                //GetSystemGeneratedExcelFileNamesAndPath(ref dwnldsvmToCreateFile, "DBMS_Eligibility_MemberHasNoEmployer_");


                //DeleteFtpExistingMemberHasNoEmployerFileForUser(dwnldsvmToCreateFile);
                //DeleteLocalExistingMemberHasNoEmployerFileForUser(dwnldsvmToCreateFile);


                if (CreateLocalNewMemberHasNoEmployerExcelFile(ref dwnldsvmToCreateFile))
                {

                    if (AddMembersToLocalNewMemberHasNoEmployerExcelFile(dwnldsvmToCreateFile))
                    {

                        if (UploadLocalNewMemberHasNoEmployerExcelFileToFtp(dwnldsvmToCreateFile))
                        {

                            if (VerifyMemberHasNoEmployerFileExistsOnFtp(dwnldsvmToCreateFile))
                            {
                                Generated = true;
                            }

                        }

                    }

                }



                return Generated;

            }
            catch (Exception ex)
            {
                return Generated;
            }

        }

        private bool GenerateNewMemberEmptyCityExcelFile(ref DownloadsViewModel dwnldsvmToCreateFile)
        {

            bool Generated = false;

            try
            {
                if (CreateLocalNewMemberEmptyCityExcelFile(ref dwnldsvmToCreateFile))
                {
                    if (AddMembersToLocalNewMemberEmptyCityExcelFile(dwnldsvmToCreateFile))
                    {
                        if (UploadLocalNewMemberEmptyCityExcelFileToFtp(dwnldsvmToCreateFile))
                        {
                            if (VerifyMemberEmptyCityFileExistsOnFtp(dwnldsvmToCreateFile))
                            {
                                Generated = true;
                            }
                        }
                    }
                }

                return Generated;

            }
            catch (Exception ex)
            {
                return Generated;
            }

        }

        private bool GenerateNewMemberEmptyEmployerExcelFile(ref DownloadsViewModel dwnldsvmToCreateFile)
        {

            bool Generated = false;


            try
            {
                //if (CreateLocalNewMemberHasNoEmployerExcelFile(ref dwnldsvmToCreateFile))
                //{

                //    if (AddMembersToLocalNewMemberHasNoEmployerExcelFile(dwnldsvmToCreateFile))
                //    {

                //        if (UploadLocalNewMemberHasNoEmployerExcelFileToFtp(dwnldsvmToCreateFile))
                //        {

                //            if (VerifyMemberHasNoEmployerFileExistsOnFtp(dwnldsvmToCreateFile))
                //            {
                //                Generated = true;
                //            }

                //        }

                //    }

                //}



                return Generated;

            }
            catch (Exception ex)
            {
                return Generated;
            }

        }




        private bool GenerateNewClaimMemberNotInSystemExcelFile(ref DownloadsViewModel LogFile)
        {

            bool Generated = false;

            try
            {
                if (CreateLocalNewClaimMemberNotInSystemExcelFile(ref LogFile))
                {
                    if (AddMembersToLocalNewClaimMemberNotInSystemExcelFile(LogFile))
                    {
                        if (UploadLocalNewMemberNotInSystemFileToFtp(LogFile))
                        {
                            if (VerifyMemberNotInSystemFileExistsOnFtp(LogFile))
                            {
                                Generated = true;
                            }
                        }
                    }
                }

                return Generated;

            }
            catch (Exception ex)
            {
                return Generated;
            }

        }

        private bool GenerateNewClaimEmployerNotInSystemExcelFile(ref DownloadsViewModel LogFile)
        {
            bool Generated = false;

            try
            {
                if (CreateLocalNewClaimEmployerNotInSystemExcelFile(ref LogFile))
                {
                    if (AddMembersToLocalNewClaimEmployerNotInSystemExcelFile(LogFile))
                    {
                        if (UploadLocalNewClaimEmployerNotInSystemFileToFtp(LogFile))
                        {
                            if (VerifyClaimEmployerNotInSystemFileExistsOnFtp(LogFile))
                            {
                                Generated = true;
                            }
                        }
                    }
                }

                return Generated;

            }
            catch (Exception ex)
            {
                return Generated;
            }

        }

        private bool GenerateNewClaimClaimInSystemExcelFile(ref DownloadsViewModel LogFile)
        {
            bool Generated = false;

            try
            {
                if (CreateLocalNewClaimClaimInSystemExcelFile(ref LogFile))
                {
                    if (AddMembersToLocalNewClaimClaimInSystemExcelFile(LogFile))
                    {
                        if (UploadLocalNewClaimClaimInSystemFileToFtp(LogFile))
                        {
                            if (VerifyClaimClaimInSystemFileExistsOnFtp(LogFile))
                            {
                                Generated = true;
                            }
                        }
                    }
                }

                return Generated;

            }
            catch (Exception ex)
            {
                return Generated;
            }

        }






        private void DeleteFtpExistingDuplicateMemberFileForUser(DownloadsViewModel dwnldsvmToDeleteExistingFiles)
        {

            string line = "";

            try
            {
                
                FtpWebRequest request = (FtpWebRequest)WebRequest.Create(dwnldsvmToDeleteExistingFiles.FtpFullArchivePath);

                //If you need to use network credentials 
                request.Credentials = new NetworkCredential(dwnldsvmToDeleteExistingFiles.FtpUserName, dwnldsvmToDeleteExistingFiles.FtpPswd); 
                request.KeepAlive = false;
                request.UsePassive = false;
                request.Method = WebRequestMethods.Ftp.ListDirectory;

                FtpWebResponse ftprespFileList = (FtpWebResponse)request.GetResponse();


                using (Stream responseStream = ftprespFileList.GetResponseStream())
                {
                    using (StreamReader reader = new StreamReader(responseStream))
                    {
                        line = reader.ReadLine();

                        while (line != null)
                        {

                            var fileName = line;

                            
                            if (fileName.Contains(dwnldsvmToDeleteExistingFiles.DeleteDuplicateMemberFileName))
                            {

                                if (fileName.Contains(".xls"))
                                {

                                    FtpWebRequest ftprequDeleteFile = (FtpWebRequest)WebRequest.Create(dwnldsvmToDeleteExistingFiles.FtpFullArchivePath + fileName);

                                    ftprequDeleteFile.Credentials = new NetworkCredential(dwnldsvmToDeleteExistingFiles.FtpUserName, dwnldsvmToDeleteExistingFiles.FtpPswd);
                                    ftprequDeleteFile.Method = WebRequestMethods.Ftp.DeleteFile;

                                    try
                                    {
                                        FtpWebResponse ftprespDelteFile = (FtpWebResponse)ftprequDeleteFile.GetResponse();

                                        ftprespDelteFile.Close();
                                    }
                                    catch(WebException ex)
                                    {
                                        FtpWebResponse response = (FtpWebResponse)ex.Response;
                                    }

                                }

                            }


                            line = reader.ReadLine();

                        }

                    }

                }

            }
            catch(Exception ex)
            {

            }

        }

        private void DeleteLocalExistingDuplicateMemberFileForUser(DownloadsViewModel dwnldsvmToDeleteExistingFiles)
        {

            try
            {

                if (Directory.Exists(dwnldsvmToDeleteExistingFiles.LocalFullDuplicateMemberFilePath))
                {


                    string[] strFileList = Directory.GetFiles(dwnldsvmToDeleteExistingFiles.LocalFullDuplicateMemberFilePath);


                    foreach (string strFileName in strFileList)
                    {
                        if (strFileName.Contains(dwnldsvmToDeleteExistingFiles.DeleteDuplicateMemberFileName))
                        {
                            if (strFileName.Contains(".xls"))
                            {
                                if (File.Exists(strFileName))
                                {
                                    File.Delete(strFileName);
                                }
                            }
                        }
                    }


                }

            }
            catch (Exception ex)
            {

            }

        }

        private bool CreateLocalNewDuplicateMemberExcelFile(ref DownloadsViewModel dwnldsvmToCreateFile)
        {

            bool Created = false;


            try
            {

                //Create COM Objects (Excel): application
                Excel.Application excelApp = new Excel.Application();
                excelApp.DisplayAlerts = false;

                //Create COM Objects (Excel): workbook
                Excel.Workbook excelWrkbook = excelApp.Workbooks.Add(Type.Missing);

                //Create COM Objects (Excel): worksheet
                Excel.Worksheet xlWorksheet;


                xlWorksheet = (Excel.Worksheet)excelWrkbook.ActiveSheet;
                dwnldsvmToCreateFile.DuplicateMemberFileWorksheetName = "DuplicateMembers";
                xlWorksheet.Name = dwnldsvmToCreateFile.DuplicateMemberFileWorksheetName;


                //create the excel file on the ftp
                excelWrkbook.SaveAs(dwnldsvmToCreateFile.LocalFullDuplicateMemberFilePath + dwnldsvmToCreateFile.DuplicateMemberFileName); 


                GC.Collect();
                GC.WaitForPendingFinalizers();


                Marshal.ReleaseComObject(xlWorksheet);

                //close and release
                excelWrkbook.Close(0);
                Marshal.ReleaseComObject(excelWrkbook);


                //quit and release
                excelApp.Quit();
                Marshal.FinalReleaseComObject(excelApp);

                excelApp = null;


                if (File.Exists(dwnldsvmToCreateFile.LocalFullDuplicateMemberFilePath + dwnldsvmToCreateFile.DuplicateMemberFileName))
                {
                    Created = true;
                }


                return Created;

            }
            catch (Exception ex)
            {
                return Created;
            }

        }

        private bool AddDuplicateMembersToLocalNewDuplicatMemberExcelFile(DownloadsViewModel dwnldsvmToAddToFile)
        {
            bool Added = false;

            try
            {

                //Create COM Objects (Excel): application
                Excel.Application excelApp = new Excel.Application();
                excelApp.DisplayAlerts = false;
                excelApp.Visible = false;

                //Open the file
                Excel.Workbook excelWrkbook = excelApp.Workbooks.Open(dwnldsvmToAddToFile.LocalFullDuplicateMemberFilePath + dwnldsvmToAddToFile.DuplicateMemberFileName, 
                                                                      0, false, 5, "", "", false, Excel.XlPlatform.xlWindows, "", true, false, 0, true, false, false);

                //Get all the sheets in the workbook
                Excel.Sheets mWorkSheets = excelWrkbook.Worksheets;

                //Get the worksheet that will be modified
                Excel.Worksheet xlWorksheet = (Excel.Worksheet)mWorkSheets.get_Item(dwnldsvmToAddToFile.DuplicateMemberFileWorksheetName);





                //Create COM Objects (Excel): range
                Excel.Range xlRange = xlWorksheet.UsedRange;

                //the starting row in the worksheet
                int intWrkSheetRowCnt = 1;


                foreach (EligibilityViewModel eligvmDuplicate in dwnldsvmToAddToFile.DuplicateMembersToMerge)
                {


                    //go through the columns of the Excel file
                    for (int intWrkSheetColumnCnt = 1; intWrkSheetColumnCnt <= dwnldsvmToAddToFile.DuplicateMemberFileWorksheetColumnCount; intWrkSheetColumnCnt++) 
                    {

                        //new line
                        if (intWrkSheetColumnCnt > 0)
                        {

                            Excel.Range rangeToAddToFile = xlRange.Cells[intWrkSheetRowCnt, intWrkSheetColumnCnt];


                            string strValue2 = GetEligibilityMemberDataForSystemGeneratedExcelFile(eligvmDuplicate, 
                                                                                        Convert.ToInt32(dwnldsvmToAddToFile.DownloadItem.tpa_id), 
                                                                                        intWrkSheetColumnCnt);


                            if (strValue2 != null)
                            {
                                if (!string.IsNullOrEmpty(Convert.ToString(strValue2)))
                                {

                                    rangeToAddToFile.Value2 = strValue2;

                                    if (!Added)
                                    {
                                        Added = true;
                                    }
                                }

                            }

                        }

                    }


                    intWrkSheetRowCnt++;

                }


                //Save the file
                excelWrkbook.SaveAs(dwnldsvmToAddToFile.LocalFullDuplicateMemberFilePath + dwnldsvmToAddToFile.DuplicateMemberFileName, 
                                    Excel.XlFileFormat.xlWorkbookNormal, Type.Missing, Type.Missing, Type.Missing, Type.Missing, 
                                    Excel.XlSaveAsAccessMode.xlExclusive, Type.Missing, Type.Missing, Type.Missing,Type.Missing, 
                                    Type.Missing);




                GC.Collect();
                GC.WaitForPendingFinalizers();


                Marshal.ReleaseComObject(xlWorksheet);
                xlWorksheet = null;

                //close and release
                excelWrkbook.Close(Type.Missing, Type.Missing, Type.Missing);
                Marshal.ReleaseComObject(excelWrkbook);
                excelWrkbook = null;

                //quit and release
                excelApp.Quit();
                Marshal.FinalReleaseComObject(excelApp);
                excelApp = null;


                return Added;

            }
            catch (WebException ex)
            {
                WebResponse webresponseError = ex.Response;
                return Added;
            }

        }

        private bool UploadLocalNewDuplicateMemberExcelFileToFtp(DownloadsViewModel dwnldsvmToUploadFile)
        {
            bool Uploaded = false;

            try
            {

                FtpWebRequest ftpwebrequestUploadFile = (FtpWebRequest)WebRequest.Create(dwnldsvmToUploadFile.FtpFullArchivePath + dwnldsvmToUploadFile.DuplicateMemberFileName);

                //If you need to use network credentials
                ftpwebrequestUploadFile.Credentials = new NetworkCredential(dwnldsvmToUploadFile.FtpUserName, dwnldsvmToUploadFile.FtpPswd); 
                ftpwebrequestUploadFile.UseBinary = true;
                ftpwebrequestUploadFile.UsePassive = true;
                ftpwebrequestUploadFile.KeepAlive = true;
                ftpwebrequestUploadFile.Method = WebRequestMethods.Ftp.UploadFile;

                string strLocalFileToUpload = dwnldsvmToUploadFile.LocalFullDuplicateMemberFilePath + dwnldsvmToUploadFile.DuplicateMemberFileName;

                //create the excel file on the ftp
                using (FileStream filestreamFileUploadData = File.OpenRead(strLocalFileToUpload))
                {

                    byte[] buffer = new byte[filestreamFileUploadData.Length];
                    filestreamFileUploadData.Read(buffer, 0, buffer.Length);
                    filestreamFileUploadData.Close();

                    try
                    {

                        Stream streamFtpUploadRequest = ftpwebrequestUploadFile.GetRequestStream();

                        if (streamFtpUploadRequest != null)
                        {

                            streamFtpUploadRequest.Write(buffer, 0, buffer.Length);
                            streamFtpUploadRequest.Flush();
                            streamFtpUploadRequest.Close();

                            Uploaded = true;

                        }

                    }
                    catch(WebException ex)
                    {
                        FtpWebResponse response = (FtpWebResponse)ex.Response;
                        Uploaded = false;
                    }


                }


                return Uploaded;

            }
            catch(Exception ex)
            {
                return Uploaded;
            }

        }

        private bool VerifyDuplicateMemberFileExistsOnFtp(DownloadsViewModel dwnldsvmToVerifyFile)
        {

            bool Exists = false;

            try
            {

                var request = (FtpWebRequest)WebRequest.Create(dwnldsvmToVerifyFile.FtpFullArchivePath + dwnldsvmToVerifyFile.DuplicateMemberFileName);
                request.Credentials = new NetworkCredential(dwnldsvmToVerifyFile.FtpUserName, dwnldsvmToVerifyFile.FtpPswd);
                request.Method = WebRequestMethods.Ftp.GetFileSize;


                try
                {
                    FtpWebResponse response = (FtpWebResponse)request.GetResponse();
                    Exists = true;
                }
                catch (WebException ex)
                {
                    FtpWebResponse response = (FtpWebResponse)ex.Response;
                    Exists = false;
                    return Exists;
                }


                return Exists;
            }
            catch(Exception ex)
            {
                return Exists;
            }

        }


        private void DeleteFtpExistingMemberHasNoEmployerFileForUser(DownloadsViewModel dwnldsvmToDeleteExistingFiles)
        {

            string line = "";

            try
            {

                FtpWebRequest request = (FtpWebRequest)WebRequest.Create(dwnldsvmToDeleteExistingFiles.FtpFullArchivePath);

                //If you need to use network credentials 
                request.Credentials = new NetworkCredential(dwnldsvmToDeleteExistingFiles.FtpUserName, dwnldsvmToDeleteExistingFiles.FtpPswd);
                request.KeepAlive = false;
                request.UsePassive = false;
                request.Method = WebRequestMethods.Ftp.ListDirectory;

                FtpWebResponse ftprespFileList = (FtpWebResponse)request.GetResponse();


                using (Stream responseStream = ftprespFileList.GetResponseStream())
                {
                    using (StreamReader reader = new StreamReader(responseStream))
                    {
                        line = reader.ReadLine();

                        while (line != null)
                        {

                            var fileName = line;


                            if (fileName.Contains(dwnldsvmToDeleteExistingFiles.DeleteMemberHasNoEmployerFileName))
                            {

                                if (fileName.Contains(".xls"))
                                {

                                    FtpWebRequest ftprequDeleteFile = (FtpWebRequest)WebRequest.Create(dwnldsvmToDeleteExistingFiles.FtpFullArchivePath + fileName);

                                    ftprequDeleteFile.Credentials = new NetworkCredential(dwnldsvmToDeleteExistingFiles.FtpUserName, dwnldsvmToDeleteExistingFiles.FtpPswd);
                                    ftprequDeleteFile.Method = WebRequestMethods.Ftp.DeleteFile;

                                    try
                                    {
                                        FtpWebResponse ftprespDelteFile = (FtpWebResponse)ftprequDeleteFile.GetResponse();

                                        ftprespDelteFile.Close();
                                    }
                                    catch (WebException ex)
                                    {
                                        FtpWebResponse response = (FtpWebResponse)ex.Response;
                                    }

                                }

                            }


                            line = reader.ReadLine();

                        }

                    }

                }

            }
            catch (Exception ex)
            {

            }

        }

        private void DeleteLocalExistingMemberHasNoEmployerFileForUser(DownloadsViewModel dwnldsvmToDeleteExistingFiles)
        {

            try
            {

                if (Directory.Exists(dwnldsvmToDeleteExistingFiles.LocalFullMemberHasNoEmployerFilePath))
                {


                    string[] strFileList = Directory.GetFiles(dwnldsvmToDeleteExistingFiles.LocalFullMemberHasNoEmployerFilePath);


                    foreach (string strFileName in strFileList)
                    {
                        if (strFileName.Contains(dwnldsvmToDeleteExistingFiles.DeleteMemberHasNoEmployerFileName))
                        {
                            if (strFileName.Contains(".xls"))
                            {
                                if (File.Exists(strFileName))
                                {
                                    File.Delete(strFileName);
                                }
                            }
                        }
                    }


                }

            }
            catch (Exception ex)
            {

            }

        }

        private bool CreateLocalNewMemberHasNoEmployerExcelFile(ref DownloadsViewModel dwnldsvmToCreateFile)
        {

            bool Created = false;


            try
            {

                //Create COM Objects (Excel): application
                Excel.Application excelApp = new Excel.Application();
                excelApp.DisplayAlerts = false;

                //Create COM Objects (Excel): workbook
                Excel.Workbook excelWrkbook = excelApp.Workbooks.Add(Type.Missing);

                //Create COM Objects (Excel): worksheet
                Excel.Worksheet xlWorksheet;


                xlWorksheet = (Excel.Worksheet)excelWrkbook.ActiveSheet;
                dwnldsvmToCreateFile.MemberHasNoEmployerFileWorksheetName = "MemberHasNoEmployer";
                xlWorksheet.Name = dwnldsvmToCreateFile.MemberHasNoEmployerFileWorksheetName;


                //create the excel file on the ftp
                excelWrkbook.SaveAs(dwnldsvmToCreateFile.LocalFullDuplicateMemberFilePath + dwnldsvmToCreateFile.MemberHasNoEmployerFileName);


                GC.Collect();
                GC.WaitForPendingFinalizers();


                Marshal.ReleaseComObject(xlWorksheet);

                //close and release
                excelWrkbook.Close(0);
                Marshal.ReleaseComObject(excelWrkbook);


                //quit and release
                excelApp.Quit();
                Marshal.FinalReleaseComObject(excelApp);

                excelApp = null;


                if (File.Exists(dwnldsvmToCreateFile.LocalFullDuplicateMemberFilePath + dwnldsvmToCreateFile.MemberHasNoEmployerFileName))
                {
                    Created = true;
                }


                return Created;

            }
            catch (Exception ex)
            {
                return Created;
            }

        }

        private bool AddMembersToLocalNewMemberHasNoEmployerExcelFile(DownloadsViewModel dwnldsvmToAddToFile)
        {
            bool Added = false;

            try
            {

                //Create COM Objects (Excel): application
                Excel.Application excelApp = new Excel.Application();
                excelApp.DisplayAlerts = false;
                excelApp.Visible = false;

                //Open the file
                Excel.Workbook excelWrkbook = excelApp.Workbooks.Open(dwnldsvmToAddToFile.LocalFullMemberHasNoEmployerFilePath + dwnldsvmToAddToFile.MemberHasNoEmployerFileName,
                                                                      0, false, 5, "", "", false, Excel.XlPlatform.xlWindows, "", true, false, 0, true, false, false);

                //Get all the sheets in the workbook
                Excel.Sheets mWorkSheets = excelWrkbook.Worksheets;

                //Get the worksheet that will be modified
                Excel.Worksheet xlWorksheet = (Excel.Worksheet)mWorkSheets.get_Item(dwnldsvmToAddToFile.MemberHasNoEmployerFileWorksheetName);





                //Create COM Objects (Excel): range
                Excel.Range xlRange = xlWorksheet.UsedRange;

                //the starting row in the worksheet
                int intWrkSheetRowCnt = 1;


                foreach (EligibilityViewModel eligvmDuplicate in dwnldsvmToAddToFile.MemberHasNoEmployer)
                {


                    //go through the columns of the Excel file
                    for (int intWrkSheetColumnCnt = 1; intWrkSheetColumnCnt <= dwnldsvmToAddToFile.MemberHasNoEmployerFileWorksheetColumnCount; intWrkSheetColumnCnt++)
                    {

                        //new line
                        if (intWrkSheetColumnCnt > 0)
                        {

                            Excel.Range rangeToAddToFile = xlRange.Cells[intWrkSheetRowCnt, intWrkSheetColumnCnt];


                            string strValue2 = GetEligibilityMemberDataForSystemGeneratedExcelFile(eligvmDuplicate,
                                                                                        Convert.ToInt32(dwnldsvmToAddToFile.DownloadItem.tpa_id),
                                                                                        intWrkSheetColumnCnt);


                            if (strValue2 != null)
                            {
                                if (!string.IsNullOrEmpty(Convert.ToString(strValue2)))
                                {

                                    rangeToAddToFile.Value2 = strValue2;

                                    if (!Added)
                                    {
                                        Added = true;
                                    }
                                }

                            }

                        }

                    }


                    intWrkSheetRowCnt++;

                }


                //Save the file
                excelWrkbook.SaveAs(dwnldsvmToAddToFile.LocalFullMemberHasNoEmployerFilePath + dwnldsvmToAddToFile.MemberHasNoEmployerFileName,
                                    Excel.XlFileFormat.xlWorkbookNormal, Type.Missing, Type.Missing, Type.Missing, Type.Missing,
                                    Excel.XlSaveAsAccessMode.xlExclusive, Type.Missing, Type.Missing, Type.Missing, Type.Missing,
                                    Type.Missing);




                GC.Collect();
                GC.WaitForPendingFinalizers();


                Marshal.ReleaseComObject(xlWorksheet);
                xlWorksheet = null;

                //close and release
                excelWrkbook.Close(Type.Missing, Type.Missing, Type.Missing);
                Marshal.ReleaseComObject(excelWrkbook);
                excelWrkbook = null;

                //quit and release
                excelApp.Quit();
                Marshal.FinalReleaseComObject(excelApp);
                excelApp = null;


                return Added;

            }
            catch (WebException ex)
            {
                WebResponse webresponseError = ex.Response;
                return Added;
            }

        }

        private bool UploadLocalNewMemberHasNoEmployerExcelFileToFtp(DownloadsViewModel dwnldsvmToUploadFile)
        {
            bool Uploaded = false;

            try
            {

                FtpWebRequest ftpwebrequestUploadFile = (FtpWebRequest)WebRequest.Create(dwnldsvmToUploadFile.FtpFullArchivePath + dwnldsvmToUploadFile.MemberHasNoEmployerFileName);

                //If you need to use network credentials
                ftpwebrequestUploadFile.Credentials = new NetworkCredential(dwnldsvmToUploadFile.FtpUserName, dwnldsvmToUploadFile.FtpPswd);
                ftpwebrequestUploadFile.UseBinary = true;
                ftpwebrequestUploadFile.UsePassive = true;
                ftpwebrequestUploadFile.KeepAlive = true;
                ftpwebrequestUploadFile.Method = WebRequestMethods.Ftp.UploadFile;

                string strLocalFileToUpload = dwnldsvmToUploadFile.LocalFullMemberHasNoEmployerFilePath + dwnldsvmToUploadFile.MemberHasNoEmployerFileName;

                //create the excel file on the ftp
                using (FileStream filestreamFileUploadData = File.OpenRead(strLocalFileToUpload))
                {

                    byte[] buffer = new byte[filestreamFileUploadData.Length];
                    filestreamFileUploadData.Read(buffer, 0, buffer.Length);
                    filestreamFileUploadData.Close();

                    try
                    {

                        Stream streamFtpUploadRequest = ftpwebrequestUploadFile.GetRequestStream();

                        if (streamFtpUploadRequest != null)
                        {

                            streamFtpUploadRequest.Write(buffer, 0, buffer.Length);
                            streamFtpUploadRequest.Flush();
                            streamFtpUploadRequest.Close();

                            Uploaded = true;

                        }

                    }
                    catch (WebException ex)
                    {
                        FtpWebResponse response = (FtpWebResponse)ex.Response;
                        Uploaded = false;
                    }


                }


                return Uploaded;

            }
            catch (Exception ex)
            {
                return Uploaded;
            }

        }

        private bool VerifyMemberHasNoEmployerFileExistsOnFtp(DownloadsViewModel dwnldsvmToVerifyFile)
        {

            bool Exists = false;

            try
            {

                var request = (FtpWebRequest)WebRequest.Create(dwnldsvmToVerifyFile.FtpFullArchivePath + dwnldsvmToVerifyFile.MemberHasNoEmployerFileName);
                request.Credentials = new NetworkCredential(dwnldsvmToVerifyFile.FtpUserName, dwnldsvmToVerifyFile.FtpPswd);
                request.Method = WebRequestMethods.Ftp.GetFileSize;


                try
                {
                    FtpWebResponse response = (FtpWebResponse)request.GetResponse();
                    Exists = true;
                }
                catch (WebException ex)
                {
                    FtpWebResponse response = (FtpWebResponse)ex.Response;
                    Exists = false;
                    return Exists;
                }


                return Exists;
            }
            catch (Exception ex)
            {
                return Exists;
            }

        }


        private void DeleteFtpExistingMemberEmptyCityFileForUser(DownloadsViewModel dwnldsvmToDeleteExistingFiles)
        {

            string line = "";

            try
            {

                FtpWebRequest request = (FtpWebRequest)WebRequest.Create(dwnldsvmToDeleteExistingFiles.FtpFullArchivePath);

                //If you need to use network credentials 
                request.Credentials = new NetworkCredential(dwnldsvmToDeleteExistingFiles.FtpUserName, dwnldsvmToDeleteExistingFiles.FtpPswd);
                request.KeepAlive = false;
                request.UsePassive = false;
                request.Method = WebRequestMethods.Ftp.ListDirectory;

                FtpWebResponse ftprespFileList = (FtpWebResponse)request.GetResponse();


                using (Stream responseStream = ftprespFileList.GetResponseStream())
                {
                    using (StreamReader reader = new StreamReader(responseStream))
                    {
                        line = reader.ReadLine();

                        while (line != null)
                        {

                            var fileName = line;


                            if (fileName.Contains(dwnldsvmToDeleteExistingFiles.DeleteMemberEmptyCityFileName))
                            {

                                if (fileName.Contains(".xls"))
                                {

                                    FtpWebRequest ftprequDeleteFile = (FtpWebRequest)WebRequest.Create(dwnldsvmToDeleteExistingFiles.FtpFullArchivePath + fileName);

                                    ftprequDeleteFile.Credentials = new NetworkCredential(dwnldsvmToDeleteExistingFiles.FtpUserName, dwnldsvmToDeleteExistingFiles.FtpPswd);
                                    ftprequDeleteFile.Method = WebRequestMethods.Ftp.DeleteFile;

                                    try
                                    {
                                        FtpWebResponse ftprespDelteFile = (FtpWebResponse)ftprequDeleteFile.GetResponse();

                                        ftprespDelteFile.Close();
                                    }
                                    catch (WebException ex)
                                    {
                                        FtpWebResponse response = (FtpWebResponse)ex.Response;
                                    }

                                }

                            }


                            line = reader.ReadLine();

                        }

                    }

                }

            }
            catch (Exception ex)
            {

            }

        }

        private void DeleteLocalExistingMemberEmptyCityFileForUser(DownloadsViewModel dwnldsvmToDeleteExistingFiles)
        {

            try
            {

                if (Directory.Exists(dwnldsvmToDeleteExistingFiles.LocalFullMemberEmptyCityFilePath))
                {


                    string[] strFileList = Directory.GetFiles(dwnldsvmToDeleteExistingFiles.LocalFullMemberEmptyCityFilePath);


                    foreach (string strFileName in strFileList)
                    {
                        if (strFileName.Contains(dwnldsvmToDeleteExistingFiles.DeleteMemberEmptyCityFileName))
                        {
                            if (strFileName.Contains(".xls"))
                            {
                                if (File.Exists(strFileName))
                                {
                                    File.Delete(strFileName);
                                }
                            }
                        }
                    }


                }

            }
            catch (Exception ex)
            {

            }

        }

        private bool CreateLocalNewMemberEmptyCityExcelFile(ref DownloadsViewModel dwnldsvmToCreateFile)
        {

            bool Created = false;


            try
            {

                //Create COM Objects (Excel): application
                Excel.Application excelApp = new Excel.Application();
                excelApp.DisplayAlerts = false;

                //Create COM Objects (Excel): workbook
                Excel.Workbook excelWrkbook = excelApp.Workbooks.Add(Type.Missing);

                //Create COM Objects (Excel): worksheet
                Excel.Worksheet xlWorksheet;


                xlWorksheet = (Excel.Worksheet)excelWrkbook.ActiveSheet;
                dwnldsvmToCreateFile.MemberEmptyCityFileWorksheetName = "MemberEmptyCity";
                xlWorksheet.Name = dwnldsvmToCreateFile.MemberEmptyCityFileWorksheetName;


                //create the excel file on the ftp
                excelWrkbook.SaveAs(dwnldsvmToCreateFile.LocalFullMemberEmptyCityFilePath + dwnldsvmToCreateFile.MemberEmptyCityFileName);


                GC.Collect();
                GC.WaitForPendingFinalizers();


                Marshal.ReleaseComObject(xlWorksheet);

                //close and release
                excelWrkbook.Close(0);
                Marshal.ReleaseComObject(excelWrkbook);


                //quit and release
                excelApp.Quit();
                Marshal.FinalReleaseComObject(excelApp);

                excelApp = null;


                if (File.Exists(dwnldsvmToCreateFile.LocalFullMemberEmptyCityFilePath + dwnldsvmToCreateFile.MemberEmptyCityFileName))
                {
                    Created = true;
                }


                return Created;

            }
            catch (Exception ex)
            {
                return Created;
            }

        }

        private bool AddMembersToLocalNewMemberEmptyCityExcelFile(DownloadsViewModel dwnldsvmToAddToFile)
        {
            bool Added = false;

            try
            {

                //Create COM Objects (Excel): application
                Excel.Application excelApp = new Excel.Application();
                excelApp.DisplayAlerts = false;
                excelApp.Visible = false;

                //Open the file
                Excel.Workbook excelWrkbook = excelApp.Workbooks.Open(dwnldsvmToAddToFile.LocalFullMemberEmptyCityFilePath + dwnldsvmToAddToFile.MemberEmptyCityFileName,
                                                                      0, false, 5, "", "", false, Excel.XlPlatform.xlWindows, "", true, false, 0, true, false, false);

                //Get all the sheets in the workbook
                Excel.Sheets mWorkSheets = excelWrkbook.Worksheets;

                //Get the worksheet that will be modified
                Excel.Worksheet xlWorksheet = (Excel.Worksheet)mWorkSheets.get_Item(dwnldsvmToAddToFile.MemberEmptyCityFileWorksheetName);





                //Create COM Objects (Excel): range
                Excel.Range xlRange = xlWorksheet.UsedRange;

                //the starting row in the worksheet
                int intWrkSheetRowCnt = 1;


                foreach (EligibilityViewModel eligvmDuplicate in dwnldsvmToAddToFile.MemberEmptyCity)
                {


                    //go through the columns of the Excel file
                    for (int intWrkSheetColumnCnt = 1; intWrkSheetColumnCnt <= dwnldsvmToAddToFile.MemberEmptyCityFileWorksheetColumnCount; intWrkSheetColumnCnt++)
                    {

                        //new line
                        if (intWrkSheetColumnCnt > 0)
                        {

                            Excel.Range rangeToAddToFile = xlRange.Cells[intWrkSheetRowCnt, intWrkSheetColumnCnt];


                            string strValue2 = GetEligibilityMemberDataForSystemGeneratedExcelFile(eligvmDuplicate,
                                                                                        Convert.ToInt32(dwnldsvmToAddToFile.DownloadItem.tpa_id),
                                                                                        intWrkSheetColumnCnt);


                            if (strValue2 != null)
                            {
                                if (!string.IsNullOrEmpty(Convert.ToString(strValue2)))
                                {

                                    rangeToAddToFile.Value2 = strValue2;

                                    if (!Added)
                                    {
                                        Added = true;
                                    }
                                }

                            }

                        }

                    }


                    intWrkSheetRowCnt++;

                }


                //Save the file
                excelWrkbook.SaveAs(dwnldsvmToAddToFile.LocalFullMemberEmptyCityFilePath + dwnldsvmToAddToFile.MemberEmptyCityFileName,
                                    Excel.XlFileFormat.xlWorkbookNormal, Type.Missing, Type.Missing, Type.Missing, Type.Missing,
                                    Excel.XlSaveAsAccessMode.xlExclusive, Type.Missing, Type.Missing, Type.Missing, Type.Missing,
                                    Type.Missing);




                GC.Collect();
                GC.WaitForPendingFinalizers();


                Marshal.ReleaseComObject(xlWorksheet);
                xlWorksheet = null;

                //close and release
                excelWrkbook.Close(Type.Missing, Type.Missing, Type.Missing);
                Marshal.ReleaseComObject(excelWrkbook);
                excelWrkbook = null;

                //quit and release
                excelApp.Quit();
                Marshal.FinalReleaseComObject(excelApp);
                excelApp = null;


                return Added;

            }
            catch (WebException ex)
            {
                WebResponse webresponseError = ex.Response;
                return Added;
            }

        }

        private bool UploadLocalNewMemberEmptyCityExcelFileToFtp(DownloadsViewModel dwnldsvmToUploadFile)
        {
            bool Uploaded = false;

            try
            {

                FtpWebRequest ftpwebrequestUploadFile = (FtpWebRequest)WebRequest.Create(dwnldsvmToUploadFile.FtpFullArchivePath + dwnldsvmToUploadFile.MemberEmptyCityFileName);

                //If you need to use network credentials
                ftpwebrequestUploadFile.Credentials = new NetworkCredential(dwnldsvmToUploadFile.FtpUserName, dwnldsvmToUploadFile.FtpPswd);
                ftpwebrequestUploadFile.UseBinary = true;
                ftpwebrequestUploadFile.UsePassive = true;
                ftpwebrequestUploadFile.KeepAlive = true;
                ftpwebrequestUploadFile.Method = WebRequestMethods.Ftp.UploadFile;

                string strLocalFileToUpload = dwnldsvmToUploadFile.LocalFullMemberEmptyCityFilePath + dwnldsvmToUploadFile.MemberEmptyCityFileName;

                //create the excel file on the ftp
                using (FileStream filestreamFileUploadData = File.OpenRead(strLocalFileToUpload))
                {

                    byte[] buffer = new byte[filestreamFileUploadData.Length];
                    filestreamFileUploadData.Read(buffer, 0, buffer.Length);
                    filestreamFileUploadData.Close();

                    try
                    {

                        Stream streamFtpUploadRequest = ftpwebrequestUploadFile.GetRequestStream();

                        if (streamFtpUploadRequest != null)
                        {

                            streamFtpUploadRequest.Write(buffer, 0, buffer.Length);
                            streamFtpUploadRequest.Flush();
                            streamFtpUploadRequest.Close();

                            Uploaded = true;

                        }

                    }
                    catch (WebException ex)
                    {
                        FtpWebResponse response = (FtpWebResponse)ex.Response;
                        Uploaded = false;
                    }


                }


                return Uploaded;

            }
            catch (Exception ex)
            {
                return Uploaded;
            }

        }

        private bool VerifyMemberEmptyCityFileExistsOnFtp(DownloadsViewModel dwnldsvmToVerifyFile)
        {

            bool Exists = false;

            try
            {

                var request = (FtpWebRequest)WebRequest.Create(dwnldsvmToVerifyFile.FtpFullArchivePath + dwnldsvmToVerifyFile.MemberEmptyCityFileName);
                request.Credentials = new NetworkCredential(dwnldsvmToVerifyFile.FtpUserName, dwnldsvmToVerifyFile.FtpPswd);
                request.Method = WebRequestMethods.Ftp.GetFileSize;


                try
                {
                    FtpWebResponse response = (FtpWebResponse)request.GetResponse();
                    Exists = true;
                }
                catch (WebException ex)
                {
                    FtpWebResponse response = (FtpWebResponse)ex.Response;
                    Exists = false;
                    return Exists;
                }


                return Exists;
            }
            catch (Exception ex)
            {
                return Exists;
            }

        }






        private void DeleteFtpExistingClaimMemberNotInSystemFileForUser(DownloadsViewModel DeleteClaimLogFile)
        {

            string line = "";

            try
            {

                FtpWebRequest request = (FtpWebRequest)WebRequest.Create(DeleteClaimLogFile.FtpFullArchivePath);

                //If you need to use network credentials 
                request.Credentials = new NetworkCredential(DeleteClaimLogFile.FtpUserName, DeleteClaimLogFile.FtpPswd);
                request.KeepAlive = false;
                request.UsePassive = false;
                request.Method = WebRequestMethods.Ftp.ListDirectory;

                FtpWebResponse ftprespFileList = (FtpWebResponse)request.GetResponse();


                using (Stream responseStream = ftprespFileList.GetResponseStream())
                {
                    using (StreamReader reader = new StreamReader(responseStream))
                    {
                        line = reader.ReadLine();

                        while (line != null)
                        {

                            var fileName = line;


                            if (fileName.Contains(DeleteClaimLogFile.DeleteClaimMemberNotInSystemFileName))
                            {

                                if (fileName.Contains(".xls"))
                                {

                                    FtpWebRequest ftprequDeleteFile = (FtpWebRequest)WebRequest.Create(DeleteClaimLogFile.FtpFullArchivePath + fileName);

                                    ftprequDeleteFile.Credentials = new NetworkCredential(DeleteClaimLogFile.FtpUserName, DeleteClaimLogFile.FtpPswd);
                                    ftprequDeleteFile.Method = WebRequestMethods.Ftp.DeleteFile;

                                    try
                                    {
                                        FtpWebResponse ftprespDelteFile = (FtpWebResponse)ftprequDeleteFile.GetResponse();

                                        ftprespDelteFile.Close();
                                    }
                                    catch (WebException ex)
                                    {
                                        FtpWebResponse response = (FtpWebResponse)ex.Response;
                                    }

                                }

                            }


                            line = reader.ReadLine();

                        }

                    }

                }

            }
            catch (Exception ex)
            {

            }

        }

        private void DeleteLocalExistingClaimMemberNotInSystemFileForUser(DownloadsViewModel DeleteClaimLogFile)
        {

            try
            {

                if (Directory.Exists(DeleteClaimLogFile.LocalFullClaimMemberNotInSystemFilePath))
                {


                    string[] strFileList = Directory.GetFiles(DeleteClaimLogFile.LocalFullClaimMemberNotInSystemFilePath);


                    foreach (string strFileName in strFileList)
                    {
                        if (strFileName.Contains(DeleteClaimLogFile.DeleteClaimMemberNotInSystemFileName))
                        {
                            if (strFileName.Contains(".xls"))
                            {
                                if (File.Exists(strFileName))
                                {
                                    File.Delete(strFileName);
                                }
                            }
                        }
                    }


                }

            }
            catch (Exception ex)
            {

            }

        }

        private bool CreateLocalNewClaimMemberNotInSystemExcelFile(ref DownloadsViewModel LocalClaimMemNotInSysFile)
        {

            bool Created = false;


            try
            {

                //Create COM Objects (Excel): application
                Excel.Application excelApp = new Excel.Application();
                excelApp.DisplayAlerts = false;

                //Create COM Objects (Excel): workbook
                Excel.Workbook excelWrkbook = excelApp.Workbooks.Add(Type.Missing);

                //Create COM Objects (Excel): worksheet
                Excel.Worksheet xlWorksheet;


                xlWorksheet = (Excel.Worksheet)excelWrkbook.ActiveSheet;
                LocalClaimMemNotInSysFile.ClaimMemberNotInSystemFileWorksheetName = "MemberNotInSystem";
                xlWorksheet.Name = LocalClaimMemNotInSysFile.ClaimMemberNotInSystemFileWorksheetName;


                //create the excel file on the ftp
                excelWrkbook.SaveAs(LocalClaimMemNotInSysFile.LocalFullClaimMemberNotInSystemFilePath + LocalClaimMemNotInSysFile.ClaimMemberNotInSystemFileName);


                GC.Collect();
                GC.WaitForPendingFinalizers();


                Marshal.ReleaseComObject(xlWorksheet);

                //close and release
                excelWrkbook.Close(0);
                Marshal.ReleaseComObject(excelWrkbook);


                //quit and release
                excelApp.Quit();
                Marshal.FinalReleaseComObject(excelApp);

                excelApp = null;


                if (File.Exists(LocalClaimMemNotInSysFile.LocalFullClaimMemberNotInSystemFilePath + LocalClaimMemNotInSysFile.ClaimMemberNotInSystemFileName))
                {
                    Created = true;
                }


                return Created;

            }
            catch (Exception ex)
            {
                return Created;
            }

        }

        private bool AddMembersToLocalNewClaimMemberNotInSystemExcelFile(DownloadsViewModel LocalClaimMemNotInSysFile)
        {
            bool Added = false;

            try
            {

                //Create COM Objects (Excel): application
                Excel.Application excelApp = new Excel.Application();
                excelApp.DisplayAlerts = false;
                excelApp.Visible = false;

                //Open the file
                Excel.Workbook excelWrkbook = excelApp.Workbooks.Open(LocalClaimMemNotInSysFile.LocalFullClaimMemberNotInSystemFilePath + LocalClaimMemNotInSysFile.ClaimMemberNotInSystemFileName,
                                                                      0, false, 5, "", "", false, Excel.XlPlatform.xlWindows, "", true, false, 0, true, false, false);

                //Get all the sheets in the workbook
                Excel.Sheets mWorkSheets = excelWrkbook.Worksheets;

                //Get the worksheet that will be modified
                Excel.Worksheet xlWorksheet = (Excel.Worksheet)mWorkSheets.get_Item(LocalClaimMemNotInSysFile.ClaimMemberNotInSystemFileWorksheetName);





                //Create COM Objects (Excel): range
                Excel.Range xlRange = xlWorksheet.UsedRange;

                //the starting row in the worksheet
                int intWrkSheetRowCnt = 1;


                foreach (ClaimViewModel MemberNotInSystem in LocalClaimMemNotInSysFile.ClaimInSystem)
                {


                    //go through the columns of the Excel file
                    for (int intWrkSheetColumnCnt = 1; intWrkSheetColumnCnt <= LocalClaimMemNotInSysFile.ClaimMemberNotInSystemFileWorksheetColumnCount; intWrkSheetColumnCnt++)
                    {

                        //new line
                        if (intWrkSheetColumnCnt > 0)
                        {

                            Excel.Range rangeToAddToFile = xlRange.Cells[intWrkSheetRowCnt, intWrkSheetColumnCnt];


                            string strValue2 = GetClaimMemberDataForSystemGeneratedExcelFile(MemberNotInSystem,
                                                                                             Convert.ToInt32(LocalClaimMemNotInSysFile.DownloadItem.tpa_id),
                                                                                             intWrkSheetColumnCnt);


                            if (strValue2 != null)
                            {
                                if (!string.IsNullOrEmpty(Convert.ToString(strValue2)))
                                {

                                    rangeToAddToFile.Value2 = strValue2;

                                    if (!Added)
                                    {
                                        Added = true;
                                    }
                                }

                            }

                        }

                    }


                    intWrkSheetRowCnt++;

                }


                //Save the file
                excelWrkbook.SaveAs(LocalClaimMemNotInSysFile.LocalFullClaimMemberNotInSystemFilePath + LocalClaimMemNotInSysFile.ClaimMemberNotInSystemFileName,
                                    Excel.XlFileFormat.xlWorkbookNormal, Type.Missing, Type.Missing, Type.Missing, Type.Missing,
                                    Excel.XlSaveAsAccessMode.xlExclusive, Type.Missing, Type.Missing, Type.Missing, Type.Missing,
                                    Type.Missing);




                GC.Collect();
                GC.WaitForPendingFinalizers();


                Marshal.ReleaseComObject(xlWorksheet);
                xlWorksheet = null;

                //close and release
                excelWrkbook.Close(Type.Missing, Type.Missing, Type.Missing);
                Marshal.ReleaseComObject(excelWrkbook);
                excelWrkbook = null;

                //quit and release
                excelApp.Quit();
                Marshal.FinalReleaseComObject(excelApp);
                excelApp = null;


                return Added;

            }
            catch (WebException ex)
            {
                WebResponse webresponseError = ex.Response;
                return Added;
            }

        }

        private bool UploadLocalNewMemberNotInSystemFileToFtp(DownloadsViewModel MemberNotInSystem)
        {
            bool Uploaded = false;

            try
            {

                FtpWebRequest ftpwebrequestUploadFile = (FtpWebRequest)WebRequest.Create(MemberNotInSystem.FtpFullArchivePath + MemberNotInSystem.ClaimMemberNotInSystemFileName);

                //If you need to use network credentials
                ftpwebrequestUploadFile.Credentials = new NetworkCredential(MemberNotInSystem.FtpUserName, MemberNotInSystem.FtpPswd);
                ftpwebrequestUploadFile.UseBinary = true;
                ftpwebrequestUploadFile.UsePassive = true;
                ftpwebrequestUploadFile.KeepAlive = true;
                ftpwebrequestUploadFile.Method = WebRequestMethods.Ftp.UploadFile;

                string strLocalFileToUpload = MemberNotInSystem.LocalFullClaimMemberNotInSystemFilePath + MemberNotInSystem.ClaimMemberNotInSystemFileName;

                //create the excel file on the ftp
                using (FileStream filestreamFileUploadData = File.OpenRead(strLocalFileToUpload))
                {

                    byte[] buffer = new byte[filestreamFileUploadData.Length];
                    filestreamFileUploadData.Read(buffer, 0, buffer.Length);
                    filestreamFileUploadData.Close();

                    try
                    {

                        Stream streamFtpUploadRequest = ftpwebrequestUploadFile.GetRequestStream();

                        if (streamFtpUploadRequest != null)
                        {

                            streamFtpUploadRequest.Write(buffer, 0, buffer.Length);
                            streamFtpUploadRequest.Flush();
                            streamFtpUploadRequest.Close();

                            Uploaded = true;

                        }

                    }
                    catch (WebException ex)
                    {
                        FtpWebResponse response = (FtpWebResponse)ex.Response;
                        Uploaded = false;
                    }


                }


                return Uploaded;

            }
            catch (Exception ex)
            {
                return Uploaded;
            }

        }

        private bool VerifyMemberNotInSystemFileExistsOnFtp(DownloadsViewModel VerifyFtpMemberNotInSystemFile)
        {

            bool Exists = false;

            try
            {

                var request = (FtpWebRequest)WebRequest.Create(VerifyFtpMemberNotInSystemFile.FtpFullArchivePath + VerifyFtpMemberNotInSystemFile.ClaimMemberNotInSystemFileName);
                request.Credentials = new NetworkCredential(VerifyFtpMemberNotInSystemFile.FtpUserName, VerifyFtpMemberNotInSystemFile.FtpPswd);
                request.Method = WebRequestMethods.Ftp.GetFileSize;


                try
                {
                    FtpWebResponse response = (FtpWebResponse)request.GetResponse();
                    Exists = true;
                }
                catch (WebException ex)
                {
                    FtpWebResponse response = (FtpWebResponse)ex.Response;
                    Exists = false;
                    return Exists;
                }


                return Exists;
            }
            catch (Exception ex)
            {
                return Exists;
            }

        }


        private void DeleteFtpExistingClaimEmployerNotInSystemFileForUser(DownloadsViewModel DeleteEmployNotInSysFile)
        {

            string line = "";

            try
            {

                FtpWebRequest request = (FtpWebRequest)WebRequest.Create(DeleteEmployNotInSysFile.FtpFullArchivePath);

                //If you need to use network credentials 
                request.Credentials = new NetworkCredential(DeleteEmployNotInSysFile.FtpUserName, DeleteEmployNotInSysFile.FtpPswd);
                request.KeepAlive = false;
                request.UsePassive = false;
                request.Method = WebRequestMethods.Ftp.ListDirectory;

                FtpWebResponse ftprespFileList = (FtpWebResponse)request.GetResponse();


                using (Stream responseStream = ftprespFileList.GetResponseStream())
                {
                    using (StreamReader reader = new StreamReader(responseStream))
                    {
                        line = reader.ReadLine();

                        while (line != null)
                        {

                            var fileName = line;


                            if (fileName.Contains(DeleteEmployNotInSysFile.DeleteClaimEmployerNotInSystemFileName))
                            {

                                if (fileName.Contains(".xls"))
                                {

                                    FtpWebRequest ftprequDeleteFile = (FtpWebRequest)WebRequest.Create(DeleteEmployNotInSysFile.FtpFullArchivePath + fileName);

                                    ftprequDeleteFile.Credentials = new NetworkCredential(DeleteEmployNotInSysFile.FtpUserName, DeleteEmployNotInSysFile.FtpPswd);
                                    ftprequDeleteFile.Method = WebRequestMethods.Ftp.DeleteFile;

                                    try
                                    {
                                        FtpWebResponse ftprespDelteFile = (FtpWebResponse)ftprequDeleteFile.GetResponse();

                                        ftprespDelteFile.Close();
                                    }
                                    catch (WebException ex)
                                    {
                                        FtpWebResponse response = (FtpWebResponse)ex.Response;
                                    }

                                }

                            }


                            line = reader.ReadLine();

                        }

                    }

                }

            }
            catch (Exception ex)
            {

            }

        }

        private void DeleteLocalExistingClaimEmployerNotInSystemFileForUser(DownloadsViewModel DeleteEmployNotInSysFile)
        {

            try
            {

                if (Directory.Exists(DeleteEmployNotInSysFile.LocalFullClaimEmployerNotInSystemFilePath))
                {

                    string[] strFileList = Directory.GetFiles(DeleteEmployNotInSysFile.LocalFullClaimEmployerNotInSystemFilePath);

                    foreach (string strFileName in strFileList)
                    {
                        if (strFileName.Contains(DeleteEmployNotInSysFile.DeleteClaimEmployerNotInSystemFileName))
                        {
                            if (strFileName.Contains(".xls"))
                            {
                                if (File.Exists(strFileName))
                                {
                                    File.Delete(strFileName);
                                }
                            }
                        }
                    }


                }

            }
            catch (Exception ex)
            {

            }

        }

        private bool CreateLocalNewClaimEmployerNotInSystemExcelFile(ref DownloadsViewModel LocalEmployNotInSysFile)
        {

            bool Created = false;

            try
            {
                //Create COM Objects (Excel): application
                Excel.Application excelApp = new Excel.Application();
                excelApp.DisplayAlerts = false;

                //Create COM Objects (Excel): workbook
                Excel.Workbook excelWrkbook = excelApp.Workbooks.Add(Type.Missing);

                //Create COM Objects (Excel): worksheet
                Excel.Worksheet xlWorksheet;


                xlWorksheet = (Excel.Worksheet)excelWrkbook.ActiveSheet;
                LocalEmployNotInSysFile.ClaimEmployerNotInSystemFileWorksheetName = "EmployerNotInSystem";
                xlWorksheet.Name = LocalEmployNotInSysFile.ClaimEmployerNotInSystemFileWorksheetName;


                //create the excel file on the ftp
                excelWrkbook.SaveAs(LocalEmployNotInSysFile.LocalFullClaimEmployerNotInSystemFilePath + LocalEmployNotInSysFile.ClaimEmployerNotInSystemFileName);


                GC.Collect();
                GC.WaitForPendingFinalizers();


                Marshal.ReleaseComObject(xlWorksheet);

                //close and release
                excelWrkbook.Close(0);
                Marshal.ReleaseComObject(excelWrkbook);


                //quit and release
                excelApp.Quit();
                Marshal.FinalReleaseComObject(excelApp);

                excelApp = null;


                if (File.Exists(LocalEmployNotInSysFile.LocalFullClaimEmployerNotInSystemFilePath + LocalEmployNotInSysFile.ClaimEmployerNotInSystemFileName))
                {
                    Created = true;
                }


                return Created;

            }
            catch (Exception ex)
            {
                return Created;
            }

        }

        private bool AddMembersToLocalNewClaimEmployerNotInSystemExcelFile(DownloadsViewModel LocalEmployNotInSysFile)
        {
            bool Added = false;

            try
            {

                //Create COM Objects (Excel): application
                Excel.Application excelApp = new Excel.Application();
                excelApp.DisplayAlerts = false;
                excelApp.Visible = false;

                //Open the file
                Excel.Workbook excelWrkbook = excelApp.Workbooks.Open(LocalEmployNotInSysFile.LocalFullClaimEmployerNotInSystemFilePath + LocalEmployNotInSysFile.ClaimEmployerNotInSystemFileName,
                                                                      0, false, 5, "", "", false, Excel.XlPlatform.xlWindows, "", true, false, 0, true, false, false);

                //Get all the sheets in the workbook
                Excel.Sheets mWorkSheets = excelWrkbook.Worksheets;

                //Get the worksheet that will be modified
                Excel.Worksheet xlWorksheet = (Excel.Worksheet)mWorkSheets.get_Item(LocalEmployNotInSysFile.ClaimEmployerNotInSystemFileWorksheetName);


                //Create COM Objects (Excel): range
                Excel.Range xlRange = xlWorksheet.UsedRange;

                //the starting row in the worksheet
                int intWrkSheetRowCnt = 1;


                foreach (ClaimViewModel EmployerNotInSystem in LocalEmployNotInSysFile.ClaimEmployerNotInSystem)
                {


                    //go through the columns of the Excel file
                    for (int intWrkSheetColumnCnt = 1; intWrkSheetColumnCnt <= LocalEmployNotInSysFile.ClaimEmployerNotInSystemFileWorksheetColumnCount; intWrkSheetColumnCnt++)
                    {

                        //new line
                        if (intWrkSheetColumnCnt > 0)
                        {

                            Excel.Range rangeToAddToFile = xlRange.Cells[intWrkSheetRowCnt, intWrkSheetColumnCnt];


                            string strValue2 = GetClaimMemberDataForSystemGeneratedExcelFile(EmployerNotInSystem,
                                                                                             Convert.ToInt32(LocalEmployNotInSysFile.DownloadItem.tpa_id),
                                                                                             intWrkSheetColumnCnt);


                            if (strValue2 != null)
                            {
                                if (!string.IsNullOrEmpty(Convert.ToString(strValue2)))
                                {

                                    rangeToAddToFile.Value2 = strValue2;

                                    if (!Added)
                                    {
                                        Added = true;
                                    }
                                }

                            }

                        }

                    }


                    intWrkSheetRowCnt++;

                }


                //Save the file
                excelWrkbook.SaveAs(LocalEmployNotInSysFile.LocalFullClaimEmployerNotInSystemFilePath + LocalEmployNotInSysFile.ClaimEmployerNotInSystemFileName,
                                    Excel.XlFileFormat.xlWorkbookNormal, Type.Missing, Type.Missing, Type.Missing, Type.Missing,
                                    Excel.XlSaveAsAccessMode.xlExclusive, Type.Missing, Type.Missing, Type.Missing, Type.Missing,
                                    Type.Missing);




                GC.Collect();
                GC.WaitForPendingFinalizers();


                Marshal.ReleaseComObject(xlWorksheet);
                xlWorksheet = null;

                //close and release
                excelWrkbook.Close(Type.Missing, Type.Missing, Type.Missing);
                Marshal.ReleaseComObject(excelWrkbook);
                excelWrkbook = null;

                //quit and release
                excelApp.Quit();
                Marshal.FinalReleaseComObject(excelApp);
                excelApp = null;


                return Added;

            }
            catch (WebException ex)
            {
                WebResponse webresponseError = ex.Response;
                return Added;
            }

        }

        private bool UploadLocalNewClaimEmployerNotInSystemFileToFtp(DownloadsViewModel LocalEmployNotInSysFile)
        {
            bool Uploaded = false;

            try
            {

                FtpWebRequest ftpwebrequestUploadFile = (FtpWebRequest)WebRequest.Create(LocalEmployNotInSysFile.FtpFullArchivePath + LocalEmployNotInSysFile.ClaimEmployerNotInSystemFileName);

                //If you need to use network credentials
                ftpwebrequestUploadFile.Credentials = new NetworkCredential(LocalEmployNotInSysFile.FtpUserName, LocalEmployNotInSysFile.FtpPswd);
                ftpwebrequestUploadFile.UseBinary = true;
                ftpwebrequestUploadFile.UsePassive = true;
                ftpwebrequestUploadFile.KeepAlive = true;
                ftpwebrequestUploadFile.Method = WebRequestMethods.Ftp.UploadFile;

                string strLocalFileToUpload = LocalEmployNotInSysFile.LocalFullClaimEmployerNotInSystemFilePath + LocalEmployNotInSysFile.ClaimEmployerNotInSystemFileName;

                //create the excel file on the ftp
                using (FileStream filestreamFileUploadData = File.OpenRead(strLocalFileToUpload))
                {

                    byte[] buffer = new byte[filestreamFileUploadData.Length];
                    filestreamFileUploadData.Read(buffer, 0, buffer.Length);
                    filestreamFileUploadData.Close();

                    try
                    {

                        Stream streamFtpUploadRequest = ftpwebrequestUploadFile.GetRequestStream();

                        if (streamFtpUploadRequest != null)
                        {

                            streamFtpUploadRequest.Write(buffer, 0, buffer.Length);
                            streamFtpUploadRequest.Flush();
                            streamFtpUploadRequest.Close();

                            Uploaded = true;

                        }

                    }
                    catch (WebException ex)
                    {
                        FtpWebResponse response = (FtpWebResponse)ex.Response;
                        Uploaded = false;
                    }


                }


                return Uploaded;

            }
            catch (Exception ex)
            {
                return Uploaded;
            }

        }

        private bool VerifyClaimEmployerNotInSystemFileExistsOnFtp(DownloadsViewModel FtpEmployNotInSysFile)
        {

            bool Exists = false;

            try
            {

                var request = (FtpWebRequest)WebRequest.Create(FtpEmployNotInSysFile.FtpFullArchivePath + FtpEmployNotInSysFile.ClaimEmployerNotInSystemFileName);
                request.Credentials = new NetworkCredential(FtpEmployNotInSysFile.FtpUserName, FtpEmployNotInSysFile.FtpPswd);
                request.Method = WebRequestMethods.Ftp.GetFileSize;


                try
                {
                    FtpWebResponse response = (FtpWebResponse)request.GetResponse();
                    Exists = true;
                }
                catch (WebException ex)
                {
                    FtpWebResponse response = (FtpWebResponse)ex.Response;
                    Exists = false;
                    return Exists;
                }


                return Exists;
            }
            catch (Exception ex)
            {
                return Exists;
            }

        }



        private void DeleteFtpExistingClaimClaimInSystemFileForUser(DownloadsViewModel DeleteClaimInSysFile)
        {

            string line = "";

            try
            {

                FtpWebRequest request = (FtpWebRequest)WebRequest.Create(DeleteClaimInSysFile.FtpFullArchivePath);

                //If you need to use network credentials 
                request.Credentials = new NetworkCredential(DeleteClaimInSysFile.FtpUserName, DeleteClaimInSysFile.FtpPswd);
                request.KeepAlive = false;
                request.UsePassive = false;
                request.Method = WebRequestMethods.Ftp.ListDirectory;

                FtpWebResponse ftprespFileList = (FtpWebResponse)request.GetResponse();


                using (Stream responseStream = ftprespFileList.GetResponseStream())
                {
                    using (StreamReader reader = new StreamReader(responseStream))
                    {
                        line = reader.ReadLine();

                        while (line != null)
                        {

                            var fileName = line;


                            if (fileName.Contains(DeleteClaimInSysFile.DeleteClaimClaimInSystemFileName))
                            {

                                if (fileName.Contains(".xls"))
                                {

                                    FtpWebRequest ftprequDeleteFile = (FtpWebRequest)WebRequest.Create(DeleteClaimInSysFile.FtpFullArchivePath + fileName);

                                    ftprequDeleteFile.Credentials = new NetworkCredential(DeleteClaimInSysFile.FtpUserName, DeleteClaimInSysFile.FtpPswd);
                                    ftprequDeleteFile.Method = WebRequestMethods.Ftp.DeleteFile;

                                    try
                                    {
                                        FtpWebResponse ftprespDelteFile = (FtpWebResponse)ftprequDeleteFile.GetResponse();

                                        ftprespDelteFile.Close();
                                    }
                                    catch (WebException ex)
                                    {
                                        FtpWebResponse response = (FtpWebResponse)ex.Response;
                                    }

                                }

                            }


                            line = reader.ReadLine();

                        }

                    }

                }

            }
            catch (Exception ex)
            {

            }

        }

        private void DeleteLocalExistingClaimClaimInSystemFileForUser(DownloadsViewModel DeleteClaimInSysFile)
        {

            try
            {

                if (Directory.Exists(DeleteClaimInSysFile.LocalFullClaimClaimInSystemFilePath))
                {

                    string[] strFileList = Directory.GetFiles(DeleteClaimInSysFile.LocalFullClaimClaimInSystemFilePath);

                    foreach (string strFileName in strFileList)
                    {
                        if (strFileName.Contains(DeleteClaimInSysFile.DeleteClaimClaimInSystemFileName))
                        {
                            if (strFileName.Contains(".xls"))
                            {
                                if (File.Exists(strFileName))
                                {
                                    File.Delete(strFileName);
                                }
                            }
                        }
                    }


                }

            }
            catch (Exception ex)
            {

            }

        }

        private bool CreateLocalNewClaimClaimInSystemExcelFile(ref DownloadsViewModel LocalClaimInSysFile)
        {

            bool Created = false;

            try
            {
                //Create COM Objects (Excel): application
                Excel.Application excelApp = new Excel.Application();
                excelApp.DisplayAlerts = false;

                //Create COM Objects (Excel): workbook
                Excel.Workbook excelWrkbook = excelApp.Workbooks.Add(Type.Missing);

                //Create COM Objects (Excel): worksheet
                Excel.Worksheet xlWorksheet;


                xlWorksheet = (Excel.Worksheet)excelWrkbook.ActiveSheet;
                LocalClaimInSysFile.ClaimClaimInSystemFileWorksheetName = "ClaimInSystem";
                xlWorksheet.Name = LocalClaimInSysFile.ClaimClaimInSystemFileWorksheetName;


                //create the excel file on the ftp
                excelWrkbook.SaveAs(LocalClaimInSysFile.LocalFullClaimClaimInSystemFilePath + LocalClaimInSysFile.ClaimClaimInSystemFileName);


                GC.Collect();
                GC.WaitForPendingFinalizers();


                Marshal.ReleaseComObject(xlWorksheet);

                //close and release
                excelWrkbook.Close(0);
                Marshal.ReleaseComObject(excelWrkbook);


                //quit and release
                excelApp.Quit();
                Marshal.FinalReleaseComObject(excelApp);

                excelApp = null;


                if (File.Exists(LocalClaimInSysFile.LocalFullClaimClaimInSystemFilePath + LocalClaimInSysFile.ClaimClaimInSystemFileName))
                {
                    Created = true;
                }


                return Created;

            }
            catch (Exception ex)
            {
                return Created;
            }

        }

        private bool AddMembersToLocalNewClaimClaimInSystemExcelFile(DownloadsViewModel LocalClaimInSysFile)
        {
            bool Added = false;

            try
            {

                //Create COM Objects (Excel): application
                Excel.Application excelApp = new Excel.Application();
                excelApp.DisplayAlerts = false;
                excelApp.Visible = false;

                //Open the file
                Excel.Workbook excelWrkbook = excelApp.Workbooks.Open(LocalClaimInSysFile.LocalFullClaimClaimInSystemFilePath + LocalClaimInSysFile.ClaimClaimInSystemFileName,
                                                                      0, false, 5, "", "", false, Excel.XlPlatform.xlWindows, "", true, false, 0, true, false, false);

                //Get all the sheets in the workbook
                Excel.Sheets mWorkSheets = excelWrkbook.Worksheets;

                //Get the worksheet that will be modified
                Excel.Worksheet xlWorksheet = (Excel.Worksheet)mWorkSheets.get_Item(LocalClaimInSysFile.ClaimClaimInSystemFileWorksheetName);


                //Create COM Objects (Excel): range
                Excel.Range xlRange = xlWorksheet.UsedRange;

                //the starting row in the worksheet
                int intWrkSheetRowCnt = 1;


                foreach (ClaimViewModel ClaimInSys in LocalClaimInSysFile.ClaimInSystem)
                {


                    //go through the columns of the Excel file
                    for (int intWrkSheetColumnCnt = 1; intWrkSheetColumnCnt <= LocalClaimInSysFile.ClaimClaimInSystemFileWorksheetColumnCount; intWrkSheetColumnCnt++)
                    {

                        //new line
                        if (intWrkSheetColumnCnt > 0)
                        {

                            Excel.Range rangeToAddToFile = xlRange.Cells[intWrkSheetRowCnt, intWrkSheetColumnCnt];


                            string strValue2 = GetClaimMemberDataForSystemGeneratedExcelFile(ClaimInSys,
                                                                                             Convert.ToInt32(LocalClaimInSysFile.DownloadItem.tpa_id),
                                                                                             intWrkSheetColumnCnt);


                            if (strValue2 != null)
                            {
                                if (!string.IsNullOrEmpty(Convert.ToString(strValue2)))
                                {

                                    rangeToAddToFile.Value2 = strValue2;

                                    if (!Added)
                                    {
                                        Added = true;
                                    }
                                }

                            }

                        }

                    }


                    intWrkSheetRowCnt++;

                }


                //Save the file
                excelWrkbook.SaveAs(LocalClaimInSysFile.LocalFullClaimClaimInSystemFilePath + LocalClaimInSysFile.ClaimClaimInSystemFileName,
                                    Excel.XlFileFormat.xlWorkbookNormal, Type.Missing, Type.Missing, Type.Missing, Type.Missing,
                                    Excel.XlSaveAsAccessMode.xlExclusive, Type.Missing, Type.Missing, Type.Missing, Type.Missing,
                                    Type.Missing);




                GC.Collect();
                GC.WaitForPendingFinalizers();


                Marshal.ReleaseComObject(xlWorksheet);
                xlWorksheet = null;

                //close and release
                excelWrkbook.Close(Type.Missing, Type.Missing, Type.Missing);
                Marshal.ReleaseComObject(excelWrkbook);
                excelWrkbook = null;

                //quit and release
                excelApp.Quit();
                Marshal.FinalReleaseComObject(excelApp);
                excelApp = null;


                return Added;

            }
            catch (WebException ex)
            {
                WebResponse webresponseError = ex.Response;
                return Added;
            }

        }

        private bool UploadLocalNewClaimClaimInSystemFileToFtp(DownloadsViewModel LocalClaimInSysFile)
        {
            bool Uploaded = false;

            try
            {

                FtpWebRequest ftpwebrequestUploadFile = (FtpWebRequest)WebRequest.Create(LocalClaimInSysFile.FtpFullArchivePath + LocalClaimInSysFile.ClaimClaimInSystemFileName);

                //If you need to use network credentials
                ftpwebrequestUploadFile.Credentials = new NetworkCredential(LocalClaimInSysFile.FtpUserName, LocalClaimInSysFile.FtpPswd);
                ftpwebrequestUploadFile.UseBinary = true;
                ftpwebrequestUploadFile.UsePassive = true;
                ftpwebrequestUploadFile.KeepAlive = true;
                ftpwebrequestUploadFile.Method = WebRequestMethods.Ftp.UploadFile;

                string strLocalFileToUpload = LocalClaimInSysFile.LocalFullClaimClaimInSystemFilePath + LocalClaimInSysFile.ClaimClaimInSystemFileName;

                //create the excel file on the ftp
                using (FileStream filestreamFileUploadData = File.OpenRead(strLocalFileToUpload))
                {

                    byte[] buffer = new byte[filestreamFileUploadData.Length];
                    filestreamFileUploadData.Read(buffer, 0, buffer.Length);
                    filestreamFileUploadData.Close();

                    try
                    {

                        Stream streamFtpUploadRequest = ftpwebrequestUploadFile.GetRequestStream();

                        if (streamFtpUploadRequest != null)
                        {

                            streamFtpUploadRequest.Write(buffer, 0, buffer.Length);
                            streamFtpUploadRequest.Flush();
                            streamFtpUploadRequest.Close();

                            Uploaded = true;

                        }

                    }
                    catch (WebException ex)
                    {
                        FtpWebResponse response = (FtpWebResponse)ex.Response;
                        Uploaded = false;
                    }


                }


                return Uploaded;

            }
            catch (Exception ex)
            {
                return Uploaded;
            }

        }

        private bool VerifyClaimClaimInSystemFileExistsOnFtp(DownloadsViewModel FtpClaimInSysFile)
        {

            bool Exists = false;

            try
            {

                var request = (FtpWebRequest)WebRequest.Create(FtpClaimInSysFile.FtpFullArchivePath + FtpClaimInSysFile.ClaimClaimInSystemFileName);
                request.Credentials = new NetworkCredential(FtpClaimInSysFile.FtpUserName, FtpClaimInSysFile.FtpPswd);
                request.Method = WebRequestMethods.Ftp.GetFileSize;


                try
                {
                    FtpWebResponse response = (FtpWebResponse)request.GetResponse();
                    Exists = true;
                }
                catch (WebException ex)
                {
                    FtpWebResponse response = (FtpWebResponse)ex.Response;
                    Exists = false;
                    return Exists;
                }


                return Exists;
            }
            catch (Exception ex)
            {
                return Exists;
            }

        }






        public bool GetFileFromFtp(DownloadsViewModel dwnldsvmToDownload)
        {

            bool FromFtp = false;

            try
            {

                string strDownloadToDirectory = @"C:\ICMS Letter Templates\temp\" + dwnldsvmToDownload.FileName;
                string strFtpHostUrl = dwnldsvmToDownload.FtpHost;                                              //"ftps.dbmshealth.com";
                string strFtpFilePathAndName = dwnldsvmToDownload.FtpFilePath + dwnldsvmToDownload.FileName;    //"/EGP/Eligibility/" + dwnldsvmToDownload.FileName;
                string strFtpFullUrl = "ftp://" + strFtpHostUrl + strFtpFilePathAndName;


                using (WebClient request = new WebClient())
                {
                    request.Credentials = new NetworkCredential(dwnldsvmToDownload.FtpUserName, dwnldsvmToDownload.FtpPswd);

                    byte[] fileData = request.DownloadData(strFtpFullUrl);

                    using (FileStream file = File.Create(strDownloadToDirectory))
                    {
                        file.Write(fileData, 0, fileData.Length);
                        file.Close();
                    }


                    FromFtp = true;

                }


                return FromFtp;

            }
            catch (Exception ex)
            {
                return FromFtp;
            }

        }

        public void SetParsingParameters(ref DownloadsViewModel dwnldsvmToDownload)
        {

            try
            {
                dwnldsvmToDownload.FilePath = dwnldsvmToDownload.DownloadItem.ftp_actual_directory;
                dwnldsvmToDownload.FileName = dwnldsvmToDownload.DownloadItem.dts_package_filename_to_use;
                dwnldsvmToDownload.FtpUserName = dwnldsvmToDownload.DownloadItem.UserName;
                dwnldsvmToDownload.FtpPswd = dwnldsvmToDownload.DownloadItem.Password;

                dwnldsvmToDownload.FtpHost = dwnldsvmToDownload.DownloadItem.ftp_host;
                dwnldsvmToDownload.FtpFilePath = dwnldsvmToDownload.DownloadItem.ftp_file_path;
            }
            catch (Exception ex)
            {

            }

        }





        private void GetSystemGeneratedExcelFileNamesAndPath(ref DownloadsViewModel dwnldsvmToGetInfoFor, string Filename)
        {
            try
            {

                DateTime dtNow = DateTime.Now;


                string strGeneratedFileName = Filename + dwnldsvmToGetInfoFor.DownloadingUserId + "_" +
                                              dtNow.Year.ToString() + "_" + dtNow.Month.ToString() + "_" + dtNow.Day.ToString() + "_" +
                                              dtNow.Hour.ToString() + dtNow.Minute.ToString() + dtNow.Millisecond.ToString() + ".xls";

                string strDeletedFileName = Filename + dwnldsvmToGetInfoFor.DownloadingUserId + "_";

                string strLocalFullGeneratedFilePath = "C:\\ICMS Letter Templates\\temp\\";


                if (Filename.Equals("DBMS_Eligibility_DuplicateMember_"))
                {
                    dwnldsvmToGetInfoFor.DuplicateMemberFileName = strGeneratedFileName;
                    dwnldsvmToGetInfoFor.DeleteDuplicateMemberFileName = strDeletedFileName;
                    dwnldsvmToGetInfoFor.LocalFullDuplicateMemberFilePath = strLocalFullGeneratedFilePath;
                }
                else if (Filename.Equals("DBMS_Eligibility_MemberHasNoEmployer_"))
                {
                    dwnldsvmToGetInfoFor.MemberHasNoEmployerFileName = strGeneratedFileName;
                    dwnldsvmToGetInfoFor.DeleteMemberHasNoEmployerFileName = strDeletedFileName;
                    dwnldsvmToGetInfoFor.LocalFullMemberHasNoEmployerFilePath = strLocalFullGeneratedFilePath;
                }
                else if (Filename.Equals("DBMS_Eligibility_MemberEmptyCity_"))
                {
                    dwnldsvmToGetInfoFor.MemberEmptyCityFileName = strGeneratedFileName;
                    dwnldsvmToGetInfoFor.DeleteMemberEmptyCityFileName = strDeletedFileName;
                    dwnldsvmToGetInfoFor.LocalFullMemberEmptyCityFilePath = strLocalFullGeneratedFilePath;
                }
                else if (Filename.Equals("DBMS_Claim_MemberNotInSystem_"))
                {
                    dwnldsvmToGetInfoFor.ClaimMemberNotInSystemFileName = strGeneratedFileName;
                    dwnldsvmToGetInfoFor.DeleteClaimMemberNotInSystemFileName = strDeletedFileName;
                    dwnldsvmToGetInfoFor.LocalFullClaimMemberNotInSystemFilePath = strLocalFullGeneratedFilePath;
                }
                else if (Filename.Equals("DBMS_Claim_EmployerNotInSystem_"))
                {
                    dwnldsvmToGetInfoFor.ClaimEmployerNotInSystemFileName = strGeneratedFileName;
                    dwnldsvmToGetInfoFor.DeleteClaimEmployerNotInSystemFileName = strDeletedFileName;
                    dwnldsvmToGetInfoFor.LocalFullClaimEmployerNotInSystemFilePath = strLocalFullGeneratedFilePath;
                }
                else if (Filename.Equals("DBMS_Claim_ClaimInSystem_"))
                {
                    dwnldsvmToGetInfoFor.ClaimClaimInSystemFileName = strGeneratedFileName;
                    dwnldsvmToGetInfoFor.DeleteClaimClaimInSystemFileName = strDeletedFileName;
                    dwnldsvmToGetInfoFor.LocalFullClaimClaimInSystemFilePath = strLocalFullGeneratedFilePath;
                }
            }
            catch (WebException ex)
            {
                WebResponse webresponseError = ex.Response;
            }

        }




        private string GetEligibilityMemberDataForSystemGeneratedExcelFile(EligibilityViewModel DuplicateMember, int TpaId, int ColumnNumber)
        {

            string ReturnData = "";

            try
            {

                switch (TpaId)
                {

                    case 439:
                        ReturnData = GetEligibilityMemberDataForSystemGeneratedExcelFile_Egp(DuplicateMember, ColumnNumber);
                        break;

                    default:
                        ReturnData = GetEligibilityMemberDataForSystemGeneratedExcelFile_Dbms(DuplicateMember, ColumnNumber);
                        break;
                }


                return ReturnData;

            }
            catch (WebException ex)
            {
                return ReturnData;
            }

        }

        private string GetEligibilityMemberDataForSystemGeneratedExcelFile_Egp(EligibilityViewModel DuplicateMember, int ColumnNumber)
        {

            string ReturnData = "";

            try
            {

                switch (ColumnNumber)
                {

                    case 1:
                        ReturnData = (!string.IsNullOrEmpty(DuplicateMember.Type)) ? DuplicateMember.Type : "";
                        break;

                    case 2:
                        ReturnData = (!string.IsNullOrEmpty(DuplicateMember.MemId)) ? DuplicateMember.MemId : "";
                        break;

                    case 3:
                        ReturnData = (!string.IsNullOrEmpty(DuplicateMember.MemFirstName)) ? DuplicateMember.MemFirstName : "";
                        break;

                    case 4:
                        ReturnData = (!string.IsNullOrEmpty(DuplicateMember.MemLastName)) ? DuplicateMember.MemLastName : "";
                        break;

                    case 5:
                        ReturnData = (!string.IsNullOrEmpty(DuplicateMember.MemMiddleName)) ? DuplicateMember.MemMiddleName : "";
                        break;

                    case 6:
                        ReturnData = (!string.IsNullOrEmpty(DuplicateMember.MemAddressLine1)) ? DuplicateMember.MemAddressLine1 : "";
                        break;

                    case 7:
                        ReturnData = (!string.IsNullOrEmpty(DuplicateMember.MemAddressLine2)) ? DuplicateMember.MemAddressLine2 : "";
                        break;

                    case 8:
                        ReturnData = (!string.IsNullOrEmpty(DuplicateMember.MemCity)) ? DuplicateMember.MemCity : "";
                        break;

                    case 9:
                        ReturnData = (!string.IsNullOrEmpty(DuplicateMember.MemState)) ? DuplicateMember.MemState : "";
                        break;

                    case 10:
                        ReturnData = (!string.IsNullOrEmpty(DuplicateMember.MemZipCode)) ? DuplicateMember.MemZipCode : "";
                        break;

                    case 11:
                        ReturnData = (!string.IsNullOrEmpty(DuplicateMember.MemGender)) ? DuplicateMember.MemGender : "";
                        break;

                    case 12:
                        ReturnData = (!string.IsNullOrEmpty(DuplicateMember.MemDob)) ? DuplicateMember.MemDob : "";
                        break;

                    case 13:
                        ReturnData = (!string.IsNullOrEmpty(DuplicateMember.MemEffDate)) ? DuplicateMember.MemEffDate : "";
                        break;

                    case 14:
                        ReturnData = (!string.IsNullOrEmpty(DuplicateMember.MemTermDate)) ? DuplicateMember.MemTermDate : "";
                        break;

                    case 15:
                        ReturnData = (!string.IsNullOrEmpty(DuplicateMember.MemSsn)) ? DuplicateMember.MemSsn : "";
                        break;

                    case 16:
                        ReturnData = (!string.IsNullOrEmpty(DuplicateMember.MemInsNumber)) ? DuplicateMember.MemInsNumber : "";
                        break;

                    case 17:
                        ReturnData = (!string.IsNullOrEmpty(DuplicateMember.MemPhoneNumber)) ? DuplicateMember.MemPhoneNumber : "";
                        break;

                    case 18:
                        ReturnData = (!string.IsNullOrEmpty(DuplicateMember.DepFirstName)) ? DuplicateMember.DepFirstName : "";
                        break;

                    case 19:
                        ReturnData = (!string.IsNullOrEmpty(DuplicateMember.DepLastName)) ? DuplicateMember.DepLastName : "";
                        break;

                    case 20:
                        ReturnData = (!string.IsNullOrEmpty(DuplicateMember.DepMiddleName)) ? DuplicateMember.DepMiddleName : "";
                        break;

                    case 21:
                        ReturnData = (!string.IsNullOrEmpty(DuplicateMember.DepAddressLine1)) ? DuplicateMember.DepAddressLine1 : "";
                        break;

                    case 22:
                        ReturnData = (!string.IsNullOrEmpty(DuplicateMember.DepAddressLine2)) ? DuplicateMember.DepAddressLine2 : "";
                        break;

                    case 23:
                        ReturnData = (!string.IsNullOrEmpty(DuplicateMember.DepCity)) ? DuplicateMember.DepCity : "";
                        break;

                    case 24:
                        ReturnData = (!string.IsNullOrEmpty(DuplicateMember.DepState)) ? DuplicateMember.DepState : "";
                        break;

                    case 25:
                        ReturnData = (!string.IsNullOrEmpty(DuplicateMember.DepZipCode)) ? DuplicateMember.DepZipCode : "";
                        break;

                    case 26:
                        ReturnData = (!string.IsNullOrEmpty(DuplicateMember.DepGender)) ? DuplicateMember.DepGender : "";
                        break;

                    case 27:
                        ReturnData = (!string.IsNullOrEmpty(DuplicateMember.DepDob)) ? DuplicateMember.DepDob : "";
                        break;

                    case 28:
                        ReturnData = (!string.IsNullOrEmpty(DuplicateMember.DepEffDate)) ? DuplicateMember.DepEffDate : "";
                        break;

                    case 29:
                        ReturnData = (!string.IsNullOrEmpty(DuplicateMember.DepTermDate)) ? DuplicateMember.DepTermDate : "";
                        break;

                    case 30:
                        ReturnData = (!string.IsNullOrEmpty(DuplicateMember.DepSsn)) ? DuplicateMember.DepSsn : "";
                        break;

                    case 31:
                        ReturnData = (!string.IsNullOrEmpty(DuplicateMember.DepInsNumber)) ? DuplicateMember.DepInsNumber : "";
                        break;

                    case 32:
                        ReturnData = (!string.IsNullOrEmpty(DuplicateMember.DepPhoneNumber)) ? DuplicateMember.DepPhoneNumber : "";
                        break;

                    case 33:
                        ReturnData = (!string.IsNullOrEmpty(DuplicateMember.Relationship)) ? DuplicateMember.Relationship : "";
                        break;

                    case 34:
                        ReturnData = (!string.IsNullOrEmpty(DuplicateMember.Network)) ? DuplicateMember.Network : "";
                        break;

                    case 35:
                        ReturnData = (!string.IsNullOrEmpty(DuplicateMember.MemMedicarePrim)) ? DuplicateMember.MemMedicarePrim : "";
                        break;

                    case 36:
                        ReturnData = (!string.IsNullOrEmpty(DuplicateMember.MedicareEffDate)) ? DuplicateMember.MedicareEffDate : "";
                        break;

                }


                return ReturnData;

            }
            catch (WebException ex)
            {
                return ReturnData;
            }

        }

        private string GetEligibilityMemberDataForSystemGeneratedExcelFile_Dbms(EligibilityViewModel DuplicateMember, int ColumnNumber)
        {

            string ReturnData = "";

            try
            {

                return ReturnData;

            }
            catch (WebException ex)
            {
                return ReturnData;
            }

        }




        private string GetClaimMemberDataForSystemGeneratedExcelFile(ClaimViewModel MemberData, int TpaId, int ColumnNumber)
        {

            string ReturnData = "";

            try
            {

                switch (TpaId)
                {

                    case 439:
                        ReturnData = GetClaimDataForSystemGeneratedExcelFile_Egp(MemberData, ColumnNumber);
                        break;

                    default:
                        ReturnData = GetClaimDataForSystemGeneratedExcelFile_Dbms(MemberData, ColumnNumber);
                        break;
                }


                return ReturnData;

            }
            catch (WebException ex)
            {
                return ReturnData;
            }

        }

        private string GetClaimDataForSystemGeneratedExcelFile_Egp(ClaimViewModel ClaimData, int ColumnNumber)
        {

            string ReturnData = "";

            try
            {

                switch (ColumnNumber)
                {

                    case 1:
                        ReturnData = (!string.IsNullOrEmpty(ClaimData.GroupNum)) ? ClaimData.GroupNum : "";
                        break;

                    case 2:
                        ReturnData = (!string.IsNullOrEmpty(ClaimData.GroupName)) ? ClaimData.GroupName : "";
                        break;

                    case 3:
                        ReturnData = (!string.IsNullOrEmpty(ClaimData.MemberId)) ? ClaimData.MemberId : "";
                        break;

                    case 4:
                        ReturnData = (!string.IsNullOrEmpty(ClaimData.FirstName)) ? ClaimData.FirstName : "";
                        break;

                    case 5:
                        ReturnData = (!string.IsNullOrEmpty(ClaimData.LastName)) ? ClaimData.LastName : "";
                        break;

                    case 6:
                        ReturnData = (!string.IsNullOrEmpty(ClaimData.EmployeeSsn)) ? ClaimData.EmployeeSsn : "";
                        break;

                    case 7:
                        ReturnData = (!string.IsNullOrEmpty(ClaimData.Birth)) ? ClaimData.Birth : "";
                        break;

                    case 8:
                        ReturnData = (!string.IsNullOrEmpty(ClaimData.MemFirstName)) ? ClaimData.MemFirstName : "";
                        break;

                    case 9:
                        ReturnData = (!string.IsNullOrEmpty(ClaimData.MemLastName)) ? ClaimData.MemLastName : "";
                        break;

                    case 10:
                        ReturnData = (!string.IsNullOrEmpty(ClaimData.ClaimantSsn)) ? ClaimData.ClaimantSsn : "";
                        break;

                    case 11:
                        ReturnData = (!string.IsNullOrEmpty(ClaimData.SubAdd1)) ? ClaimData.SubAdd1 : "";
                        break;

                    case 12:
                        ReturnData = (!string.IsNullOrEmpty(ClaimData.SubAdd2)) ? ClaimData.SubAdd2 : "";
                        break;

                    case 13:
                        ReturnData = (!string.IsNullOrEmpty(ClaimData.SubCity)) ? ClaimData.SubCity : "";
                        break;

                    case 14:
                        ReturnData = (!string.IsNullOrEmpty(ClaimData.SubState)) ? ClaimData.SubState : "";
                        break;

                    case 15:
                        ReturnData = (!string.IsNullOrEmpty(ClaimData.SubZip)) ? ClaimData.SubZip : "";
                        break;

                    case 16:
                        ReturnData = (!string.IsNullOrEmpty(ClaimData.SubPhone)) ? ClaimData.SubPhone : "";
                        break;

                    case 17:
                        ReturnData = (!string.IsNullOrEmpty(ClaimData.Diag1)) ? ClaimData.Diag1 : "";
                        break;

                    case 18:
                        ReturnData = (!string.IsNullOrEmpty(ClaimData.Diag2)) ? ClaimData.Diag2 : "";
                        break;

                    case 19:
                        ReturnData = (!string.IsNullOrEmpty(ClaimData.Diag3)) ? ClaimData.Diag3 : "";
                        break;

                    case 20:
                        ReturnData = (!string.IsNullOrEmpty(ClaimData.Diag4)) ? ClaimData.Diag4 : "";
                        break;

                    case 21:
                        ReturnData = (!string.IsNullOrEmpty(ClaimData.Diag5)) ? ClaimData.Diag5 : "";
                        break;

                    case 22:
                        ReturnData = (!string.IsNullOrEmpty(ClaimData.CptCode)) ? ClaimData.CptCode : "";
                        break;

                    case 23:
                        ReturnData = (!string.IsNullOrEmpty(ClaimData.ServiceToDate)) ? ClaimData.ServiceToDate : "";
                        break;

                    case 24:
                        ReturnData = (!string.IsNullOrEmpty(ClaimData.CheckDate)) ? ClaimData.CheckDate : "";
                        break;

                    case 25:
                        ReturnData = (!string.IsNullOrEmpty(ClaimData.PosName)) ? ClaimData.PosName : "";
                        break;

                    case 26:
                        ReturnData = (!string.IsNullOrEmpty(ClaimData.PosAddress1)) ? ClaimData.PosAddress1 : "";
                        break;

                    case 27:
                        ReturnData = (!string.IsNullOrEmpty(ClaimData.PosAddress2)) ? ClaimData.PosAddress2 : "";
                        break;

                    case 28:
                        ReturnData = (!string.IsNullOrEmpty(ClaimData.PosCity)) ? ClaimData.PosCity : "";
                        break;

                    case 29:
                        ReturnData = (!string.IsNullOrEmpty(ClaimData.PosState)) ? ClaimData.PosState : "";
                        break;

                    case 30:
                        ReturnData = (!string.IsNullOrEmpty(ClaimData.PosZip)) ? ClaimData.PosZip : "";
                        break;

                    case 31:
                        ReturnData = (!string.IsNullOrEmpty(ClaimData.PosPhone)) ? ClaimData.PosPhone : "";
                        break;

                    case 32:
                        ReturnData = (!string.IsNullOrEmpty(ClaimData.HospitalInDate)) ? ClaimData.HospitalInDate : "";
                        break;

                    case 33:
                        ReturnData = (!string.IsNullOrEmpty(ClaimData.HospitalOutDate)) ? ClaimData.HospitalOutDate : "";
                        break;

                    case 34:
                        ReturnData = (!string.IsNullOrEmpty(ClaimData.ClaimNumber)) ? ClaimData.ClaimNumber : "";
                        break;

                    case 35:
                        ReturnData = (!string.IsNullOrEmpty(ClaimData.ClaimLineNumber)) ? ClaimData.ClaimLineNumber : "";
                        break;

                    case 36:
                        ReturnData = (!string.IsNullOrEmpty(ClaimData.ClaimPaidAmount)) ? ClaimData.ClaimPaidAmount : "";
                        break;

                    case 37:
                        ReturnData = (!string.IsNullOrEmpty(ClaimData.ClaimBillAmount)) ? ClaimData.ClaimBillAmount : ""; 
                        break;

                }


                return ReturnData;

            }
            catch (WebException ex)
            {
                return ReturnData;
            }

        }

        private string GetClaimDataForSystemGeneratedExcelFile_Dbms(ClaimViewModel MemberData, int ColumnNumber)
        {

            string ReturnData = "";

            try
            {

                return ReturnData;

            }
            catch (WebException ex)
            {
                return ReturnData;
            }

        }





        private void GetGroupName(ref DownloadsViewModel dwnldsvmToParse)
        {

            try
            {

                int? intTpaId = dwnldsvmToParse.DownloadItem.tpa_id;


                if (intTpaId.Value.CompareTo(0) > 0)
                {

                    using (var db = new IcmsDataStagingDbContext())
                    {
                        dwnldsvmToParse.GroupNames = (from grpnms in db.DataStagingTpaGroupNames
                                                      where grpnms.TPA_ID == intTpaId
                                                      select grpnms).ToList();
                    }

                }

            }
            catch (Exception ex)
            {

            }

        }

        private List<IcmsMember> GetEligibilityMembers(ref EligibilityViewModel MembersInSystemMatchingCriteria)
        {
            List<IcmsMember> MembersToReturn = new List<IcmsMember>();

            try
            {
                string strFirstName = "";
                string strLastName = "";
                string strMiddleName = "";
                string strDob = "";
                DateTime dtDob;
                string strSsn = "";
                string strCity = "";


                strFirstName = MembersInSystemMatchingCriteria.DepFirstName;
                strLastName = MembersInSystemMatchingCriteria.DepLastName;
                strMiddleName = MembersInSystemMatchingCriteria.DepMiddleName;
                strDob = MembersInSystemMatchingCriteria.DepDob;
                strSsn = MembersInSystemMatchingCriteria.DepSsn;
                strCity = MembersInSystemMatchingCriteria.DepCity;


                using (var db = new ICMS2DbContext())
                {
                    //Per Danny only search for members based on First, Last, and DOB 02/20/2018
                    if (!string.IsNullOrEmpty(strFirstName) && 
                        !string.IsNullOrEmpty(strLastName) && 
                        !string.IsNullOrEmpty(strDob))
                    {
                        dtDob = Convert.ToDateTime(strDob);

                        //search MEMBER table
                        MembersToReturn = (from mem in db.DbmsMembers
                                           where mem.member_first_name == strFirstName
                                           && mem.member_last_name == strLastName
                                           && mem.member_birth == dtDob
                                           orderby mem.member_updated descending, mem.creaion_date descending
                                           select mem).ToList();

                        //member found?
                        if (MembersToReturn != null)
                        {
                            if (MembersToReturn.Count > 0)
                            {
                                return MembersToReturn;
                            }
                        }
                    }

                    ////first, last, middle, dob, ssn
                    //if (!string.IsNullOrEmpty(strFirstName) && !string.IsNullOrEmpty(strLastName) && !string.IsNullOrEmpty(strMiddleName)
                    //    && !string.IsNullOrEmpty(strDob) && !string.IsNullOrEmpty(strSsn))
                    //{

                    //    dtDob = Convert.ToDateTime(strDob);


                    //    //search MEMBER table
                    //    MembersToReturn = (from mem in db.DbmsMembers
                    //                       where mem.member_first_name == strFirstName
                    //                       && mem.member_last_name == strLastName
                    //                       && mem.member_middle_name == strMiddleName
                    //                       && mem.member_birth == dtDob
                    //                       && mem.member_ssn == strSsn
                    //                       select mem).ToList();

                    //    //member found?
                    //    if (MembersToReturn != null)
                    //    {
                    //        if (MembersToReturn.Count == 1)
                    //        {
                    //            return MembersToReturn;
                    //        }
                    //        else if (MembersToReturn.Count == 0)
                    //        {
                    //            MembersToReturn = null;
                    //            return MembersToReturn;
                    //        }
                    //        else
                    //        {
                    //            MembersInSystemMatchingCriteria.MultipleMembersInSystem = true;
                    //            MembersToReturn = null;
                    //            return MembersToReturn;
                    //        }
                    //    }

                    //}


                    ////first, last, middle, dob
                    //if (!string.IsNullOrEmpty(strFirstName) && !string.IsNullOrEmpty(strLastName) && !string.IsNullOrEmpty(strMiddleName)
                    //    && !string.IsNullOrEmpty(strDob))
                    //{

                    //    dtDob = Convert.ToDateTime(strDob);


                    //    //search MEMBER table
                    //    MembersToReturn = (from mem in db.DbmsMembers
                    //                       where mem.member_first_name == strFirstName
                    //                       && mem.member_last_name == strLastName
                    //                       && mem.member_middle_name == strMiddleName
                    //                       && mem.member_birth == dtDob
                    //                       select mem).ToList();

                    //    //member found?
                    //    if (MembersToReturn != null)
                    //    {
                    //        if (MembersToReturn.Count == 1)
                    //        {
                    //            return MembersToReturn;
                    //        }
                    //        else if (MembersToReturn.Count == 0)
                    //        {
                    //            MembersToReturn = null;
                    //            return MembersToReturn;
                    //        }
                    //        else
                    //        {
                    //            MembersInSystemMatchingCriteria.MultipleMembersInSystem = true;
                    //            MembersToReturn = null;
                    //            return MembersToReturn;
                    //        }
                    //    }

                    //}



                    ////first, last, middle, ssn
                    //if (!string.IsNullOrEmpty(strFirstName) && !string.IsNullOrEmpty(strLastName) && !string.IsNullOrEmpty(strMiddleName)
                    //    && !string.IsNullOrEmpty(strSsn))
                    //{

                    //    //search MEMBER table
                    //    MembersToReturn = (from mem in db.DbmsMembers
                    //                       where mem.member_first_name == strFirstName
                    //                       && mem.member_last_name == strLastName
                    //                       && mem.member_middle_name == strMiddleName
                    //                       && mem.member_ssn == strSsn
                    //                       select mem).ToList();

                    //    //member found?
                    //    if (MembersToReturn != null)
                    //    {
                    //        if (MembersToReturn.Count == 1)
                    //        {
                    //            return MembersToReturn;
                    //        }
                    //        else if (MembersToReturn.Count == 0)
                    //        {
                    //            MembersToReturn = null;
                    //            return MembersToReturn;
                    //        }
                    //        else
                    //        {
                    //            MembersInSystemMatchingCriteria.MultipleMembersInSystem = true;
                    //            MembersToReturn = null;
                    //            return MembersToReturn;
                    //        }
                    //    }

                    //}


                    ////first, last, dob, ssn
                    //if (!string.IsNullOrEmpty(strFirstName) && !string.IsNullOrEmpty(strLastName) && !string.IsNullOrEmpty(strDob)
                    //    && !string.IsNullOrEmpty(strSsn))
                    //{

                    //    dtDob = Convert.ToDateTime(strDob);


                    //    //search MEMBER table
                    //    MembersToReturn = (from mem in db.DbmsMembers
                    //                       where mem.member_first_name == strFirstName
                    //                       && mem.member_last_name == strLastName
                    //                       && mem.member_birth == dtDob
                    //                       && mem.member_ssn == strSsn
                    //                       select mem).ToList();

                    //    //member found?
                    //    if (MembersToReturn != null)
                    //    {
                    //        if (MembersToReturn.Count == 1)
                    //        {
                    //            return MembersToReturn;
                    //        }
                    //        else if (MembersToReturn.Count == 0)
                    //        {
                    //            MembersToReturn = null;
                    //            return MembersToReturn;
                    //        }
                    //        else
                    //        {
                    //            MembersInSystemMatchingCriteria.MultipleMembersInSystem = true;
                    //            MembersToReturn = null;
                    //            return MembersToReturn;
                    //        }
                    //    }

                    //}



                    ////first, last, dob
                    //if (!string.IsNullOrEmpty(strFirstName) && !string.IsNullOrEmpty(strLastName) && !string.IsNullOrEmpty(strDob))
                    //{

                    //    dtDob = Convert.ToDateTime(strDob);


                    //    //search MEMBER table
                    //    MembersToReturn = (from mem in db.DbmsMembers
                    //                       where mem.member_first_name == strFirstName
                    //                       && mem.member_last_name == strLastName
                    //                       && mem.member_birth == dtDob
                    //                       select mem).ToList();

                    //    //member found?
                    //    if (MembersToReturn != null)
                    //    {
                    //        if (MembersToReturn.Count == 1)
                    //        {
                    //            return MembersToReturn;
                    //        }
                    //        else if (MembersToReturn.Count == 0)
                    //        {
                    //            MembersToReturn = null;
                    //            return MembersToReturn;
                    //        }
                    //        else
                    //        {
                    //            MembersInSystemMatchingCriteria.MultipleMembersInSystem = true;
                    //            MembersToReturn = null;
                    //            return MembersToReturn;
                    //        }
                    //    }

                    //}



                    ////first, last, ssn
                    //if (!string.IsNullOrEmpty(strFirstName) && !string.IsNullOrEmpty(strLastName) && !string.IsNullOrEmpty(strSsn))
                    //{

                    //    //search MEMBER table
                    //    MembersToReturn = (from mem in db.DbmsMembers
                    //                       where mem.member_first_name == strFirstName
                    //                       && mem.member_last_name == strLastName
                    //                       && mem.member_ssn == strSsn
                    //                       select mem).ToList();

                    //    //member found?
                    //    if (MembersToReturn != null)
                    //    {
                    //        if (MembersToReturn.Count == 1)
                    //        {
                    //            return MembersToReturn;
                    //        }
                    //        else if (MembersToReturn.Count == 0)
                    //        {
                    //            MembersToReturn = null;
                    //            return MembersToReturn;
                    //        }
                    //        else
                    //        {
                    //            MembersInSystemMatchingCriteria.MultipleMembersInSystem = true;
                    //            MembersToReturn = null;
                    //            return MembersToReturn;
                    //        }
                    //    }

                    //}



                } //using (var db = new ICMS2DbContext())...END


                return MembersToReturn;


            }
            catch (Exception ex)
            {
                return MembersToReturn;
            }

        }

        private bool VerifyEligibilityMemberCity(EligibilityViewModel eligvmItem, ref List<IcmsMember> MembersInSystem)
        {
            bool Verified = false;

            try
            {
                string strCity = eligvmItem.DepCity;
                int intRemoveItem = 0;
                List<int> lstRemoveIndex = new List<int>();

                foreach(IcmsMember memToVerify in MembersInSystem)
                {

                    using (var db = new ICMS2DbContext())
                    {
                        MemberAddress memAddress = new MemberAddress();

                        //search MEMBER_ADRESS table
                        memAddress = (from address in db.DbmsMemberAddresses
                                      where address.member_id == memToVerify.member_id
                                      select address).SingleOrDefault();

                        if (!string.IsNullOrEmpty(memAddress.city))
                        {
                            if (!memAddress.city.Equals(strCity))
                            {
                                lstRemoveIndex.Add(intRemoveItem);
                            }
                        }
                    }

                    intRemoveItem++;
                }


                if (lstRemoveIndex.Count > 0)
                {
                    foreach(var RemoveItem in lstRemoveIndex)
                    {
                        MembersInSystem.RemoveAt(RemoveItem);
                    }
                }

                if (MembersInSystem.Count == 1)
                {
                    Verified = true;
                }

                return Verified;

            }
            catch(Exception ex)
            {
                return Verified;
            }
        }

        private bool VerifyMemberEmployer(EligibilityViewModel eligvmItem, ref List<IcmsMember> MembersInSystem)
        {
            bool Verified = false;

            try
            {
                string strGroupNum = eligvmItem.MemId;
                int intRemoveItem = 0;
                List<int> lstRemoveIndex = new List<int>();

                foreach (IcmsMember memToVerify in MembersInSystem)
                {

                    using (var db = new ICMS2DbContext())
                    {
                        MemberEnrollment memEnroll = new MemberEnrollment();

                        //search MEMBER_ENROLLMENT table
                        memEnroll = (from enroll in db.DbmsMemberEnrollment 
                                     where enroll.member_id == memToVerify.member_id
                                     select enroll).SingleOrDefault();

                        if (memEnroll.employer_id != null)
                        {

                            if (eligvmItem.GroupNames.Count > 0)
                            {
                                foreach (TpaGroupNames tpagrpnmGroup in eligvmItem.GroupNames)
                                {
                                    if (!string.IsNullOrEmpty(tpagrpnmGroup.GROUPNUM))
                                    {
                                        if (strGroupNum.Equals(tpagrpnmGroup.GROUPNUM))
                                        {
                                            if (!memEnroll.employer_id.Equals(tpagrpnmGroup.ICM_EMPLOYER_ID))
                                            {
                                                lstRemoveIndex.Add(intRemoveItem);
                                                break;
                                            }
                                        }
                                    }

                                    if (!string.IsNullOrEmpty(tpagrpnmGroup.groupNum2))
                                    {
                                        if (strGroupNum.Equals(tpagrpnmGroup.groupNum2))
                                        {
                                            if (!memEnroll.employer_id.Equals(tpagrpnmGroup.ICM_EMPLOYER_ID))
                                            {
                                                lstRemoveIndex.Add(intRemoveItem);
                                                break;
                                            }
                                        }
                                    }

                                    if (!string.IsNullOrEmpty(tpagrpnmGroup.groupNum3))
                                    {
                                        if (strGroupNum.Equals(tpagrpnmGroup.groupNum3))
                                        {
                                            if (!memEnroll.employer_id.Equals(tpagrpnmGroup.ICM_EMPLOYER_ID))
                                            {
                                                lstRemoveIndex.Add(intRemoveItem);
                                                break;
                                            }
                                        }
                                    }

                                }
                            }
                        }
                    }

                    intRemoveItem++;
                }


                if (lstRemoveIndex.Count > 0)
                {
                    foreach (var RemoveItem in lstRemoveIndex)
                    {
                        MembersInSystem.RemoveAt(RemoveItem);
                    }
                }

                if (MembersInSystem.Count == 1)
                {
                    Verified = true;
                }

                return Verified;

            }
            catch (Exception ex)
            {
                return Verified;
            }
        }




        private List<IcmsMember> GetClaimMembers_Egp(ref ClaimViewModel VerifyMember)
        {
            List<IcmsMember> MembersToReturn = new List<IcmsMember>();

            try
            {

                string strFirstName = "";
                string strLastName = "";
                string strDob = "";
                DateTime dtDob;
                string strCity = "";


                strFirstName = VerifyMember.MemFirstName;
                strLastName = VerifyMember.MemLastName;
                strCity = VerifyMember.SubCity;
                strDob = VerifyMember.Birth;             


                using (var db = new ICMS2DbContext())
                {
                    if (!string.IsNullOrEmpty(strFirstName) && 
                        !string.IsNullOrEmpty(strLastName) && 
                        !string.IsNullOrEmpty(strDob))
                    {
                        strDob = FormatClaimDob_Egp(strDob);
                        dtDob = Convert.ToDateTime(strDob);

                        VerifyMember.Birth = strDob;

                        MembersToReturn = (from mem in db.DbmsMembers
                                           where mem.member_first_name == strFirstName
                                           && mem.member_last_name == strLastName
                                           && mem.member_birth == dtDob
                                           select mem).ToList();

                        if (MembersToReturn != null)
                        {
                            if (MembersToReturn.Count > 0)
                            {
                                return MembersToReturn;
                            }
                        }
                    }
                }


                return MembersToReturn;
            }
            catch (Exception ex)
            {
                return MembersToReturn;
            }
        }

        private List<IcmsMember> GetClaimMembers_Dbms(ref ClaimViewModel VerifyMember)
        {
            List<IcmsMember> MembersToReturn = new List<IcmsMember>();

            try
            {
                string strFirstName = "";
                string strLastName = "";
                string strDob = "";                
                string strCity = "";


                strFirstName = VerifyMember.MemFirstName;
                strLastName = VerifyMember.MemLastName;
                strCity = VerifyMember.SubCity;


                if (!string.IsNullOrEmpty(VerifyMember.ClaimantBirth))
                {
                    strDob = VerifyMember.ClaimantBirth;
                }
                else
                {
                    strDob = VerifyMember.Birth;
                }


                using (var db = new ICMS2DbContext())
                {
                    if (!string.IsNullOrEmpty(strFirstName) &&
                        !string.IsNullOrEmpty(strLastName) &&
                        !string.IsNullOrEmpty(strDob))
                    {
                        DateTime OutDob = DateTime.MinValue;


                        if (DateTime.TryParse(strDob, out OutDob))
                        {
                            MembersToReturn = (from mem in db.DbmsMembers
                                               where mem.member_first_name == strFirstName
                                               && mem.member_last_name == strLastName
                                               && mem.member_birth == OutDob
                                               select mem).ToList();


                            if (MembersToReturn != null)
                            {
                                if (MembersToReturn.Count > 0)
                                {
                                    return MembersToReturn;
                                }
                            }
                        }
                    }
                }


                return MembersToReturn;
            }
            catch (Exception ex)
            {
                return MembersToReturn;
            }
        }

        private string FormatClaimDob_Egp(string Dob)
        {
            string ReturnDob = "";

            try
            {

                string strYear = "";
                string strMonth = "";
                string strDay = "";

                strYear = Dob.Substring(0, 4);
                strMonth = Dob.Substring(4, 2);
                strDay = Dob.Substring(6, 2);

                ReturnDob = strMonth + "/" + strDay + "/" + strYear;

                return ReturnDob;

            }
            catch(Exception ex)
            {
                return ReturnDob;
            }
        }

        private string FormatClaimDate_Egp(string Date)
        {
            string ReturnDob = "";

            try
            {
                if (!string.IsNullOrEmpty(Date))
                {
                    string strYear = "";
                    string strMonth = "";
                    string strDay = "";

                    strYear = Date.Substring(0, 4);
                    strMonth = Date.Substring(4, 2);
                    strDay = Date.Substring(6, 2);

                    ReturnDob = strMonth + "/" + strDay + "/" + strYear;
                }

                return ReturnDob;

            }
            catch (Exception ex)
            {
                return ReturnDob;
            }
        }





        private void SetAddMemberViewModel(ref AddMemberViewModel MemberInSystemToUpdate, EligibilityViewModel PotentialMemberBeingDownloaded)
        {

            try
            {
                //DEMOGRAPHIC
                MemberInSystemToUpdate.MemberFirstName = PotentialMemberBeingDownloaded.DepFirstName;
                MemberInSystemToUpdate.MemberLastName = PotentialMemberBeingDownloaded.DepLastName;
                MemberInSystemToUpdate.MemberMiddleName = PotentialMemberBeingDownloaded.DepMiddleName;
                MemberInSystemToUpdate.MemberSsn = PotentialMemberBeingDownloaded.DepSsn;
                MemberInSystemToUpdate.Gender = PotentialMemberBeingDownloaded.DepGender;
                MemberInSystemToUpdate.Netork = PotentialMemberBeingDownloaded.Network;


                if (string.IsNullOrEmpty(PotentialMemberBeingDownloaded.MemMedicarePrim) ||
                    PotentialMemberBeingDownloaded.MemMedicarePrim.Equals("NO"))
                {
                    MemberInSystemToUpdate.MedicarePrimary = 0;
                }
                else
                {
                    MemberInSystemToUpdate.MedicarePrimary = 1;
                }


                if (!string.IsNullOrEmpty(PotentialMemberBeingDownloaded.MedicareEffDate))
                {
                    if (!string.IsNullOrEmpty(PotentialMemberBeingDownloaded.MedicareEffDate.Trim()))
                    {
                        DateTime OutMedicareEffDate = DateTime.MinValue;


                        if (DateTime.TryParse(PotentialMemberBeingDownloaded.MedicareEffDate, out OutMedicareEffDate))
                        {
                            MemberInSystemToUpdate.MedicareEffDate = OutMedicareEffDate;
                        }
                    }
                }


                if (!string.IsNullOrEmpty(PotentialMemberBeingDownloaded.DepDob))
                {
                    if (!string.IsNullOrEmpty(PotentialMemberBeingDownloaded.DepDob.Trim()))
                    {
                        DateTime OutDob = DateTime.MinValue;


                        if (DateTime.TryParse(PotentialMemberBeingDownloaded.DepDob, out OutDob))
                        {
                            MemberInSystemToUpdate.MemberBirth = OutDob;
                        }
                    }
                }


                if (!string.IsNullOrEmpty(PotentialMemberBeingDownloaded.DepEffDate))
                {
                    if (!string.IsNullOrEmpty(PotentialMemberBeingDownloaded.DepEffDate.Trim()))
                    {
                        DateTime OutDepEffDate = DateTime.MinValue;


                        if (DateTime.TryParse(PotentialMemberBeingDownloaded.DepEffDate, out OutDepEffDate))
                        {
                            MemberInSystemToUpdate.EffectiveDate = OutDepEffDate;
                        }
                    }
                }


                if (!string.IsNullOrEmpty(PotentialMemberBeingDownloaded.DepTermDate))
                {
                    if (!string.IsNullOrEmpty(PotentialMemberBeingDownloaded.DepTermDate.Trim()))
                    {
                        DateTime OutDepTermDate = DateTime.MinValue;


                        if (DateTime.TryParse(PotentialMemberBeingDownloaded.DepTermDate, out OutDepTermDate))
                        {
                            MemberInSystemToUpdate.TerminationDate = OutDepTermDate;
                            MemberInSystemToUpdate.DisenrollReasonId = 14;
                        }
                    }
                }


                //ENROLLMENT...EGP recently changed ssn to their claims_id instead of GSFxxxxxxx numbers
                MemberInSystemToUpdate.ClaimsId = PotentialMemberBeingDownloaded.DepSsn;
                MemberInSystemToUpdate.ClaimsEnrollmentId = PotentialMemberBeingDownloaded.DepInsNumber;
                MemberInSystemToUpdate.Relationship = PotentialMemberBeingDownloaded.Relationship;


                //ADDRESS
                MemberInSystemToUpdate.Address1 = PotentialMemberBeingDownloaded.DepAddressLine1;
                MemberInSystemToUpdate.Address2 = PotentialMemberBeingDownloaded.DepAddressLine2;
                MemberInSystemToUpdate.City = PotentialMemberBeingDownloaded.DepCity;
                MemberInSystemToUpdate.StateAbbrev = PotentialMemberBeingDownloaded.DepState;
                MemberInSystemToUpdate.ZipCode = PotentialMemberBeingDownloaded.DepZipCode;


                //PHONE
                MemberInSystemToUpdate.EveningPhone = PotentialMemberBeingDownloaded.DepPhoneNumber;


                //SYSTEM
                MemberInSystemToUpdate.SystemUserId = PotentialMemberBeingDownloaded.SystemUserId;
            }
            catch (Exception ex)
            {

            }
        }





        private bool UpdateMember(AddMemberViewModel addmemvmToUpdate)
        {
            bool Updated = false;

            try
            {
                using (var db = new ICMS2DbContext())
                {

                    IcmsMember memToUpdate = (from mem in db.DbmsMembers
                                              where mem.member_id == new Guid(addmemvmToUpdate.MemberId)
                                              select mem
                                              ).SingleOrDefault();


                    if (memToUpdate != null)
                    {
                        memToUpdate.member_first_name = addmemvmToUpdate.MemberFirstName;
                        memToUpdate.member_last_name = addmemvmToUpdate.MemberLastName;
                        memToUpdate.member_middle_name = addmemvmToUpdate.MemberMiddleName;

                        if (!string.IsNullOrEmpty(addmemvmToUpdate.MemberSsn))
                        {
                            memToUpdate.member_ssn = addmemvmToUpdate.MemberSsn;
                        }

                        memToUpdate.gender_code = addmemvmToUpdate.Gender;
                        memToUpdate.network = addmemvmToUpdate.Netork;
                        memToUpdate.medicare_primary = addmemvmToUpdate.MedicarePrimary;
                        memToUpdate.relationship_id = (!string.IsNullOrEmpty(addmemvmToUpdate.Relationship)) ? Convert.ToInt32(addmemvmToUpdate.Relationship) : 1;


                        if (addmemvmToUpdate.MedicareEffDate.HasValue)
                        {
                            memToUpdate.medicare_effective_date = addmemvmToUpdate.MedicareEffDate;
                        }


                        if (addmemvmToUpdate.MemberBirth.HasValue)
                        {
                            memToUpdate.member_birth = addmemvmToUpdate.MemberBirth;
                        }


                        if (addmemvmToUpdate.EffectiveDate != DateTime.MinValue)
                        {
                            memToUpdate.member_effective_date = addmemvmToUpdate.EffectiveDate;
                        }


                        if (addmemvmToUpdate.TerminationDate != DateTime.MinValue)
                        {
                            memToUpdate.member_disenroll_date = addmemvmToUpdate.TerminationDate;
                            memToUpdate.disenroll_reason_id = addmemvmToUpdate.DisenrollReasonId;
                        }
                        else
                        {
                            memToUpdate.member_disenroll_date = null;
                            memToUpdate.disenroll_reason_id = null;
                        }


                        memToUpdate.member_updated = DateTime.Now;
                        memToUpdate.update_user_id = new Guid(addmemvmToUpdate.SystemUserId);
                        memToUpdate.last_update_user_id = new Guid(addmemvmToUpdate.SystemUserId);


                        db.Entry(memToUpdate).State = EntityState.Modified;
                        int updatesreturned = db.SaveChanges();


                        if (updatesreturned > 0)
                        {
                            Updated = true;
                        }
                    }
                }


                return Updated;
            }
            catch (Exception ex)
            {
                return Updated;
            }
        }

        private bool UpdateMemberEnrollment(AddMemberViewModel addmemvmToUpdate)
        {

            bool Updated = false;

            try
            {

                using (var db = new ICMS2DbContext())
                {

                    MemberEnrollment memenrollToUpdate = (from memenroll in db.DbmsMemberEnrollment
                                                          where memenroll.member_id == new Guid(addmemvmToUpdate.MemberId)
                                                          select memenroll
                                                         ).SingleOrDefault();

                    if (memenrollToUpdate != null)
                    {

                        //the employer has changed for the member so insert a record of it
                        if (!memenrollToUpdate.employer_id.Equals(addmemvmToUpdate.EmployerId))
                        {
                            InsertMemberEmployerChangeReference(memenrollToUpdate, addmemvmToUpdate.SystemUserId);
                        }


                        memenrollToUpdate.employer_id = addmemvmToUpdate.EmployerId;
                        memenrollToUpdate.client_id = addmemvmToUpdate.ClientId;
                        memenrollToUpdate.client_bu_id = addmemvmToUpdate.ClientBuId;
                        memenrollToUpdate.claims_id = addmemvmToUpdate.ClaimsId;
                        memenrollToUpdate.claims_enrollment_id = addmemvmToUpdate.ClaimsEnrollmentId;
                        memenrollToUpdate.DEP_Number = addmemvmToUpdate.Relationship;

                        if (addmemvmToUpdate.MedicareEffDate.HasValue)
                        {
                            memenrollToUpdate.member_effective_date = addmemvmToUpdate.EffectiveDate;
                        }

                        if (addmemvmToUpdate.TerminationDate != DateTime.MinValue)
                        {
                            memenrollToUpdate.member_disenroll_date = addmemvmToUpdate.TerminationDate;
                            memenrollToUpdate.disenroll_reason_id = addmemvmToUpdate.DisenrollReasonId;
                        }
                        else
                        {
                            memenrollToUpdate.member_disenroll_date = null;
                            memenrollToUpdate.disenroll_reason_id = null;
                        }

                        memenrollToUpdate.date_updated = DateTime.Now;
                        memenrollToUpdate.user_updated = new Guid(addmemvmToUpdate.SystemUserId);


                        db.Entry(memenrollToUpdate).State = EntityState.Modified;
                        int updatesreturned = db.SaveChanges();

                        if (updatesreturned.CompareTo(0) > 0)
                        {
                            Updated = true;
                        }

                    }

                }


                return Updated;

            }
            catch (Exception ex)
            {
                return Updated;
            }

        }

        private bool UpdateMemberAddress(AddMemberViewModel addmemvmToUpdate)
        {

            bool Updated = false;

            try
            {

                using (var db = new ICMS2DbContext())
                {

                    MemberAddress memaddToUpdate = (from memadd in db.DbmsMemberAddresses
                                                    where memadd.member_id == new Guid(addmemvmToUpdate.MemberId)
                                                    && memadd.address_type_id == 1 //home
                                                    select memadd
                                                    ).SingleOrDefault();

                    if (memaddToUpdate != null)
                    {

                        memaddToUpdate.address_line1 = addmemvmToUpdate.Address1;
                        memaddToUpdate.address_line2 = addmemvmToUpdate.Address2;
                        memaddToUpdate.state_abbrev = addmemvmToUpdate.StateAbbrev;
                        memaddToUpdate.city = addmemvmToUpdate.City;
                        memaddToUpdate.zip_code = addmemvmToUpdate.ZipCode;


                        db.Entry(memaddToUpdate).State = EntityState.Modified;
                        int updatesreturned = db.SaveChanges();

                        if (updatesreturned.CompareTo(0) > 0)
                        {
                            Updated = true;
                        }

                    }
                    else
                    {
                        if (InsertMemberAddress(addmemvmToUpdate))
                        {
                            Updated = true;
                        }
                    }

                }


                return Updated;

            }
            catch (Exception ex)
            {
                return Updated;
            }

        }

        private bool UpdateMemberPhone(AddMemberViewModel addmemvmToUpdate)
        {

            bool Updated = false;

            try
            {

                using (var db = new ICMS2DbContext())
                {

                    MemberPhone memphnToUpdate = (from memadd in db.DbmsMemberPhone
                                                  where memadd.member_id == new Guid(addmemvmToUpdate.MemberId)
                                                  && memadd.phone_type_id == 2 //evening phone
                                                  select memadd
                                                  ).SingleOrDefault();

                    if (memphnToUpdate != null)
                    {

                        memphnToUpdate.phone_number = addmemvmToUpdate.EveningPhone;


                        db.Entry(memphnToUpdate).State = EntityState.Modified;
                        int updatesreturned = db.SaveChanges();

                        if (updatesreturned.CompareTo(0) > 0)
                        {
                            Updated = true;
                        }

                    }
                    else
                    {
                        if (InsertMemberPhone(addmemvmToUpdate))
                        {
                            Updated = true;
                        }
                    }

                }


                return Updated;

            }
            catch (Exception ex)
            {
                return Updated;
            }

        }

        private void UpdateMemberTermDate(IcmsMember UpdateMember, EligibilityViewModel UpdatePotentialMember)
        {
            try
            {
                if (UpdateMember != null)
                {

                    if (!string.IsNullOrEmpty(UpdatePotentialMember.DepTermDate))
                    {
                        try
                        {
                            DateTime dtTermDate;

                            if (DateTime.TryParse(UpdatePotentialMember.DepTermDate, out dtTermDate))
                            {
                                using (var db = new ICMS2DbContext())
                                {
                                    UpdateMember.member_disenroll_date = dtTermDate;
                                    UpdateMember.disenroll_reason_id = 14;
                                    UpdateMember.member_updated = DateTime.Now;

                                    if (!string.IsNullOrEmpty(UpdatePotentialMember.SystemUserId))
                                    {
                                        UpdateMember.update_user_id = new Guid(UpdatePotentialMember.SystemUserId);
                                        UpdateMember.last_update_user_id = new Guid(UpdatePotentialMember.SystemUserId);
                                    }

                                    db.Entry(UpdateMember).State = EntityState.Modified;
                                    db.SaveChanges();
                                }
                            }
                        }
                        catch(Exception exDate)
                        {

                        }
                    }
                }
            }
            catch(Exception ex)
            {

            }
        }

        private void UpdateMemberEnrollmentTermDate(IcmsMember UpdateMember, EligibilityViewModel UpdatePotentialMember)
        {
            try
            {
                if (UpdateMember != null)
                {

                    if (!string.IsNullOrEmpty(UpdatePotentialMember.DepTermDate))
                    {
                        try
                        {
                            DateTime dtTermDate;

                            if (DateTime.TryParse(UpdatePotentialMember.DepTermDate, out dtTermDate))
                            {
                                using (var db = new ICMS2DbContext())
                                {
                                    Guid guidMemberId = UpdateMember.member_id;

                                    MemberEnrollment memenrollToUpdate = (from memenroll in db.DbmsMemberEnrollment
                                                                          where memenroll.member_id == guidMemberId
                                                                          select memenroll).SingleOrDefault();

                                    if (memenrollToUpdate != null)
                                    {
                                        memenrollToUpdate.member_disenroll_date = dtTermDate;
                                        memenrollToUpdate.disenroll_reason_id = 14;
                                        memenrollToUpdate.date_updated = DateTime.Now;

                                        if (!string.IsNullOrEmpty(UpdatePotentialMember.SystemUserId))
                                        {
                                            memenrollToUpdate.user_updated = new Guid(UpdatePotentialMember.SystemUserId);
                                        }

                                        db.Entry(memenrollToUpdate).State = EntityState.Modified;
                                        db.SaveChanges();
                                    }
                                }
                            }

                        }
                        catch (Exception exDate)
                        {

                        }
                    }
                }
            }
            catch (Exception ex)
            {

            }
        }


        private bool InsertMember(AddMemberViewModel addmemvmToInsert)
        {

            bool Inserted = false;

            try
            {

                MemberRepository memRepo = new MemberRepository();

                if (memRepo.InsertMember(addmemvmToInsert))
                {
                    if (!string.IsNullOrEmpty(addmemvmToInsert.MemberId))
                    {
                        Inserted = true;
                    }
                }


                return Inserted;

            }
            catch(Exception ex)
            {
                return Inserted;
            }

        }

        private bool InsertMemberEnrollment(AddMemberViewModel addmemvmToInsert)
        {

            bool Inserted = false;

            try
            {

                MemberRepository memRepo = new MemberRepository();

                if (memRepo.InsertMemberEnrollment(addmemvmToInsert))
                {
                    Inserted = true;
                }


                return Inserted;

            }
            catch (Exception ex)
            {
                return Inserted;
            }

        }

        private bool InsertMemberAddress(AddMemberViewModel addmemvmToInsert)
        {

            bool Inserted = false;

            try
            {

                MemberRepository memRepo = new MemberRepository();

                if (memRepo.InsertMemberAddress(addmemvmToInsert))
                {
                    Inserted = true;
                }


                return Inserted;

            }
            catch (Exception ex)
            {
                return Inserted;
            }

        }

        private bool InsertMemberPhone(AddMemberViewModel addmemvmToInsert)
        {

            bool Inserted = false;

            try
            {

                MemberRepository memRepo = new MemberRepository();

                if (memRepo.InsertMemberPhone(addmemvmToInsert))
                {
                    Inserted = true;
                }


                return Inserted;

            }
            catch (Exception ex)
            {
                return Inserted;
            }

        }

        private void InsertMemberEmployerChangeReference(MemberEnrollment memenrollReference, string SystemUserId)
        {

            try
            {

                MemberUpdateReference memuptrefToAdd = new MemberUpdateReference();

                memuptrefToAdd.member_id = memenrollReference.member_id;
                memuptrefToAdd.original_employer_id = memenrollReference.employer_id;
                memuptrefToAdd.original_client_id = memenrollReference.client_id;
                memuptrefToAdd.original_client_bu_id = memenrollReference.client_bu_id;
                memuptrefToAdd.creation_date = DateTime.Now;
                memuptrefToAdd.creation_user_id = new Guid(SystemUserId);


                using (var db = new ICMS2DbContext())
                {

                    //add the review to the utilization reviews context
                    db.DbmsMemberUpdateReference.Add(memuptrefToAdd);

                    db.SaveChanges();

                }

            }
            catch (Exception ex)
            {

            }

        }







        public bool ShowDownloadFileFtp(ref DownloadsViewModel dwnldsvmToShow)
        {

            bool Shown = false;

            try
            {
                if (dwnldsvmToShow.RptDownloadId > 0)
                {

                    if (dwnldsvmToShow.DownloadItem.rpt_download_id.CompareTo(0) == 0)
                    {
                        //get a reference to the ReportDownloadAdmin model
                        dwnldsvmToShow.DownloadItem = GetReportDownloadAdminModel(dwnldsvmToShow.RptDownloadId);
                    }


                    if (dwnldsvmToShow.DownloadItem.rpt_download_id.CompareTo(0) > 0)
                    {

                        if (!string.IsNullOrEmpty(dwnldsvmToShow.DownloadItem.ftp_actual_directory) &&
                            !string.IsNullOrEmpty(dwnldsvmToShow.DownloadItem.dts_package_filename_to_use))
                        {

                            dwnldsvmToShow.FilePath = dwnldsvmToShow.DownloadItem.ftp_actual_directory;
                            dwnldsvmToShow.FileName = dwnldsvmToShow.DownloadItem.dts_package_filename_to_use;
                            dwnldsvmToShow.FtpUserName = dwnldsvmToShow.DownloadItem.UserName;
                            dwnldsvmToShow.FtpPswd = dwnldsvmToShow.DownloadItem.Password;

                            Shown = true;

                        }

                    }

                }

                return Shown;
            }
            catch(Exception ex)
            {
                return Shown;
            }

        }







        private bool AutoMergeDuplicateMembers(DownloadsViewModel AutoMergeItems)
        {
            bool AutoMerged = false;
            int Count = 1;

            try
            {
                if (AutoMergeItems.DuplicateMembersToMerge.Count > 0)
                {

                    if (AutoMergeItems.DownloadItem.rpt_download_id.CompareTo(0) == 0)
                    {
                        AutoMergeItems.DownloadItem = GetReportDownloadAdminModel(AutoMergeItems.RptDownloadId);
                    }


                    if (AutoMergeItems.DuplicateMembersToMerge != null)
                    {
                        if (AutoMergeItems.DuplicateMembersToMerge.Count > 0)
                        {
                            Guid SystemUserId = Guid.Empty;

                            if (!string.IsNullOrEmpty(AutoMergeItems.DownloadingUserId))
                            {
                                SystemUserId = new Guid(AutoMergeItems.DownloadingUserId);
                            }
                            else
                            {
                                SystemUserId = new Guid("8C4AA16B-75FE-11D3-A7EE-00500499C350");
                            }


                            foreach (EligibilityViewModel DuplicateMember in AutoMergeItems.DuplicateMembersToMerge)
                            {
                                bool Merged = false;

                                if (MergeDuplicateMember(DuplicateMember, SystemUserId))
                                {
                                    Merged = true;
                                }

                                if (!AutoMerged)
                                {
                                    if (Merged)
                                    {
                                        AutoMerged = true;
                                    }
                                }

                                Count++;
                            }
                        }
                    }
                }

                return AutoMerged;

            }
            catch(Exception ex)
            {
                return AutoMerged;
            }
        }

        public bool MergeDuplicateMember(EligibilityViewModel MemberToMerge, Guid MergingUserId)
        {
            bool Merged = false;

            try
            {
                Guid CorrectMemberId = Guid.Empty;
                List<Guid> IncorrectMemberIds = new List<Guid>();

                if (!string.IsNullOrEmpty(MemberToMerge.DepCity) && !string.IsNullOrEmpty(MemberToMerge.MemId))
                {
                    List<IcmsMember> lstMembersInSystem = new List<IcmsMember>();

                    lstMembersInSystem = GetEligibilityMembers(ref MemberToMerge);


                    if (lstMembersInSystem != null)
                    {
                        if (lstMembersInSystem.Count > 0)
                        {
                            foreach(IcmsMember member in lstMembersInSystem)
                            {
                                //see if the member is a "correct" member (has lcm report, notes, or referrals)
                                if (CorrectMemberId == Guid.Empty)
                                {
                                    if (UseThisMemberAsTheCorrectAutoMergeMember(member))
                                    {
                                        CorrectMemberId = member.member_id;
                                    }
                                }


                                if (CorrectMemberId != Guid.Empty)
                                {
                                    //if there's a "correct" member, check it against the current member being validated
                                    if (!CorrectMemberId.Equals(member.member_id))
                                    {
                                        //if they don't match, add the member to the "incorrect" member list
                                        IncorrectMemberIds.Add(member.member_id);
                                    }
                                }
                                else
                                {
                                    //because the member wasn't validated as the "correct" member, add the member to the "incorrect" member list
                                    IncorrectMemberIds.Add(member.member_id);
                                }
                            }


                            if (CorrectMemberId != Guid.Empty && IncorrectMemberIds.Count > 0)
                            {
                                if (MergeCorrectMemberDataToIncorrectMemberData(CorrectMemberId, IncorrectMemberIds, MergingUserId))
                                {
                                    Merged = true;
                                }
                                else
                                {

                                }
                            }
                            else
                            {
                                //none of the members has any data (lcm reports, notes, referrals) so make the most recent member (the one with the most recent creation date)
                                //the CorrectMemberId and the rest of the members as part of the IncorrectMemberIds
                                if (CorrectMemberId == Guid.Empty)
                                {
                                    CorrectMemberId = lstMembersInSystem.ElementAt(0).member_id;

                                    foreach (IcmsMember IncorrectMember in lstMembersInSystem)
                                    {
                                        if (IncorrectMember.member_id != CorrectMemberId)
                                        {
                                            IncorrectMemberIds.Add(IncorrectMember.member_id);
                                        }
                                    }

                                    if (CorrectMemberId != Guid.Empty && IncorrectMemberIds.Count > 0)
                                    {
                                        if (MergeCorrectMemberDataToIncorrectMemberData(CorrectMemberId, IncorrectMemberIds, MergingUserId))
                                        {
                                            Merged = true;
                                        }
                                        else
                                        {

                                        }
                                    }
                                }
                            }
                        }
                    }
                }

                return Merged;
            }
            catch(Exception ex)
            {
                return Merged;
            }
        }

        private bool UseThisMemberAsTheCorrectAutoMergeMember(IcmsMember MemberToVerifyAsCorrect)
        {
            bool MemberToReturn = false;
            bool HasVerifiedData = false;

            try
            {
                if (MemberToVerifyAsCorrect.member_id != null)
                {
                    if (!string.IsNullOrEmpty(MemberToVerifyAsCorrect.member_id.ToString()))
                    {
                        using (var db = new ICMS2DbContext())
                        {
                            HasVerifiedData = MemberHasLcmReports(MemberToVerifyAsCorrect);

                            if (!HasVerifiedData)
                            {
                                HasVerifiedData = MemberHasNotes(MemberToVerifyAsCorrect);

                                if (!HasVerifiedData)
                                {
                                    HasVerifiedData = MemberHasReferrals(MemberToVerifyAsCorrect);

                                    if (!HasVerifiedData)
                                    {

                                    }
                                    else
                                    {
                                        MemberToReturn = true;
                                    }
                                }
                                else
                                {
                                    MemberToReturn = true;
                                }
                            }
                            else
                            {
                                MemberToReturn = true;
                            }
                        }
                    }
                }

                return MemberToReturn;

            }
            catch(Exception ex)
            {
                return MemberToReturn;
            }
        }

        private bool MemberHasReferrals(IcmsMember MemberToVerifyAsCorrect)
        {
            bool HasData = false;

            try
            {
                string ReferralNumber = "";
                Guid MemberId = MemberToVerifyAsCorrect.member_id;

                using (var db = new ICMS2DbContext())
                {
                    ReferralNumber = (from memrefs in db.DbmsMemberReferrals
                                      where memrefs.member_id == MemberId
                                      select memrefs.referral_number).FirstOrDefault();

                    if (!string.IsNullOrEmpty(ReferralNumber))
                    {
                        HasData = true;
                    }
                }

                return HasData;

            }
            catch(Exception ex)
            {
                return HasData;
            }
        }

        private bool MemberHasLcmReports(IcmsMember MemberToVerifyAsCorrect)
        {
            bool HasData = false;

            try
            {
                int LcmReportId = 0;
                Guid MemberId = MemberToVerifyAsCorrect.member_id;

                using (var db = new ICMS2DbContext())
                {
                    //check for comprehensive reports first
                    LcmReportId = (from foluprpts in db.DbmsMemberLcmFollowup
                                   join initrpts in db.DbmsMemberLcmInitial
                                   on foluprpts.lcn_case_number equals initrpts.lcn_case_number
                                   where initrpts.member_id == MemberId
                                   select foluprpts.lcm_followup_id).FirstOrDefault();

                    if (LcmReportId > 0)
                    {
                        HasData = true;
                    }
                    else
                    {
                        //next check for initial reports
                        LcmReportId = (from initrpts in db.DbmsMemberLcmInitial
                                       where initrpts.member_id == MemberId
                                       select initrpts.lcn_case_number).FirstOrDefault();

                        if (LcmReportId > 0)
                        {
                            HasData = true;
                        }
                    }
                }

                return HasData;

            }
            catch (Exception ex)
            {
                return HasData;
            }
        }

        private bool MemberHasNotes(IcmsMember MemberToVerifyAsCorrect)
        {
            bool HasData = false;

            try
            {
                DateTime RecordDate;
                Guid MemberId = MemberToVerifyAsCorrect.member_id;

                using (var db = new ICMS2DbContext())
                {
                    RecordDate = (from memnotes in db.DbmsMemberNotes
                                  where memnotes.member_id == MemberId
                                  select memnotes.record_date).FirstOrDefault();

                    try
                    {
                        DateTime DateOut;

                        if (DateTime.TryParse(RecordDate.ToString(), out DateOut))
                        {
                            HasData = true;
                        }
                    }
                    catch(Exception exDate)
                    {
                        return HasData;
                    }
                }

                return HasData;

            }
            catch (Exception ex)
            {
                return HasData;
            }
        }

        private bool MergeCorrectMemberDataToIncorrectMemberData(Guid CorrectMemberId, List<Guid> IncorrectMemberIds, Guid MergingUserId)
        {
            bool Merged = false;
            int Count = 1;

            try
            {
                foreach(Guid IncorrectMember in IncorrectMemberIds)
                {
                    RemoveIncorrectMemberBackup(IncorrectMember);

                    if (BackupIncorrectMember(IncorrectMember))
                    {
                        if (MergeIncorrectMember(CorrectMemberId, IncorrectMember, MergingUserId))
                        {
                            Merged = true;
                            RemoveIncorrectMemberBackup(IncorrectMember);
                        }
                    }

                    Count++;
                }

                return Merged;

            }
            catch(Exception ex)
            {
                return Merged;
            }
        }



        private bool BackupIncorrectMember(Guid IncorrectMemberId)
        {
            bool Backedup = false;

            try
            {
                bool ReferralCodesBackedUp =BackupReferralCodes(IncorrectMemberId);
                bool ReferralInterQualBackedUp =BackupReferralInterQualData(IncorrectMemberId);
                bool ReferralLettersBackedUp =BackupReferralLetters(IncorrectMemberId);
                bool ReferralsBackedUp =BackupReferrals(IncorrectMemberId);
                bool ReferralMissingReferToBackedUp =BackupReferralMissingReferTo(IncorrectMemberId);
                bool ReferralWorkflowsBackedUp =BackupReferralWorkflow(IncorrectMemberId);

                bool MemberAddressDmAlternatesBackedUp =BackupMemberAddressDmAlternate(IncorrectMemberId);
                bool MemberAddressesBackedUp =BackupMemberAddresses(IncorrectMemberId);
                bool MemberCareCoordinationCallBackedUp = BackupMemberCareCoordinationCall(IncorrectMemberId);
                bool MemberCareCoordinationCallSavingsBackedUp = BackupMemberCareCoordinationCallSavingsSavings(IncorrectMemberId);
                bool MemberClaimDiagnosisBackedUp =BackupMemberClaimDiagnosis(IncorrectMemberId);
                bool MemberConditionAcuitiesBackedUp =BackupMemberConditionAcuities(IncorrectMemberId);
                bool MemberCustomerServiceAlertsBackedUp =BackupMemberCustomerServiceAlerts(IncorrectMemberId);
                bool MemberFaxesBackedUp =BackupMemberFaxes(IncorrectMemberId);
                bool MemberHealthPlanReferencesBackedUp =BackupMemberHealthPlanReferences(IncorrectMemberId);
                bool MemberLabsBackedUp =BackupMemberLabs(IncorrectMemberId);
                bool MemberLcmFollowupNotesBackedUp =BackupMemberLcmFollowupNotes(IncorrectMemberId);
                bool MemberMdReviewReferencesBackedUp =BackupMemberMdReviewReference(IncorrectMemberId);
                bool MemberMedAllergiesBackedUp =BackupMemberMedAllergies(IncorrectMemberId);
                bool MemberMedsBackedUp =BackupMemberMeds(IncorrectMemberId);
                bool MemberMedsHighDollarTasksBackedUp =BackupMemberMedsHighDollarTasks(IncorrectMemberId);
                bool MemberMedsHistoriesBackedUp =BackupMemberMedsHistories(IncorrectMemberId);
                bool MemberMedsPharmacyFeedsBackedUp =BackupMemberMedsPharmacyFeeds(IncorrectMemberId);
                bool MemberNoteAttachmentBackedUp =BackupMemberNoteAttachments(IncorrectMemberId);
                bool MemberNotesBackedUp =BackupMemberNotes(IncorrectMemberId);
                bool MemberNotesSummariesBackedUp =BackupMemberNotesSummaries(IncorrectMemberId);
                bool MemberPcpsBackedUp =BackupMemberPcps(IncorrectMemberId);
                bool MemberPhonesBackedUp = BackupMemberPhones(IncorrectMemberId);
                bool MemberPicturesBackedUp =BackupMemberPictures(IncorrectMemberId);
                bool MemberProfilePicturesBackedUp =BackupMemberProfilePictures(IncorrectMemberId);
                bool MemberProgramsBackedUp =BackupMemberPrograms(IncorrectMemberId);
                bool MemberQualityCareNotesBackedUp =BackupMemberQualityCareNotes(IncorrectMemberId);
                bool MemberReferralMedicinesBackedUp =BackupMemberReferralMedicines(IncorrectMemberId);
                bool MemberReferralQocsBackedUp =BackupMemberReferralQocs(IncorrectMemberId);
                bool MemberReferralUpdatesWorkflowsBackedUp =BackupMemberReferralUpdatesWorkflow(IncorrectMemberId);
                bool MemberRelativeDiseaseHistoriesBackedUp =BackupMemberRelativeDiseaseHistories(IncorrectMemberId);
                bool MemberRenalTasksBackedUp =BackupMemberRenalTasks(IncorrectMemberId);
                bool MemberReturnedLettersBackedUp =BackupMemberReturnedLetters(IncorrectMemberId);
                bool MemberSignatureFilesBackedUp =BackupMemberSignatureFiles(IncorrectMemberId);
                bool MemberStratLevelBackedUp =BackupMemberStratLevel(IncorrectMemberId);
                bool MemberTasksBackedUp =BackupMemberTasks(IncorrectMemberId);
                bool MemberToolProgramStatusesBackedUp =BackupMemberToolProgramStaus(IncorrectMemberId);
                bool MemberUpdateReferencesBackedUp =BackupMemberUpdateReferences(IncorrectMemberId);
                bool MemberVitalsBackedUp =BackupMemberVitals(IncorrectMemberId);

                bool UtilizationDayNotesToMerge =BackupUtilizationDayNotes(IncorrectMemberId);
                bool UtilizationDaysBackedUp =BackupUtilizationDays(IncorrectMemberId);
                bool UtilizationDischargeNotesBackedUp =BackupUtilizationDischargeNotes(IncorrectMemberId);
                bool UtilizationReviewsBackedUp =BackupUtilizationReviews(IncorrectMemberId);
                bool UtilizationSavingsBackedUp =BackupUtilizationSavings(IncorrectMemberId);

                bool AccountsReceivablePaymentsBackedUp =BackupAcountsReceivablePayments(IncorrectMemberId);
                bool AdmissionCareplanCountsBackedUp =BackupAdmissionCareplanCounts(IncorrectMemberId);
                bool AdmissionsBackedUp =BackupAdmissions(IncorrectMemberId);
                bool AuthorizationUpdatesBackedUp =BackupAuthorizationUpdates(IncorrectMemberId);
                bool BillingUpdateHistoryLogsBackedUp =BackupBillingUpdateHistoryLog(IncorrectMemberId);
                bool BillingBackupsBackedUp =BackupBillingBackups(IncorrectMemberId);
                bool CareCoordinationCallsBackedUp =BackupMemberCareCoordinationCalls(IncorrectMemberId);
                bool CarePlanNotesAttachmentsBackedUp =BackupCarePlanNotesAttachments(IncorrectMemberId);
                bool CaseOwnersBackedUp =BackupCaseOwners(IncorrectMemberId);
                bool ClinicalRequestHistoriesBackedUp =BackupClinicalRequestHistories(IncorrectMemberId);
                bool ClinicalRequestProvidersBackedUp =BackupClinicalRequestProviders(IncorrectMemberId);
                bool CrBillingWorktablesBackedUp =BackupCrBillingWorktables(IncorrectMemberId);
                bool CmMemberNotesBackedUp =BackupCmMemberNotes(IncorrectMemberId);
                bool ClinicalReviewBillsBackedUp =BackupClinicalReviewBills(IncorrectMemberId);
                bool CodeRemovalItemsBackedUp =BackupCodeRemovalItems(IncorrectMemberId);
                bool DentalVisitsBackedUp = BackUpDentalVisits(IncorrectMemberId);
                bool DepartmentBedVacanciesBackedUp = BackUpDepartmentBedVacancies(IncorrectMemberId);
                bool DependentMemberUpdateReferencesBackedUp =BackupDependentMemberUpdateReferences(IncorrectMemberId);
                bool DiseaseManagementNotesAttachmentsBackedUp =BackupDiseaseManagementNotesAttachments(IncorrectMemberId);
                bool DmMemberSavingsBackedUp =BackupDmMemberSavings(IncorrectMemberId);
                bool EmailsOutboundsBackedUp =BackupEmailOutbounds(IncorrectMemberId);
                bool EpisodesOfCareBackedUp =BackupEpisodesOfCares(IncorrectMemberId);
                bool InboundFaxReferralRemovalsBackedUp =BackupInboundFaxReferralRemovals(IncorrectMemberId);
                bool InboundVoicemailsBackedUp =BackupInboundVoicemails(IncorrectMemberId);
                bool LcmBillingWorktablesBackedUp =BackupLcmBillingWorktables(IncorrectMemberId);
                bool LcmInfoBackedUp =BackupLcmInfo(IncorrectMemberId);
                bool LcmReportNeededForBillingTasksBackedUp =BackupLcmReportNeededForBillingTasks(IncorrectMemberId);
                bool LcmReportQaNotesBackedUp =BackupLcmReportQaNotes(IncorrectMemberId);
                bool LcmReportQaTasksBackedUp =BackupLcmReportQaTasks(IncorrectMemberId);
                bool LcmReportQaNotesTaskReferencesBackedUp =BackupLcmReportQaNotesTaskReferences(IncorrectMemberId);
                bool LcnReportFaxesBackedUp =BackupLcnReportFaxes(IncorrectMemberId);
                bool LetterReportFaxesBackedUp =BackupLetterReportFaxes(IncorrectMemberId);
                bool MdReviewDeterminationsBackedUp =BackupMdReviewDeterminations(IncorrectMemberId);
                bool MdReviewFollowupsBackedUp =BackupMdReviewFollowups(IncorrectMemberId);
                bool MdReviewQuestionsBackedUp =BackupMdReviewQuestions(IncorrectMemberId);
                bool MdReviewRequestsBackedUp =BackupMdReviewRequests(IncorrectMemberId);
                bool MonthlyLcmManagementQasBackedUp =BackupMonthlyLcmManagementQas(IncorrectMemberId);
                bool MonthlyUtilizationManagementsBackedUp =BackupMonthlyUtilizationManagements(IncorrectMemberId);
                bool StdBillingWorktablesBackedUp =BackupStdBillingWorktables(IncorrectMemberId);
                bool SuspendCaseToTaskReferencesBackedUp =BackupSuspendCaseToTaskReferences(IncorrectMemberId);
                bool SuspendedNotesBackedUp =BackupSuspendedNotes(IncorrectMemberId);
                bool SuspendedNotesOverrideBackedUp =BackupSuspendedNotesOverrides(IncorrectMemberId);
                bool TelephoneNotesAttachmentsBackedUp =BackupTelephoneNotesAttachments(IncorrectMemberId);
                bool TransitionalCareReferencesBackedUp =BackupTransitionalCareReferences(IncorrectMemberId);
                bool UmAssignedToTasksBackedUp =BackupUmAssignedToTasks(IncorrectMemberId);
                bool UmAssignedToTaskTouchedReferencesBackedUp =BackupUmAssignedToTaskTouchedReferences(IncorrectMemberId);
                bool UmAutoApprovedDiagnosisTasksBackedUp =BackupUmAutoApprovedDiagnosisTasks(IncorrectMemberId);
                bool UtilizationReviewNoteTasksBackedUp =BackupUtilizationReviewNoteTasks(IncorrectMemberId);
                bool WcBillingWorktablesBackedUp =BackupWcBillingWorktables(IncorrectMemberId);
                bool WebClientNoteTasksBackedUp =BackupWebClientNoteTasks(IncorrectMemberId);
                bool WebOnlinePrecertTasksBackedUp =BackupWebOnlinePrecertTasks(IncorrectMemberId);

                if (ReferralCodesBackedUp && ReferralInterQualBackedUp && ReferralLettersBackedUp && ReferralsBackedUp &&
                    ReferralMissingReferToBackedUp && ReferralWorkflowsBackedUp && MemberAddressDmAlternatesBackedUp &&
                    MemberAddressesBackedUp && MemberCareCoordinationCallBackedUp && MemberCareCoordinationCallSavingsBackedUp && MemberClaimDiagnosisBackedUp &&
                    MemberConditionAcuitiesBackedUp && MemberCustomerServiceAlertsBackedUp && MemberFaxesBackedUp &&
                    MemberHealthPlanReferencesBackedUp && MemberLabsBackedUp && MemberLcmFollowupNotesBackedUp && 
                    MemberMdReviewReferencesBackedUp && MemberMedAllergiesBackedUp && MemberMedsBackedUp && 
                    MemberMedsHighDollarTasksBackedUp && MemberMedsHistoriesBackedUp && MemberMedsPharmacyFeedsBackedUp && 
                    MemberNoteAttachmentBackedUp && MemberNotesBackedUp && MemberNotesSummariesBackedUp && MemberPcpsBackedUp && 
                    MemberPhonesBackedUp && MemberPicturesBackedUp && MemberProfilePicturesBackedUp && MemberProgramsBackedUp && 
                    MemberQualityCareNotesBackedUp && MemberReferralMedicinesBackedUp && MemberReferralQocsBackedUp && 
                    MemberReferralUpdatesWorkflowsBackedUp && MemberRelativeDiseaseHistoriesBackedUp && MemberRenalTasksBackedUp && 
                    MemberReturnedLettersBackedUp && MemberSignatureFilesBackedUp && MemberStratLevelBackedUp && MemberTasksBackedUp && 
                    MemberToolProgramStatusesBackedUp && MemberUpdateReferencesBackedUp && MemberVitalsBackedUp && 
                    UtilizationDayNotesToMerge && UtilizationDaysBackedUp && UtilizationDischargeNotesBackedUp && UtilizationReviewsBackedUp && 
                    UtilizationSavingsBackedUp && AccountsReceivablePaymentsBackedUp && AdmissionCareplanCountsBackedUp && AdmissionsBackedUp && 
                    AuthorizationUpdatesBackedUp && BillingUpdateHistoryLogsBackedUp && BillingBackupsBackedUp && CareCoordinationCallsBackedUp && 
                    CarePlanNotesAttachmentsBackedUp && CaseOwnersBackedUp && ClinicalRequestHistoriesBackedUp && ClinicalRequestProvidersBackedUp && 
                    CrBillingWorktablesBackedUp && CmMemberNotesBackedUp && ClinicalReviewBillsBackedUp && CodeRemovalItemsBackedUp && 
                    DentalVisitsBackedUp && DepartmentBedVacanciesBackedUp && DependentMemberUpdateReferencesBackedUp && 
                    DiseaseManagementNotesAttachmentsBackedUp && DmMemberSavingsBackedUp && EmailsOutboundsBackedUp && EpisodesOfCareBackedUp && 
                    InboundFaxReferralRemovalsBackedUp && InboundVoicemailsBackedUp && LcmBillingWorktablesBackedUp && LcmInfoBackedUp && 
                    LcmReportNeededForBillingTasksBackedUp && LcmReportQaNotesBackedUp && LcmReportQaTasksBackedUp && LcmReportQaNotesTaskReferencesBackedUp && 
                    LcnReportFaxesBackedUp && LetterReportFaxesBackedUp && MdReviewDeterminationsBackedUp && MdReviewFollowupsBackedUp && 
                    MdReviewQuestionsBackedUp && MdReviewRequestsBackedUp && MonthlyLcmManagementQasBackedUp && MonthlyUtilizationManagementsBackedUp && 
                    StdBillingWorktablesBackedUp && SuspendCaseToTaskReferencesBackedUp && SuspendedNotesBackedUp && SuspendedNotesOverrideBackedUp && 
                    TelephoneNotesAttachmentsBackedUp && TransitionalCareReferencesBackedUp && UmAssignedToTasksBackedUp && 
                    UmAssignedToTaskTouchedReferencesBackedUp && UmAutoApprovedDiagnosisTasksBackedUp && UtilizationReviewNoteTasksBackedUp && 
                    WcBillingWorktablesBackedUp && WebClientNoteTasksBackedUp && WebOnlinePrecertTasksBackedUp)
                {
                    Backedup = true;
                }
                else
                {

                }

                return Backedup;
            }
            catch(Exception ex)
            {
                return Backedup;
            }
        }


        private bool BackupReferralCodes(Guid IncorrectMemberId)
        {
            bool BackedUp = false;

            try
            {
                bool CptsBackedUp = false;
                bool IcdsBackedup = false;
                bool HcpcsBackedUp = false;

                List<rMemberReferralCpts> IncorrectCptCodes = new List<rMemberReferralCpts>();
                List<rMemberReferralDiags> IncorrectIcdCodes = new List<rMemberReferralDiags>();
                List<rMemberReferralHcpcs> IncorrectHcpcsCodes = new List<rMemberReferralHcpcs>();

                using (var db = new ICMS2DbContext())
                {
                    //back up Referral CPT codes
                    IncorrectCptCodes = (from inccpts in db.DbmsMemberReferralCpts
                                         where inccpts.member_id == IncorrectMemberId
                                         select inccpts).ToList();

                    if (IncorrectCptCodes != null)
                    {
                        if (IncorrectCptCodes.Count > 0)
                        {
                            foreach (rMemberReferralCpts CptToMerge in IncorrectCptCodes)
                            {
                                MergedrMemberReferralCpts MergedCpt = new MergedrMemberReferralCpts();
                                MergedCpt.cpt_code = CptToMerge.cpt_code;
                                MergedCpt.creation_date = CptToMerge.creation_date;
                                MergedCpt.creation_user_id = CptToMerge.creation_user_id;
                                MergedCpt.decision_id = CptToMerge.decision_id;
                                MergedCpt.entered_via_web = CptToMerge.entered_via_web;
                                MergedCpt.estimated_amount = CptToMerge.estimated_amount;
                                MergedCpt.id = CptToMerge.id;
                                MergedCpt.is_cpt_15 = CptToMerge.is_cpt_15;
                                MergedCpt.lastupdate_user_id = CptToMerge.lastupdate_user_id;
                                MergedCpt.last_update_date = CptToMerge.last_update_date;
                                MergedCpt.line_number = CptToMerge.line_number;
                                MergedCpt.member_id = CptToMerge.member_id;
                                MergedCpt.modifier1 = CptToMerge.modifier1;
                                MergedCpt.referral_number = CptToMerge.referral_number;
                                MergedCpt.system_role_r_service_category_types_id = CptToMerge.system_role_r_service_category_types_id;
                                MergedCpt.unit = CptToMerge.unit;

                                db.DbmsMergedMemberReferralCpts.Add(MergedCpt);
                                int MergedCptItemAdded = db.SaveChanges();

                                if (!CptsBackedUp)
                                {
                                    if (MergedCptItemAdded > 0)
                                    {
                                        CptsBackedUp = true;
                                    }
                                }
                            }
                        }
                        else
                        {
                            CptsBackedUp = true;
                        }
                    }
                    else
                    {
                        CptsBackedUp = true;
                    }

                }


                using (var dbicd = new ICMS2DbContext())
                {
                    //merge Referral ICD codes
                    IncorrectIcdCodes = (from incicd in dbicd.DbmsMemberReferralDiags
                                         where incicd.member_id == IncorrectMemberId
                                         select incicd).ToList();

                    if (IncorrectIcdCodes != null)
                    {
                        if (IncorrectIcdCodes.Count > 0)
                        {
                            foreach (rMemberReferralDiags IcdToMerge in IncorrectIcdCodes)
                            {
                                MergedrMemberReferralDiags MergedIcd = new MergedrMemberReferralDiags();
                                MergedIcd.creation_date = IcdToMerge.creation_date;
                                MergedIcd.creation_user_id = IcdToMerge.creation_user_id;
                                MergedIcd.diagnosis_date = IcdToMerge.diagnosis_date;
                                MergedIcd.diagnosis_or_procedure_code = IcdToMerge.diagnosis_or_procedure_code;
                                MergedIcd.entered_via_web = IcdToMerge.entered_via_web;
                                MergedIcd.estimated_amount = IcdToMerge.estimated_amount;
                                MergedIcd.id = IcdToMerge.id;
                                MergedIcd.is_icd_10 = IcdToMerge.is_icd_10;
                                MergedIcd.lastupdate_user_id = IcdToMerge.lastupdate_user_id;
                                MergedIcd.last_update_date = IcdToMerge.last_update_date;
                                MergedIcd.member_id = IcdToMerge.member_id;
                                MergedIcd.new_diagnosis = IcdToMerge.new_diagnosis;
                                MergedIcd.primary_diagnosis = IcdToMerge.primary_diagnosis;
                                MergedIcd.referral_number = IcdToMerge.referral_number;
                                MergedIcd.surgical_procedure = IcdToMerge.surgical_procedure;

                                dbicd.DbmsMergedMemberReferralDiags.Add(MergedIcd);
                                int MergedIcdItemAdded = dbicd.SaveChanges();

                                if (!IcdsBackedup)
                                {
                                    if (MergedIcdItemAdded > 0)
                                    {
                                        IcdsBackedup = true;
                                    }
                                }
                            }
                        }
                        else
                        {
                            IcdsBackedup = true;
                        }
                    }
                    else
                    {
                        IcdsBackedup = true;
                    }

                }


                using (var dbhcpcs = new ICMS2DbContext())
                { 
                    //merge Referral HCPCS codes
                    IncorrectHcpcsCodes = (from inchcpcs in dbhcpcs.DbmsMemberReferralHcpcs
                                           where inchcpcs.member_id == IncorrectMemberId
                                           select inchcpcs).ToList();

                    if (IncorrectHcpcsCodes != null)
                    {
                        if (IncorrectHcpcsCodes.Count > 0)
                        {
                            foreach (rMemberReferralHcpcs HcpcsToMerge in IncorrectHcpcsCodes)
                            {
                                MergedrMemberReferralHcpcs MergedHcpcs = new MergedrMemberReferralHcpcs();
                                MergedHcpcs.creation_date = HcpcsToMerge.creation_date;
                                MergedHcpcs.creation_user_id = HcpcsToMerge.creation_user_id;
                                MergedHcpcs.decision_id = HcpcsToMerge.decision_id;
                                MergedHcpcs.entered_via_web = HcpcsToMerge.entered_via_web;
                                MergedHcpcs.estimated_amount = HcpcsToMerge.estimated_amount;
                                MergedHcpcs.hcpcs_code = HcpcsToMerge.hcpcs_code;
                                MergedHcpcs.id = HcpcsToMerge.id;
                                MergedHcpcs.is_hcpcs_15 = HcpcsToMerge.is_hcpcs_15;
                                MergedHcpcs.lastupdate_user_id = HcpcsToMerge.lastupdate_user_id;
                                MergedHcpcs.last_update_date = HcpcsToMerge.last_update_date;
                                MergedHcpcs.line_number = HcpcsToMerge.line_number;
                                MergedHcpcs.member_id = HcpcsToMerge.member_id;
                                MergedHcpcs.modifier1 = HcpcsToMerge.modifier1;
                                MergedHcpcs.quantity = HcpcsToMerge.quantity;
                                MergedHcpcs.referral_number = HcpcsToMerge.referral_number;
                                MergedHcpcs.system_role_r_service_category_types_id = HcpcsToMerge.system_role_r_service_category_types_id;

                                dbhcpcs.DbmsMergedMemberReferralHcpcs.Add(MergedHcpcs);
                                int MergedHcpcsItemAdded = dbhcpcs.SaveChanges();

                                if (!HcpcsBackedUp)
                                {
                                    if (MergedHcpcsItemAdded > 0)
                                    {
                                        HcpcsBackedUp = true;
                                    }
                                }
                            }
                        }
                        else
                        {
                            HcpcsBackedUp = true;
                        }
                    }
                    else
                    {
                        HcpcsBackedUp = true;
                    }
                }


                if (CptsBackedUp && IcdsBackedup && HcpcsBackedUp)
                {
                    BackedUp = true;
                }

                return BackedUp;
            }
            catch(Exception ex)
            {
                return BackedUp;
            }
        }

        private bool BackupReferralInterQualData(Guid IncorrectMemberId)
        {
            bool BackedUp = false;

            try
            {
                List<rMemberReferralInterqualReference> IncorrectInterquals = new List<rMemberReferralInterqualReference>();

                using (var db = new ICMS2DbContext())
                {
                    IncorrectInterquals = (from incinterqual in db.DbmsMemberReferralInterqualReference
                                           where incinterqual.member_id == IncorrectMemberId
                                           select incinterqual).ToList();

                    if (IncorrectInterquals != null)
                    {
                        if (IncorrectInterquals.Count > 0)
                        {
                            foreach (rMemberReferralInterqualReference InterQualToMerge in IncorrectInterquals)
                            {
                                MergedrMemberReferralInterqualReference MergedInterqual = new MergedrMemberReferralInterqualReference();
                                MergedInterqual.creation_date = InterQualToMerge.creation_date;
                                MergedInterqual.creation_user_id = InterQualToMerge.creation_user_id;
                                MergedInterqual.member_id = InterQualToMerge.member_id;
                                MergedInterqual.referral_number = InterQualToMerge.referral_number;
                                MergedInterqual.review_cid = InterQualToMerge.review_cid;
                                MergedInterqual.r_member_referral_interqual_reference_id = InterQualToMerge.r_member_referral_interqual_reference_id;

                                db.DbmsMergedrMemberReferralInterqualReference.Add(MergedInterqual);
                                int MergedItem = db.SaveChanges();

                                if (!BackedUp)
                                {
                                    if (MergedItem > 0)
                                    {
                                        BackedUp = true;
                                    }
                                }
                            }
                        }
                        else
                        {
                            BackedUp = true;
                        }
                    }
                    else
                    {
                        BackedUp = true;
                    }
                }

                return BackedUp;
            }
            catch (Exception ex)
            {
                return BackedUp;
            }
        }

        private bool BackupReferralLetters(Guid IncorrectMemberId)
        {
            bool BackedUp = false;

            try
            {
                List<rMemberReferralLetters> IncorrectLetters = new List<rMemberReferralLetters>();

                using (var db = new ICMS2DbContext())
                {
                    IncorrectLetters = (from incitem in db.DbmsMemberReferralLetters
                                         where incitem.member_id == IncorrectMemberId
                                         select incitem).ToList();

                    if (IncorrectLetters != null)
                    {
                        if (IncorrectLetters.Count > 0)
                        {
                            foreach (rMemberReferralLetters LettersToMerge in IncorrectLetters)
                            {
                                MergedrMemberReferralLetters MergedLetters = new MergedrMemberReferralLetters();
                                MergedLetters.create_user_id = LettersToMerge.create_user_id;
                                MergedLetters.file_blob = LettersToMerge.file_blob;
                                MergedLetters.file_identifier = LettersToMerge.file_identifier;
                                MergedLetters.id = LettersToMerge.id;
                                MergedLetters.letter_created = LettersToMerge.letter_created;
                                MergedLetters.member_id = LettersToMerge.member_id;
                                MergedLetters.referral_number = LettersToMerge.referral_number;

                                db.DbmsMergedMemberReferralLetters.Add(MergedLetters);
                                int MergedItem = db.SaveChanges();

                                if (!BackedUp)
                                {
                                    if (MergedItem > 0)
                                    {
                                        BackedUp = true;
                                    }
                                }
                            }
                        }
                        else
                        {
                            BackedUp = true;
                        }
                    }
                    else
                    {
                        BackedUp = true;
                    }
                }

                return BackedUp;
            }
            catch (Exception ex)
            {
                return BackedUp;
            }
        }

        private bool BackupReferrals(Guid IncorrectMemberId)
        {
            bool BackedUp = false;

            try
            {
                List<rMemberReferral> IncorrectItem = new List<rMemberReferral>();

                using (var db = new ICMS2DbContext())
                {
                    IncorrectItem = (from incitem in db.DbmsMemberReferrals
                                        where incitem.member_id == IncorrectMemberId
                                        select incitem).ToList();

                    if (IncorrectItem != null)
                    {
                        if (IncorrectItem.Count > 0)
                        {
                            foreach (rMemberReferral ReferralsToMerge in IncorrectItem)
                            {
                                MergerMemberReferral MergedReferrals = new MergerMemberReferral();
                                MergedReferrals.auth_end_date = ReferralsToMerge.auth_end_date;
                                MergedReferrals.auth_number = ReferralsToMerge.auth_number;
                                MergedReferrals.auth_provider_type = ReferralsToMerge.auth_provider_type;
                                MergedReferrals.auth_service_category_type = ReferralsToMerge.auth_service_category_type;
                                MergedReferrals.auth_start_date = ReferralsToMerge.auth_start_date;
                                MergedReferrals.auto_status_verified = ReferralsToMerge.auto_status_verified;
                                MergedReferrals.bed_days_admit_date = ReferralsToMerge.bed_days_admit_date;
                                MergedReferrals.bed_days_discharge_date = ReferralsToMerge.bed_days_discharge_date;
                                MergedReferrals.bed_days_guideline_days = ReferralsToMerge.bed_days_guideline_days;
                                MergedReferrals.claim_number = ReferralsToMerge.claim_number;
                                MergedReferrals.context_id = ReferralsToMerge.context_id;
                                MergedReferrals.cpt_preservice_nonurgent = ReferralsToMerge.cpt_preservice_nonurgent;
                                MergedReferrals.cpt_preservice_nonurgent_date = ReferralsToMerge.cpt_preservice_nonurgent_date;
                                MergedReferrals.cpt_preservice_nonurgent_user_id = ReferralsToMerge.cpt_preservice_nonurgent_user_id;
                                MergedReferrals.cpt_preservice_urgent = ReferralsToMerge.cpt_preservice_urgent;
                                MergedReferrals.cpt_preservice_urgent_date = ReferralsToMerge.cpt_preservice_urgent_date;
                                MergedReferrals.cpt_preservice_urgent_user_id = ReferralsToMerge.cpt_preservice_urgent_user_id;
                                MergedReferrals.created_date = ReferralsToMerge.created_date;
                                MergedReferrals.created_user_id = ReferralsToMerge.created_user_id;
                                MergedReferrals.decision_id = ReferralsToMerge.decision_id;
                                MergedReferrals.discharged = ReferralsToMerge.discharged;
                                MergedReferrals.discharge_assessment_creation_date = ReferralsToMerge.discharge_assessment_creation_date;
                                MergedReferrals.discharge_assessment_creation_user_id = ReferralsToMerge.discharge_assessment_creation_user_id;
                                MergedReferrals.discharge_department_id = ReferralsToMerge.discharge_department_id;
                                MergedReferrals.discharge_facility_type = ReferralsToMerge.discharge_facility_type;
                                MergedReferrals.discharge_plan_required = ReferralsToMerge.discharge_plan_required;
                                MergedReferrals.discharge_updated_date = ReferralsToMerge.discharge_updated_date;
                                MergedReferrals.discharge_updated_user_id = ReferralsToMerge.discharge_updated_user_id;
                                MergedReferrals.external_pacca = ReferralsToMerge.external_pacca;
                                MergedReferrals.external_review_overturned = ReferralsToMerge.external_review_overturned;
                                MergedReferrals.external_review_upheld = ReferralsToMerge.external_review_upheld;
                                MergedReferrals.facility_address_id = ReferralsToMerge.facility_address_id;
                                MergedReferrals.facility_by_address_id = ReferralsToMerge.facility_by_address_id;
                                MergedReferrals.facility_in_network = ReferralsToMerge.facility_in_network;
                                MergedReferrals.forced_authorization_type = ReferralsToMerge.forced_authorization_type;
                                MergedReferrals.force_authorization_type = ReferralsToMerge.force_authorization_type;
                                MergedReferrals.ibnr_pay_until_date = ReferralsToMerge.ibnr_pay_until_date;
                                MergedReferrals.info_received_date = ReferralsToMerge.info_received_date;
                                MergedReferrals.info_requested_date = ReferralsToMerge.info_requested_date;
                                MergedReferrals.last_update_date = ReferralsToMerge.last_update_date;
                                MergedReferrals.last_update_user_id = ReferralsToMerge.last_update_user_id;
                                MergedReferrals.level_1 = ReferralsToMerge.level_1;
                                MergedReferrals.level_1_overturned = ReferralsToMerge.level_1_overturned;
                                MergedReferrals.level_1_upheld = ReferralsToMerge.level_1_upheld;
                                MergedReferrals.level_2 = ReferralsToMerge.level_2;
                                MergedReferrals.level_2_overturned = ReferralsToMerge.level_2_overturned;
                                MergedReferrals.level_2_upheld = ReferralsToMerge.level_2_upheld;
                                MergedReferrals.member_id = ReferralsToMerge.member_id;
                                MergedReferrals.no_cpt_needed = ReferralsToMerge.no_cpt_needed;
                                MergedReferrals.no_cpt_needed_update_date = ReferralsToMerge.no_cpt_needed_update_date;
                                MergedReferrals.no_cpt_needed_user_id = ReferralsToMerge.no_cpt_needed_user_id;
                                MergedReferrals.po_number = ReferralsToMerge.po_number;
                                MergedReferrals.priority_id = ReferralsToMerge.priority_id;
                                MergedReferrals.reason_id = ReferralsToMerge.reason_id;
                                MergedReferrals.received_date = ReferralsToMerge.received_date;
                                MergedReferrals.reconsideration = ReferralsToMerge.reconsideration;
                                MergedReferrals.referral_case_owner = ReferralsToMerge.referral_case_owner;
                                MergedReferrals.referral_category = ReferralsToMerge.referral_category;
                                MergedReferrals.referral_lock_date = ReferralsToMerge.referral_lock_date;
                                MergedReferrals.referral_lock_system_user_id = ReferralsToMerge.referral_lock_system_user_id;
                                MergedReferrals.referral_number = ReferralsToMerge.referral_number;
                                MergedReferrals.referral_qa = ReferralsToMerge.referral_qa;
                                MergedReferrals.referral_qa_user_id = ReferralsToMerge.referral_qa_user_id;
                                MergedReferrals.referred_by_department_id = ReferralsToMerge.referred_by_department_id;
                                MergedReferrals.referred_by_facility_in_network = ReferralsToMerge.referred_by_facility_in_network;
                                MergedReferrals.referred_in_network = ReferralsToMerge.referred_in_network;
                                MergedReferrals.referred_provider_address_id = ReferralsToMerge.referred_provider_address_id;
                                MergedReferrals.referred_to_department_id = ReferralsToMerge.referred_to_department_id;
                                MergedReferrals.referred_to_locationpos_id = ReferralsToMerge.referred_to_locationpos_id;
                                MergedReferrals.referred_to_pcp_id = ReferralsToMerge.referred_to_pcp_id;
                                MergedReferrals.referred_to_vendor_id = ReferralsToMerge.referred_to_vendor_id;
                                MergedReferrals.referring_in_network = ReferralsToMerge.referring_in_network;
                                MergedReferrals.referring_locationpos_id = ReferralsToMerge.referring_locationpos_id;
                                MergedReferrals.referring_pcp_id = ReferralsToMerge.referring_pcp_id;
                                MergedReferrals.referring_provider_address_id = ReferralsToMerge.referring_provider_address_id;
                                MergedReferrals.revenue_code = ReferralsToMerge.revenue_code;
                                MergedReferrals.review_request_id = ReferralsToMerge.review_request_id;
                                MergedReferrals.sent_in_auth_file = ReferralsToMerge.sent_in_auth_file;
                                MergedReferrals.sent_in_auth_file_date = ReferralsToMerge.sent_in_auth_file_date;
                                MergedReferrals.sent_in_auth_file_update_date = ReferralsToMerge.sent_in_auth_file_update_date;
                                MergedReferrals.std_billed = ReferralsToMerge.std_billed;
                                MergedReferrals.std_billed_date = ReferralsToMerge.std_billed_date;
                                MergedReferrals.std_office_location = ReferralsToMerge.std_office_location;
                                MergedReferrals.system_role_r_category_groups_id = ReferralsToMerge.system_role_r_category_groups_id;
                                MergedReferrals.system_role_r_clinical_service_types_id = ReferralsToMerge.system_role_r_clinical_service_types_id;
                                MergedReferrals.type_id = ReferralsToMerge.type_id;
                                MergedReferrals.vendor_address_id = ReferralsToMerge.vendor_address_id;
                                MergedReferrals.vendor_in_network = ReferralsToMerge.vendor_in_network;

                                db.DbmsMergeMemberReferral.Add(MergedReferrals);
                                int MergedItem = db.SaveChanges();

                                if (!BackedUp)
                                {
                                    if (MergedItem > 0)
                                    {
                                        BackedUp = true;
                                    }
                                }
                            }
                        }
                        else
                        {
                            BackedUp = true;
                        }
                    }
                    else
                    {
                        BackedUp = true;
                    }
                }

                return BackedUp;
            }
            catch (Exception ex)
            {
                return BackedUp;
            }
        }

        private bool BackupReferralMissingReferTo(Guid IncorrectMemberId)
        {
            bool BackedUp = false;

            try
            {
                List<rReferralMissingReferTo> IncorrectItem = new List<rReferralMissingReferTo>();

                using (var db = new ICMS2DbContext())
                {
                    IncorrectItem = (from incitems in db.DbmsrReferralMissingReferTo
                                                where incitems.member_id == IncorrectMemberId
                                                select incitems).ToList();

                    if (IncorrectItem != null)
                    {
                        if (IncorrectItem.Count > 0)
                        {
                            foreach (rReferralMissingReferTo MissingReferToMerge in IncorrectItem)
                            {
                                MergedrReferralMissingReferTo MergedMissingReferTo = new MergedrReferralMissingReferTo();
                                MergedMissingReferTo.date_entered = MissingReferToMerge.date_entered;
                                MergedMissingReferTo.entered_by_id = MissingReferToMerge.entered_by_id;
                                MergedMissingReferTo.last_update_date = MissingReferToMerge.last_update_date;
                                MergedMissingReferTo.last_update_userid = MissingReferToMerge.last_update_userid;
                                MergedMissingReferTo.member_id = MissingReferToMerge.member_id;
                                MergedMissingReferTo.missing_billing_ihcp = MissingReferToMerge.missing_billing_ihcp;
                                MergedMissingReferTo.missing_billing_npi = MissingReferToMerge.missing_billing_npi;
                                MergedMissingReferTo.missing_ihcp = MissingReferToMerge.missing_ihcp;
                                MergedMissingReferTo.missing_npi = MissingReferToMerge.missing_npi;
                                MergedMissingReferTo.no_longer_missing = MissingReferToMerge.no_longer_missing;
                                MergedMissingReferTo.no_longer_missing_date = MissingReferToMerge.no_longer_missing_date;
                                MergedMissingReferTo.no_longer_missing_userid = MissingReferToMerge.no_longer_missing_userid;
                                MergedMissingReferTo.referral_number = MissingReferToMerge.referral_number;
                                MergedMissingReferTo.referred_to_department_id = MissingReferToMerge.referred_to_department_id;
                                MergedMissingReferTo.referred_to_pcp_id = MissingReferToMerge.referred_to_pcp_id;
                                MergedMissingReferTo.r_referral_missing_refer_to_id = MissingReferToMerge.r_referral_missing_refer_to_id;

                                db.DbmsMergedReferralMissingReferTo.Add(MergedMissingReferTo);
                                int MergedItem = db.SaveChanges();

                                if (!BackedUp)
                                {
                                    if (MergedItem > 0)
                                    {
                                        BackedUp = true;
                                    }
                                }
                            }
                        }
                        else
                        {
                            BackedUp = true;
                        }
                    }
                    else
                    {
                        BackedUp = true;
                    }
                }

                return BackedUp;
            }
            catch (Exception ex)
            {
                return BackedUp;
            }
        }

        private bool BackupReferralWorkflow(Guid IncorrectMemberId)
        {
            bool BackedUp = false;

            try
            {
                List<rMemberReferralWorkflow> IncorrectItem = new List<rMemberReferralWorkflow>();

                using (var db = new ICMS2DbContext())
                {
                    IncorrectItem = (from incitems in db.DbmsMemberReferralWorkflows
                                     where incitems.member_id == IncorrectMemberId
                                     select incitems).ToList();

                    if (IncorrectItem != null)
                    {
                        if (IncorrectItem.Count > 0)
                        {
                            foreach (rMemberReferralWorkflow WorkflowToBackup in IncorrectItem)
                            {
                                MergedrMemberReferralWorkflow BackUpItem = new MergedrMemberReferralWorkflow();
                                BackUpItem.assigned_to_user_id = WorkflowToBackup.assigned_to_user_id;
                                BackUpItem.completed_by_user_id = WorkflowToBackup.completed_by_user_id;
                                BackUpItem.completed_date = WorkflowToBackup.completed_date;
                                BackUpItem.created_by_user_id = WorkflowToBackup.created_by_user_id;
                                BackUpItem.created_date = WorkflowToBackup.created_date;
                                BackUpItem.determination_id = WorkflowToBackup.determination_id;
                                BackUpItem.do_not_show = WorkflowToBackup.do_not_show;
                                BackUpItem.eventtype_id = WorkflowToBackup.eventtype_id;
                                BackUpItem.latest_record = WorkflowToBackup.latest_record;
                                BackUpItem.member_id = WorkflowToBackup.member_id;
                                BackUpItem.referral_number = WorkflowToBackup.referral_number;
                                BackUpItem.referral_workflow_description = WorkflowToBackup.referral_workflow_description;
                                BackUpItem.r_workflow_xref_id = WorkflowToBackup.r_workflow_xref_id;
                                BackUpItem.to_be_completed_date = WorkflowToBackup.to_be_completed_date;
                                BackUpItem.workflow_id = WorkflowToBackup.workflow_id;

                                db.DbmsMergedMemberReferralWorkflow.Add(BackUpItem);
                                int BackedUpResults = db.SaveChanges();

                                if (!BackedUp)
                                {
                                    if (BackedUpResults > 0)
                                    {
                                        BackedUp = true;
                                    }
                                }
                            }
                        }
                        else
                        {
                            BackedUp = true;
                        }
                    }
                    else
                    {
                        BackedUp = true;
                    }
                }

                return BackedUp;
            }
            catch (Exception ex)
            {
                return BackedUp;
            }
        }

        private bool BackupMemberAddressDmAlternate(Guid IncorrectMemberId)
        {
            bool BackedUp = false;

            try
            {
                List<MemberAddressDmAlternate> IncorrectItem = new List<MemberAddressDmAlternate>();

                using (var db = new ICMS2DbContext())
                {
                    IncorrectItem = (from incitems in db.DbmsMemberAddressDmAlternate
                                     where incitems.member_id == IncorrectMemberId
                                     select incitems).ToList();

                    if (IncorrectItem != null)
                    {
                        if (IncorrectItem.Count > 0)
                        {
                            foreach (MemberAddressDmAlternate ItemToBackup in IncorrectItem)
                            {
                                MergedMemberAddressDmAlternate BackUpItem = new MergedMemberAddressDmAlternate();
                                BackUpItem.address_line1 = ItemToBackup.address_line1;
                                BackUpItem.address_line2 = ItemToBackup.address_line2;
                                BackUpItem.address_type_id = ItemToBackup.address_type_id;
                                BackUpItem.city = ItemToBackup.city;
                                BackUpItem.member_address_dm_alternate_id = ItemToBackup.member_address_dm_alternate_id;
                                BackUpItem.member_id = ItemToBackup.member_id;
                                BackUpItem.state_abbrev = ItemToBackup.state_abbrev;
                                BackUpItem.zip_code = ItemToBackup.zip_code;

                                db.DbmsMergedMemberAddressDmAlternate.Add(BackUpItem);
                                int BackedUpResults = db.SaveChanges();

                                if (!BackedUp)
                                {
                                    if (BackedUpResults > 0)
                                    {
                                        BackedUp = true;
                                    }
                                }
                            }
                        }
                        else
                        {
                            BackedUp = true;
                        }
                    }
                    else
                    {
                        BackedUp = true;
                    }
                }

                return BackedUp;
            }
            catch (Exception ex)
            {
                return BackedUp;
            }
        }

        private bool BackupMemberAddresses(Guid IncorrectMemberId)
        {
            bool BackedUp = false;

            try
            {
                List<MemberAddress> IncorrectItem = new List<MemberAddress>();

                using (var db = new ICMS2DbContext())
                {
                    IncorrectItem = (from incitems in db.DbmsMemberAddresses
                                     where incitems.member_id == IncorrectMemberId
                                     select incitems).ToList();

                    if (IncorrectItem != null)
                    {
                        if (IncorrectItem.Count > 0)
                        {
                            foreach (MemberAddress ItemToBackup in IncorrectItem)
                            {
                                MergedMemberAddress BackUpItem = new MergedMemberAddress();
                                BackUpItem.address_county_id = ItemToBackup.address_county_id;
                                BackUpItem.address_line1 = ItemToBackup.address_line1;
                                BackUpItem.address_line2 = ItemToBackup.address_line2;
                                BackUpItem.address_note = ItemToBackup.address_note;
                                BackUpItem.address_type_id = ItemToBackup.address_type_id;
                                BackUpItem.apartment_number = ItemToBackup.apartment_number;
                                BackUpItem.city = ItemToBackup.city;
                                BackUpItem.columbia_deptId = ItemToBackup.columbia_deptId;
                                BackUpItem.is_alternate = ItemToBackup.is_alternate;
                                BackUpItem.member_address_id = ItemToBackup.member_address_id;
                                BackUpItem.member_id = ItemToBackup.member_id;
                                BackUpItem.state_abbrev = ItemToBackup.state_abbrev;
                                BackUpItem.zip_code = ItemToBackup.zip_code;

                                db.DbmsMergedMemberAddress.Add(BackUpItem);
                                int BackedUpResults = db.SaveChanges();

                                if (!BackedUp)
                                {
                                    if (BackedUpResults > 0)
                                    {
                                        BackedUp = true;
                                    }
                                }
                            }
                        }
                        else
                        {
                            BackedUp = true;
                        }
                    }
                    else
                    {
                        BackedUp = true;
                    }
                }

                return BackedUp;
            }
            catch (Exception ex)
            {
                return BackedUp;
            }
        }

        private bool BackupMemberCareCoordinationCall(Guid IncorrectMemberId)
        {
            bool BackedUp = false;

            try
            {
                List<MemberCareCoordinationCall> IncorrectItem = new List<MemberCareCoordinationCall>();

                using (var db = new ICMS2DbContext())
                {
                    IncorrectItem = (from incitems in db.DbmsMemberCareCoordinationCall
                                     where incitems.member_id == IncorrectMemberId
                                     select incitems).ToList();

                    if (IncorrectItem != null)
                    {
                        if (IncorrectItem.Count > 0)
                        {
                            foreach (MemberCareCoordinationCall ItemToBackup in IncorrectItem)
                            {
                                MergedMemberCareCoordinationCall BackUpItem = new MergedMemberCareCoordinationCall();
                                BackUpItem.call_date = ItemToBackup.call_date;
                                BackUpItem.call_entered_by_system_user_id = ItemToBackup.call_entered_by_system_user_id;
                                BackUpItem.call_note = ItemToBackup.call_note;
                                BackUpItem.creation_date = ItemToBackup.creation_date;
                                BackUpItem.member_care_coordination_call_id = ItemToBackup.member_care_coordination_call_id;
                                BackUpItem.member_id = ItemToBackup.member_id;
                                BackUpItem.referral_number = ItemToBackup.referral_number;

                                db.DbmsMergedMemberCareCoordinationCall.Add(BackUpItem);
                                int BackedUpResults = db.SaveChanges();

                                if (!BackedUp)
                                {
                                    if (BackedUpResults > 0)
                                    {
                                        BackedUp = true;
                                    }
                                }
                            }
                        }
                        else
                        {
                            BackedUp = true;
                        }
                    }
                    else
                    {
                        BackedUp = true;
                    }
                }

                return BackedUp;
            }
            catch (Exception ex)
            {
                return BackedUp;
            }
        }

        private bool BackupMemberCareCoordinationCallSavingsSavings(Guid IncorrectMemberId)
        {
            bool BackedUp = false;

            try
            {
                List<MemberCareCoordinationCallSavings> IncorrectItem = new List<MemberCareCoordinationCallSavings>();

                using (var db = new ICMS2DbContext())
                {
                    IncorrectItem = (from incitems in db.DbmsMemberCareCoordinationCallSavings
                                     where incitems.member_id == IncorrectMemberId
                                     select incitems).ToList();

                    if (IncorrectItem != null)
                    {
                        if (IncorrectItem.Count > 0)
                        {
                            foreach (MemberCareCoordinationCallSavings ItemToBackup in IncorrectItem)
                            {
                                MergedMemberCareCoordinationCallSavings BackUpItem = new MergedMemberCareCoordinationCallSavings();
                                BackUpItem.amount = ItemToBackup.amount;
                                BackUpItem.creation_date = ItemToBackup.creation_date;
                                BackUpItem.creation_user_id = ItemToBackup.creation_user_id;
                                BackUpItem.description = ItemToBackup.description;
                                BackUpItem.last_update_date = ItemToBackup.last_update_date;
                                BackUpItem.last_update_user_id = ItemToBackup.last_update_user_id;
                                BackUpItem.member_care_coordination_call_id = ItemToBackup.member_care_coordination_call_id;
                                BackUpItem.member_care_coordination_call_savings_id = ItemToBackup.member_care_coordination_call_savings_id;
                                BackUpItem.member_id = ItemToBackup.member_id;
                                BackUpItem.referral_number = ItemToBackup.referral_number;

                                db.DbmsMergedMemberCareCoordinationCallSavings.Add(BackUpItem);
                                int BackedUpResults = db.SaveChanges();

                                if (!BackedUp)
                                {
                                    if (BackedUpResults > 0)
                                    {
                                        BackedUp = true;
                                    }
                                }
                            }
                        }
                        else
                        {
                            BackedUp = true;
                        }
                    }
                    else
                    {
                        BackedUp = true;
                    }
                }

                return BackedUp;
            }
            catch (Exception ex)
            {
                return BackedUp;
            }
        }

        private bool BackupMemberClaimDiagnosis(Guid IncorrectMemberId)
        {
            bool BackedUp = false;

            try
            {
                List<MemberClaimsDiagnosis> IncorrectItem = new List<MemberClaimsDiagnosis>();

                using (var db = new ICMS2DbContext())
                {
                    IncorrectItem = (from incitems in db.DbmsMemberClaimsDiagnosis
                                     where incitems.member_id == IncorrectMemberId
                                     select incitems).ToList();

                    if (IncorrectItem != null)
                    {
                        if (IncorrectItem.Count > 0)
                        {
                            foreach (MemberClaimsDiagnosis ItemToBackup in IncorrectItem)
                            {
                                MergedMemberClaimsDiagnosis BackUpItem = new MergedMemberClaimsDiagnosis();
                                BackUpItem.claims_system_id = ItemToBackup.claims_system_id;
                                BackUpItem.date_deleted = ItemToBackup.date_deleted;
                                BackUpItem.deleted_flag = ItemToBackup.deleted_flag;
                                BackUpItem.diagnosis_or_procedure_code = ItemToBackup.diagnosis_or_procedure_code;
                                BackUpItem.member_claims_diagnosis_id = ItemToBackup.member_claims_diagnosis_id;
                                BackUpItem.member_id = ItemToBackup.member_id;
                                BackUpItem.primary_diagnosis = ItemToBackup.primary_diagnosis;
                                BackUpItem.surgical_procedure = ItemToBackup.surgical_procedure;
                                BackUpItem.user_deleted = ItemToBackup.user_deleted;

                                db.DbmsMergeMemberClaimsDiagnosis.Add(BackUpItem);
                                int BackedUpResults = db.SaveChanges();

                                if (!BackedUp)
                                {
                                    if (BackedUpResults > 0)
                                    {
                                        BackedUp = true;
                                    }
                                }
                            }
                        }
                        else
                        {
                            BackedUp = true;
                        }
                    }
                    else
                    {
                        BackedUp = true;
                    }
                }

                return BackedUp;
            }
            catch (Exception ex)
            {
                return BackedUp;
            }
        }

        private bool BackupMemberConditionAcuities(Guid IncorrectMemberId)
        {
            bool BackedUp = false;

            try
            {
                List<MemberConditionAcuity> IncorrectItem = new List<MemberConditionAcuity>();

                using (var db = new ICMS2DbContext())
                {
                    IncorrectItem = (from incitems in db.DbmsMemberConditionAcuity
                                     where incitems.member_id == IncorrectMemberId
                                     select incitems).ToList();

                    if (IncorrectItem != null)
                    {
                        if (IncorrectItem.Count > 0)
                        {
                            foreach (MemberConditionAcuity ItemToBackup in IncorrectItem)
                            {
                                MergedMemberConditionAcuity BackUpItem = new MergedMemberConditionAcuity();
                                BackUpItem.alternate_id = ItemToBackup.alternate_id;
                                BackUpItem.asthma_first_level_acuity = ItemToBackup.asthma_first_level_acuity;
                                BackUpItem.asthma_second_level_acuity = ItemToBackup.asthma_second_level_acuity;
                                BackUpItem.cad_first_level_acuity = ItemToBackup.cad_first_level_acuity;
                                BackUpItem.cad_second_level_acuity = ItemToBackup.cad_second_level_acuity;
                                BackUpItem.created_user_id = ItemToBackup.created_user_id;
                                BackUpItem.creation_date = ItemToBackup.creation_date;
                                BackUpItem.diabetes_first_level_acuity = ItemToBackup.diabetes_first_level_acuity;
                                BackUpItem.diabetes_second_level_acuity = ItemToBackup.diabetes_second_level_acuity;
                                BackUpItem.hchol_first_level_acuity = ItemToBackup.hchol_first_level_acuity;
                                BackUpItem.hchol_seconde_level_acuity = ItemToBackup.hchol_seconde_level_acuity;
                                BackUpItem.hypertension_first_level_acuity = ItemToBackup.hypertension_first_level_acuity;
                                BackUpItem.hypertension_second_level_acuity = ItemToBackup.hypertension_second_level_acuity;
                                BackUpItem.last_update_date = ItemToBackup.last_update_date;
                                BackUpItem.last_update_user_id = ItemToBackup.last_update_user_id;
                                BackUpItem.member_condition_acuity_id = ItemToBackup.member_condition_acuity_id;
                                BackUpItem.member_id = ItemToBackup.member_id;
                                BackUpItem.override_acuity = ItemToBackup.override_acuity;
                                BackUpItem.override_level_acuity = ItemToBackup.override_level_acuity;
                                BackUpItem.override_reason = ItemToBackup.override_reason;
                                BackUpItem.system_level_acuity = ItemToBackup.system_level_acuity;

                                db.DbmsMergedMemberConditionAcuity.Add(BackUpItem);
                                int BackedUpResults = db.SaveChanges();

                                if (!BackedUp)
                                {
                                    if (BackedUpResults > 0)
                                    {
                                        BackedUp = true;
                                    }
                                }
                            }
                        }
                        else
                        {
                            BackedUp = true;
                        }
                    }
                    else
                    {
                        BackedUp = true;
                    }
                }

                return BackedUp;
            }
            catch (Exception ex)
            {
                return BackedUp;
            }
        }

        private bool BackupMemberCustomerServiceAlerts(Guid IncorrectMemberId)
        {
            bool BackedUp = false;

            try
            {
                List<MemberCustomerServiceAlert> IncorrectItem = new List<MemberCustomerServiceAlert>();

                using (var db = new ICMS2DbContext())
                {
                    IncorrectItem = (from incitems in db.DbmsMemberCustomerServiceAlert
                                     where incitems.member_id == IncorrectMemberId
                                     select incitems).ToList();

                    if (IncorrectItem != null)
                    {
                        if (IncorrectItem.Count > 0)
                        {
                            foreach (MemberCustomerServiceAlert ItemToBackup in IncorrectItem)
                            {
                                MergedMemberCustomerServiceAlert BackUpItem = new MergedMemberCustomerServiceAlert();
                                BackUpItem.alert_text = ItemToBackup.alert_text;
                                BackUpItem.member_customer_service_alert_id = ItemToBackup.member_customer_service_alert_id;
                                BackUpItem.member_id = ItemToBackup.member_id;

                                db.DbmsMergedMemberCustomerServiceAlert.Add(BackUpItem);
                                int BackedUpResults = db.SaveChanges();

                                if (!BackedUp)
                                {
                                    if (BackedUpResults > 0)
                                    {
                                        BackedUp = true;
                                    }
                                }
                            }
                        }
                        else
                        {
                            BackedUp = true;
                        }
                    }
                    else
                    {
                        BackedUp = true;
                    }
                }

                return BackedUp;
            }
            catch (Exception ex)
            {
                return BackedUp;
            }
        }

        private bool BackupMemberFaxes(Guid IncorrectMemberId)
        {
            bool BackedUp = false;

            try
            {
                List<rInboundFax> IncorrectItem = new List<rInboundFax>();

                using (var db = new ICMS2DbContext())
                {
                    IncorrectItem = (from incitems in db.DbmsInboundFax
                                     where incitems.member_id == IncorrectMemberId
                                     select incitems).ToList();

                    if (IncorrectItem != null)
                    {
                        if (IncorrectItem.Count > 0)
                        {
                            foreach (rInboundFax ItemToBackup in IncorrectItem)
                            {
                                MergedrInboundFax BackUpItem = new MergedrInboundFax();
                                BackUpItem.assigned_by_user_id = ItemToBackup.assigned_by_user_id;
                                BackUpItem.assigned_to_user_date = ItemToBackup.assigned_to_user_date;
                                BackUpItem.assigned_to_user_id = ItemToBackup.assigned_to_user_id;
                                BackUpItem.assigned_to_user_opened_date = ItemToBackup.assigned_to_user_opened_date;
                                BackUpItem.completed_by_user_id = ItemToBackup.completed_by_user_id;
                                BackUpItem.completed_date = ItemToBackup.completed_date;
                                BackUpItem.deleted_flag = ItemToBackup.deleted_flag;
                                BackUpItem.email_faxhandle = ItemToBackup.email_faxhandle;
                                BackUpItem.email_filename = ItemToBackup.email_filename;
                                BackUpItem.error_description = ItemToBackup.error_description;
                                BackUpItem.faxqueue_id = ItemToBackup.faxqueue_id;
                                BackUpItem.fax_boardsrv = ItemToBackup.fax_boardsrv;
                                BackUpItem.fax_bodyfilename = ItemToBackup.fax_bodyfilename;
                                BackUpItem.fax_creationtime = ItemToBackup.fax_creationtime;
                                BackUpItem.fax_docfiles_handle = ItemToBackup.fax_docfiles_handle;
                                BackUpItem.fax_dos = ItemToBackup.fax_dos;
                                BackUpItem.fax_dos_date = ItemToBackup.fax_dos_date;
                                BackUpItem.fax_handle = ItemToBackup.fax_handle;
                                BackUpItem.fax_image = ItemToBackup.fax_image;
                                BackUpItem.fax_notifychannel = ItemToBackup.fax_notifychannel;
                                BackUpItem.fax_numpages = ItemToBackup.fax_numpages;
                                BackUpItem.fax_remoteid = ItemToBackup.fax_remoteid;
                                BackUpItem.fax_serverguid = ItemToBackup.fax_serverguid;
                                BackUpItem.fax_type_date = ItemToBackup.fax_type_date;
                                BackUpItem.fax_type_id = ItemToBackup.fax_type_id;
                                BackUpItem.fax_uniqueid = ItemToBackup.fax_uniqueid;
                                BackUpItem.id = ItemToBackup.id;
                                BackUpItem.inbound_member_name = ItemToBackup.inbound_member_name;
                                BackUpItem.member_id = ItemToBackup.member_id;
                                BackUpItem.opened_by_date = ItemToBackup.opened_by_date;
                                BackUpItem.opened_by_user_id = ItemToBackup.opened_by_user_id;
                                BackUpItem.priority_level = ItemToBackup.priority_level;
                                BackUpItem.queue_dummy = ItemToBackup.queue_dummy;
                                BackUpItem.ready_flag = ItemToBackup.ready_flag;
                                BackUpItem.referral_number = ItemToBackup.referral_number;
                                BackUpItem.to_be_completed_date = ItemToBackup.to_be_completed_date;

                                db.DbmsMergedrInboundFax.Add(BackUpItem);
                                int BackedUpResults = db.SaveChanges();

                                if (!BackedUp)
                                {
                                    if (BackedUpResults > 0)
                                    {
                                        BackedUp = true;
                                    }
                                }
                            }
                        }
                        else
                        {
                            BackedUp = true;
                        }
                    }
                    else
                    {
                        BackedUp = true;
                    }
                }

                return BackedUp;
            }
            catch (Exception ex)
            {
                return BackedUp;
            }
        }

        private bool BackupMemberHealthPlanReferences(Guid IncorrectMemberId)
        {
            bool BackedUp = false;

            try
            {
                List<MemberHealthPlanReference> IncorrectItem = new List<MemberHealthPlanReference>();

                using (var db = new ICMS2DbContext())
                {
                    IncorrectItem = (from incitems in db.DbmsMemberHealthPlanReference
                                     where incitems.member_id == IncorrectMemberId
                                     select incitems).ToList();

                    if (IncorrectItem != null)
                    {
                        if (IncorrectItem.Count > 0)
                        {
                            foreach (MemberHealthPlanReference ItemToBackup in IncorrectItem)
                            {
                                MergedMemberHealthPlanReference BackUpItem = new MergedMemberHealthPlanReference();
                                BackUpItem.alternate_id = ItemToBackup.alternate_id;
                                BackUpItem.auto_assigned_indicator = ItemToBackup.auto_assigned_indicator;
                                BackUpItem.benefit_package_date = ItemToBackup.benefit_package_date;
                                BackUpItem.benefit_package_indicator = ItemToBackup.benefit_package_indicator;
                                BackUpItem.capitation_category = ItemToBackup.capitation_category;
                                BackUpItem.case_number = ItemToBackup.case_number;
                                BackUpItem.case_worker_number = ItemToBackup.case_worker_number;
                                BackUpItem.cm_program = ItemToBackup.cm_program;
                                BackUpItem.cobra = ItemToBackup.commercial;
                                BackUpItem.created_user_id = ItemToBackup.created_user_id;
                                BackUpItem.creation_date = ItemToBackup.creation_date;
                                BackUpItem.delivery_system = ItemToBackup.delivery_system;
                                BackUpItem.enterprise = ItemToBackup.enterprise;
                                BackUpItem.entry_id = ItemToBackup.entry_id;
                                BackUpItem.first_steps_end_date = ItemToBackup.first_steps_end_date;
                                BackUpItem.first_steps_start_date = ItemToBackup.first_steps_start_date;
                                BackUpItem.group_id = ItemToBackup.group_id;
                                BackUpItem.group_location = ItemToBackup.group_location;
                                BackUpItem.hip_end_date = ItemToBackup.hip_end_date;
                                BackUpItem.hip_start_date = ItemToBackup.hip_start_date;
                                BackUpItem.id_number = ItemToBackup.id_number;
                                BackUpItem.is_sands_shpg = ItemToBackup.is_sands_shpg;
                                BackUpItem.last_update_date = ItemToBackup.last_update_date;
                                BackUpItem.location_code = ItemToBackup.location_code;
                                BackUpItem.mco_id_number = ItemToBackup.mco_id_number;
                                BackUpItem.mco_region_id = ItemToBackup.mco_region_id;
                                BackUpItem.mdwise_hhw = ItemToBackup.mdwise_hhw;
                                BackUpItem.mdwise_hip = ItemToBackup.mdwise_hip;
                                BackUpItem.medicaid_eligibility = ItemToBackup.medicaid_eligibility;
                                BackUpItem.member_id = ItemToBackup.member_id;
                                BackUpItem.mrn = ItemToBackup.mrn;
                                BackUpItem.network = ItemToBackup.network;
                                BackUpItem.patient_acuity = ItemToBackup.patient_acuity;
                                BackUpItem.patient_status = ItemToBackup.patient_status;
                                BackUpItem.plan_description = ItemToBackup.plan_description;
                                BackUpItem.plan_id = ItemToBackup.plan_id;
                                BackUpItem.pmp_end_date = ItemToBackup.pmp_end_date;
                                BackUpItem.pmp_group_number = ItemToBackup.pmp_group_number;
                                BackUpItem.pmp_start_date = ItemToBackup.pmp_start_date;
                                BackUpItem.pre_existing_eff_date = ItemToBackup.pre_existing_eff_date;
                                BackUpItem.pre_existing_term_date = ItemToBackup.pre_existing_term_date;
                                BackUpItem.primary_medical_provider_number = ItemToBackup.primary_medical_provider_number;
                                BackUpItem.primary_number = ItemToBackup.primary_number;
                                BackUpItem.recipient_id_number = ItemToBackup.recipient_id_number;
                                BackUpItem.right_choice = ItemToBackup.right_choice;
                                BackUpItem.secondary_number = ItemToBackup.secondary_number;
                                BackUpItem.tpa_name = ItemToBackup.tpa_name;
                                BackUpItem.update_user_id = ItemToBackup.update_user_id;
                                BackUpItem.user_entry_id = ItemToBackup.user_entry_id;
                                BackUpItem.wishard_advantage = ItemToBackup.wishard_advantage;
                                BackUpItem.wishard_health_plan = ItemToBackup.wishard_health_plan;

                                db.DbmsMergedMemberHealthPlanReference.Add(BackUpItem);
                                int BackedUpResults = db.SaveChanges();

                                if (!BackedUp)
                                {
                                    if (BackedUpResults > 0)
                                    {
                                        BackedUp = true;
                                    }
                                }
                            }
                        }
                        else
                        {
                            BackedUp = true;
                        }
                    }
                    else
                    {
                        BackedUp = true;
                    }
                }

                return BackedUp;
            }
            catch (Exception ex)
            {
                return BackedUp;
            }
        }

        private bool BackupMemberLabs(Guid IncorrectMemberId)
        {
            bool BackedUp = false;

            try
            {
                List<MemberLab> IncorrectItem = new List<MemberLab>();

                using (var db = new ICMS2DbContext())
                {
                    IncorrectItem = (from incitems in db.DbmsMemberLab
                                     where incitems.member_id == IncorrectMemberId
                                     select incitems).ToList();

                    if (IncorrectItem != null)
                    {
                        if (IncorrectItem.Count > 0)
                        {
                            foreach (MemberLab ItemToBackup in IncorrectItem)
                            {
                                MergedMemberLab BackUpItem = new MergedMemberLab();
                                BackUpItem.creation_date = ItemToBackup.creation_date;
                                BackUpItem.creation_user_id = ItemToBackup.creation_user_id;
                                BackUpItem.date_deleted = ItemToBackup.date_deleted;
                                BackUpItem.deleted_flag = ItemToBackup.deleted_flag;
                                BackUpItem.lab_date = ItemToBackup.lab_date;
                                BackUpItem.lab_note = ItemToBackup.lab_note;
                                BackUpItem.lab_type_id = ItemToBackup.lab_type_id;
                                BackUpItem.lab_type_measurement_id = ItemToBackup.lab_type_measurement_id;
                                BackUpItem.last_update_date = ItemToBackup.last_update_date;
                                BackUpItem.last_update_user_id = ItemToBackup.last_update_user_id;
                                BackUpItem.member_id = ItemToBackup.member_id;
                                BackUpItem.member_lab_id = ItemToBackup.member_lab_id;
                                BackUpItem.reading = ItemToBackup.reading;
                                BackUpItem.user_deleted = ItemToBackup.user_deleted;

                                db.DbmsMergedMemberLab.Add(BackUpItem);
                                int BackedUpResults = db.SaveChanges();

                                if (!BackedUp)
                                {
                                    if (BackedUpResults > 0)
                                    {
                                        BackedUp = true;
                                    }
                                }
                            }
                        }
                        else
                        {
                            BackedUp = true;
                        }
                    }
                    else
                    {
                        BackedUp = true;
                    }
                }

                return BackedUp;
            }
            catch (Exception ex)
            {
                return BackedUp;
            }
        }

        private bool BackupMemberLcmFollowupNotes(Guid IncorrectMemberId)
        {
            bool BackedUp = false;

            try
            {
                List<MemberLcmFollowupNotes> IncorrectItem = new List<MemberLcmFollowupNotes>();

                using (var db = new ICMS2DbContext())
                {
                    IncorrectItem = (from incitems in db.DbmsMemberLcmFollowupNotes
                                     where incitems.member_id == IncorrectMemberId
                                     select incitems).ToList();

                    if (IncorrectItem != null)
                    {
                        if (IncorrectItem.Count > 0)
                        {
                            foreach (MemberLcmFollowupNotes ItemToBackup in IncorrectItem)
                            {
                                MergedMemberLcmFollowupNotes BackUpItem = new MergedMemberLcmFollowupNotes();
                                BackUpItem.creation_date = ItemToBackup.creation_date;
                                BackUpItem.creation_user_id = ItemToBackup.creation_user_id;
                                BackUpItem.current_note = ItemToBackup.current_note;
                                BackUpItem.current_treatments = ItemToBackup.current_treatments;
                                BackUpItem.current_treatment_added = ItemToBackup.current_treatment_added;
                                BackUpItem.future_treatments = ItemToBackup.future_treatments;
                                BackUpItem.future_treatment_added = ItemToBackup.future_treatment_added;
                                BackUpItem.lcm_followup_id = ItemToBackup.lcm_followup_id;
                                BackUpItem.lcn_case_number = ItemToBackup.lcn_case_number;
                                BackUpItem.mass_update = ItemToBackup.mass_update;
                                BackUpItem.mass_update_date = ItemToBackup.mass_update_date;
                                BackUpItem.member_id = ItemToBackup.member_id;
                                BackUpItem.member_lcm_followup_notes_id = ItemToBackup.member_lcm_followup_notes_id;
                                BackUpItem.moved_to_previous_treatment = ItemToBackup.moved_to_previous_treatment;
                                BackUpItem.newly_identified_cm = ItemToBackup.newly_identified_cm;
                                BackUpItem.newly_identified_cm_added = ItemToBackup.newly_identified_cm_added;
                                BackUpItem.nurse_added = ItemToBackup.nurse_added;
                                BackUpItem.nurse_summary = ItemToBackup.nurse_summary;
                                BackUpItem.override_used = ItemToBackup.override_used;
                                BackUpItem.physician_added = ItemToBackup.physician_added;
                                BackUpItem.physician_prognosis = ItemToBackup.physician_prognosis;
                                BackUpItem.previous_treatments = ItemToBackup.previous_treatments;
                                BackUpItem.previous_treatment_added = ItemToBackup.previous_treatment_added;
                                BackUpItem.psycho_social_added = ItemToBackup.psycho_social_added;
                                BackUpItem.psycho_social_summary = ItemToBackup.psycho_social_summary;

                                db.DbmsMergedMemberLcmFollowupNotes.Add(BackUpItem);
                                int BackedUpResults = db.SaveChanges();

                                if (!BackedUp)
                                {
                                    if (BackedUpResults > 0)
                                    {
                                        BackedUp = true;
                                    }
                                }
                            }
                        }
                        else
                        {
                            BackedUp = true;
                        }
                    }
                    else
                    {
                        BackedUp = true;
                    }
                }

                return BackedUp;
            }
            catch (Exception ex)
            {
                return BackedUp;
            }
        }

        private bool BackupMemberMdReviewReference(Guid IncorrectMemberId)
        {
            bool BackedUp = false;

            try
            {
                List<MemberMdReviewReference> IncorrectItem = new List<MemberMdReviewReference>();

                using (var db = new ICMS2DbContext())
                {
                    IncorrectItem = (from incitems in db.DbmsMemberMdReviewReference
                                     where incitems.member_id == IncorrectMemberId
                                     select incitems).ToList();

                    if (IncorrectItem != null)
                    {
                        if (IncorrectItem.Count > 0)
                        {
                            foreach (MemberMdReviewReference ItemToBackup in IncorrectItem)
                            {
                                MergedMemberMdReviewReference BackUpItem = new MergedMemberMdReviewReference();
                                BackUpItem.created_user_id = ItemToBackup.created_user_id;
                                BackUpItem.creation_date = ItemToBackup.creation_date;
                                BackUpItem.cr_bill_id = ItemToBackup.cr_bill_id;
                                BackUpItem.initial_load = ItemToBackup.initial_load;
                                BackUpItem.in_review = ItemToBackup.in_review;
                                BackUpItem.md_review_followup_id = ItemToBackup.md_review_followup_id;
                                BackUpItem.md_review_request_id = ItemToBackup.md_review_request_id;
                                BackUpItem.member_id = ItemToBackup.member_id;
                                BackUpItem.member_md_review_reference_id = ItemToBackup.member_md_review_reference_id;
                                BackUpItem.module_review_submitted_from = ItemToBackup.module_review_submitted_from;
                                BackUpItem.out_of_review_date = ItemToBackup.out_of_review_date;
                                BackUpItem.out_of_review_user_id = ItemToBackup.out_of_review_user_id;
                                BackUpItem.referral_number = ItemToBackup.referral_number;
                                BackUpItem.reviewing_md_id = ItemToBackup.reviewing_md_id;

                                db.DbmsMergedMemberMdReviewReference.Add(BackUpItem);
                                int BackedUpResults = db.SaveChanges();

                                if (!BackedUp)
                                {
                                    if (BackedUpResults > 0)
                                    {
                                        BackedUp = true;
                                    }
                                }
                            }
                        }
                        else
                        {
                            BackedUp = true;
                        }
                    }
                    else
                    {
                        BackedUp = true;
                    }
                }

                return BackedUp;
            }
            catch (Exception ex)
            {
                return BackedUp;
            }
        }

        private bool BackupMemberMedAllergies(Guid IncorrectMemberId)
        {
            bool BackedUp = false;

            try
            {
                List<MemberMedsAllergies> IncorrectItem = new List<MemberMedsAllergies>();

                using (var db = new ICMS2DbContext())
                {
                    IncorrectItem = (from incitems in db.DbmsMemberMedsAllergies
                                     where incitems.member_id == IncorrectMemberId
                                     select incitems).ToList();

                    if (IncorrectItem != null)
                    {
                        if (IncorrectItem.Count > 0)
                        {
                            foreach (MemberMedsAllergies ItemToBackup in IncorrectItem)
                            {
                                MergedMemberMedsAllergies BackUpItem = new MergedMemberMedsAllergies();
                                BackUpItem.added_via_portal = ItemToBackup.added_via_portal;
                                BackUpItem.creation_date = ItemToBackup.creation_date;
                                BackUpItem.creation_user_id = ItemToBackup.creation_user_id;
                                BackUpItem.date_deleted = ItemToBackup.date_deleted;
                                BackUpItem.deleted_flag = ItemToBackup.deleted_flag;
                                BackUpItem.descr = ItemToBackup.descr;
                                BackUpItem.last_update_date = ItemToBackup.last_update_date;
                                BackUpItem.last_update_user_id = ItemToBackup.last_update_user_id;
                                BackUpItem.member_id = ItemToBackup.member_id;
                                BackUpItem.member_meds_allergies_id = ItemToBackup.member_meds_allergies_id;
                                BackUpItem.updated_via_portal = ItemToBackup.updated_via_portal;
                                BackUpItem.user_deleted = ItemToBackup.user_deleted;

                                db.DbmsMergedMemberMedsAllergies.Add(BackUpItem);
                                int BackedUpResults = db.SaveChanges();

                                if (!BackedUp)
                                {
                                    if (BackedUpResults > 0)
                                    {
                                        BackedUp = true;
                                    }
                                }
                            }
                        }
                        else
                        {
                            BackedUp = true;
                        }
                    }
                    else
                    {
                        BackedUp = true;
                    }
                }

                return BackedUp;
            }
            catch (Exception ex)
            {
                return BackedUp;
            }
        }

        private bool BackupMemberMeds(Guid IncorrectMemberId)
        {
            bool BackedUp = false;

            try
            {
                List<MemberMeds> IncorrectItem = new List<MemberMeds>();

                using (var db = new ICMS2DbContext())
                {
                    IncorrectItem = (from incitems in db.DbmsMemberMeds
                                     where incitems.member_id == IncorrectMemberId
                                     select incitems).ToList();

                    if (IncorrectItem != null)
                    {
                        if (IncorrectItem.Count > 0)
                        {
                            foreach (MemberMeds ItemToBackup in IncorrectItem)
                            {
                                MergedMemberMeds BackUpItem = new MergedMemberMeds();
                                BackUpItem.added_via_portal = ItemToBackup.added_via_portal;
                                BackUpItem.columbia_medications_id = ItemToBackup.columbia_medications_id;
                                BackUpItem.creation_date = ItemToBackup.creation_date;
                                BackUpItem.date_deleted = ItemToBackup.date_deleted;
                                BackUpItem.deleted_flag = ItemToBackup.deleted_flag;
                                BackUpItem.drug_class = ItemToBackup.drug_class;
                                BackUpItem.end_date = ItemToBackup.end_date;
                                BackUpItem.form = ItemToBackup.form;
                                BackUpItem.frequency = ItemToBackup.frequency;
                                BackUpItem.last_update_date = ItemToBackup.last_update_date;
                                BackUpItem.last_update_user_id = ItemToBackup.last_update_user_id;
                                BackUpItem.medication_name = ItemToBackup.medication_name;
                                BackUpItem.medication_sequence = ItemToBackup.medication_sequence;
                                BackUpItem.member_id = ItemToBackup.member_id;
                                BackUpItem.member_meds_id = ItemToBackup.member_meds_id;
                                BackUpItem.NDC = ItemToBackup.NDC;
                                BackUpItem.number_of_refills = ItemToBackup.number_of_refills;
                                BackUpItem.nurses_note = ItemToBackup.nurses_note;
                                BackUpItem.prescribed_by = ItemToBackup.prescribed_by;
                                BackUpItem.quantity = ItemToBackup.quantity;
                                BackUpItem.refill = ItemToBackup.refill;
                                BackUpItem.route = ItemToBackup.route;
                                BackUpItem.rx_drug = ItemToBackup.rx_drug;
                                BackUpItem.r_member_admission_id = ItemToBackup.r_member_admission_id;
                                BackUpItem.sims_er_id = ItemToBackup.sims_er_id;
                                BackUpItem.sims_er_medication = ItemToBackup.sims_er_medication;
                                BackUpItem.source_of_information = ItemToBackup.source_of_information;
                                BackUpItem.start_date = ItemToBackup.start_date;
                                BackUpItem.strength = ItemToBackup.strength;
                                BackUpItem.system_user_id = ItemToBackup.system_user_id;
                                BackUpItem.updated_via_portal = ItemToBackup.updated_via_portal;
                                BackUpItem.user_deleted = ItemToBackup.user_deleted;

                                db.DbmsMergedMemberMeds.Add(BackUpItem);
                                int BackedUpResults = db.SaveChanges();

                                if (!BackedUp)
                                {
                                    if (BackedUpResults > 0)
                                    {
                                        BackedUp = true;
                                    }
                                }
                            }
                        }
                        else
                        {
                            BackedUp = true;
                        }
                    }
                    else
                    {
                        BackedUp = true;
                    }
                }

                return BackedUp;
            }
            catch (Exception ex)
            {
                return BackedUp;
            }
        }

        private bool BackupMemberMedsHighDollarTasks(Guid IncorrectMemberId)
        {
            bool BackedUp = false;

            try
            {
                List<MemberMedsHighDollarTask> IncorrectItem = new List<MemberMedsHighDollarTask>();

                using (var db = new ICMS2DbContext())
                {
                    IncorrectItem = (from incitems in db.DbmsMemberMedsHighDollarTask
                                     where incitems.member_id == IncorrectMemberId
                                     select incitems).ToList();

                    if (IncorrectItem != null)
                    {
                        if (IncorrectItem.Count > 0)
                        {
                            foreach (MemberMedsHighDollarTask ItemToBackup in IncorrectItem)
                            {
                                MergedMemberMedsHighDollarTask BackUpItem = new MergedMemberMedsHighDollarTask();
                                BackUpItem.actual_end_action_date = ItemToBackup.actual_end_action_date;
                                BackUpItem.actual_start_action_date = ItemToBackup.actual_start_action_date;
                                BackUpItem.assigned_to_system_user_id = ItemToBackup.assigned_to_system_user_id;
                                BackUpItem.completed= ItemToBackup.completed;
                                BackUpItem.completed_by_system_user_id = ItemToBackup.completed_by_system_user_id;
                                BackUpItem.completed_date= ItemToBackup.completed_date;
                                BackUpItem.disabled= ItemToBackup.disabled;
                                BackUpItem.drug_name= ItemToBackup.drug_name;
                                BackUpItem.end_action_date= ItemToBackup.end_action_date;
                                BackUpItem.entered_by_system_user_id= ItemToBackup.entered_by_system_user_id;
                                BackUpItem.entered_date= ItemToBackup.entered_date;
                                BackUpItem.last_update_date= ItemToBackup.last_update_date;
                                BackUpItem.last_update_user_id= ItemToBackup.last_update_user_id;
                                BackUpItem.medication_sequence= ItemToBackup.medication_sequence;
                                BackUpItem.member_id= ItemToBackup.member_id;
                                BackUpItem.member_meds_high_dollar_task_id= ItemToBackup.member_meds_high_dollar_task_id;
                                BackUpItem.member_meds_id= ItemToBackup.member_meds_id;
                                BackUpItem.start_action_date= ItemToBackup.start_action_date;
                                BackUpItem.task_assigned_via_portal= ItemToBackup.task_assigned_via_portal;

                                db.DbmsMergedMemberMedsHighDollarTask.Add(BackUpItem);
                                int BackedUpResults = db.SaveChanges();

                                if (!BackedUp)
                                {
                                    if (BackedUpResults > 0)
                                    {
                                        BackedUp = true;
                                    }
                                }
                            }
                        }
                        else
                        {
                            BackedUp = true;
                        }
                    }
                    else
                    {
                        BackedUp = true;
                    }
                }

                return BackedUp;
            }
            catch (Exception ex)
            {
                return BackedUp;
            }
        }

        private bool BackupMemberMedsHistories(Guid IncorrectMemberId)
        {
            bool BackedUp = false;

            try
            {
                List<MemberMedsHistory> IncorrectItem = new List<MemberMedsHistory>();

                using (var db = new ICMS2DbContext())
                {
                    IncorrectItem = (from incitems in db.DbmsMemberMedsHistory
                                     where incitems.member_id == IncorrectMemberId
                                     select incitems).ToList();

                    if (IncorrectItem != null)
                    {
                        if (IncorrectItem.Count > 0)
                        {
                            foreach (MemberMedsHistory ItemToBackup in IncorrectItem)
                            {
                                MergedMemberMedsHistory BackUpItem = new MergedMemberMedsHistory();
                                BackUpItem.date_deleted = ItemToBackup.date_deleted;
                                BackUpItem.deleted_flag = ItemToBackup.deleted_flag;
                                BackUpItem.drug_class = ItemToBackup.drug_class;
                                BackUpItem.end_date = ItemToBackup.end_date;
                                BackUpItem.form = ItemToBackup.form;
                                BackUpItem.frequency = ItemToBackup.frequency;
                                BackUpItem.medication_name = ItemToBackup.medication_name;
                                BackUpItem.medication_name = ItemToBackup.medication_name;
                                BackUpItem.medication_sequence = ItemToBackup.medication_sequence;
                                BackUpItem.member_id = ItemToBackup.member_id;
                                BackUpItem.member_meds_id = ItemToBackup.member_meds_id;
                                BackUpItem.NDC = ItemToBackup.NDC;
                                BackUpItem.number_of_refills = ItemToBackup.number_of_refills;
                                BackUpItem.nurses_note = ItemToBackup.nurses_note;
                                BackUpItem.prescribed_by = ItemToBackup.prescribed_by;
                                BackUpItem.quantity = ItemToBackup.quantity;
                                BackUpItem.refill = ItemToBackup.refill;
                                BackUpItem.route = ItemToBackup.route;
                                BackUpItem.rx_drug = ItemToBackup.rx_drug;
                                BackUpItem.source_of_information = ItemToBackup.source_of_information;
                                BackUpItem.start_date = ItemToBackup.start_date;
                                BackUpItem.strength = ItemToBackup.strength;
                                BackUpItem.system_user_id = ItemToBackup.system_user_id;
                                BackUpItem.user_deleted = ItemToBackup.user_deleted;

                                db.DbmsMergedMemberMedsHistory.Add(BackUpItem);
                                int BackedUpResults = db.SaveChanges();

                                if (!BackedUp)
                                {
                                    if (BackedUpResults > 0)
                                    {
                                        BackedUp = true;
                                    }
                                }
                            }
                        }
                        else
                        {
                            BackedUp = true;
                        }
                    }
                    else
                    {
                        BackedUp = true;
                    }
                }

                return BackedUp;
            }
            catch (Exception ex)
            {
                return BackedUp;
            }
        }

        private bool BackupMemberMedsPharmacyFeeds(Guid IncorrectMemberId)
        {
            bool BackedUp = false;

            try
            {
                List<MemberMedsPharmacyFeed> IncorrectItem = new List<MemberMedsPharmacyFeed>();

                using (var db = new ICMS2DbContext())
                {
                    IncorrectItem = (from incitems in db.DbmsMemberMedsPharmacyFeed
                                     where incitems.member_id == IncorrectMemberId
                                     select incitems).ToList();

                    if (IncorrectItem != null)
                    {
                        if (IncorrectItem.Count > 0)
                        {
                            foreach (MemberMedsPharmacyFeed ItemToBackup in IncorrectItem)
                            {
                                MergedMemberMedsPharmacyFeed BackUpItem = new MergedMemberMedsPharmacyFeed();
                                BackUpItem.amount_billed = ItemToBackup.amount_billed;
                                BackUpItem.co_pay_amount = ItemToBackup.co_pay_amount;
                                BackUpItem.current_refill_counter = ItemToBackup.current_refill_counter;
                                BackUpItem.date_updated = ItemToBackup.date_updated;
                                BackUpItem.dispense_as_written = ItemToBackup.dispense_as_written;
                                BackUpItem.dispensing_fee_submitted = ItemToBackup.dispensing_fee_submitted;
                                BackUpItem.drug_class = ItemToBackup.drug_class;
                                BackUpItem.drug_supply_days = ItemToBackup.drug_supply_days;
                                BackUpItem.drug_type = ItemToBackup.drug_type;
                                BackUpItem.filled_date = ItemToBackup.filled_date;
                                BackUpItem.group_number = ItemToBackup.group_number;
                                BackUpItem.ingredient_cost = ItemToBackup.ingredient_cost;
                                BackUpItem.is_wishard = ItemToBackup.is_wishard;
                                BackUpItem.max_refills_authorized = ItemToBackup.max_refills_authorized;
                                BackUpItem.medication_name = ItemToBackup.medication_name;
                                BackUpItem.member_id = ItemToBackup.member_id;
                                BackUpItem.member_location = ItemToBackup.member_location;
                                BackUpItem.member_meds_pharmacy_feed_id = ItemToBackup.member_meds_pharmacy_feed_id;
                                BackUpItem.ndc = ItemToBackup.ndc;
                                BackUpItem.other_payor_amount = ItemToBackup.other_payor_amount;
                                BackUpItem.postage_amount_claimed = ItemToBackup.postage_amount_claimed;
                                BackUpItem.prescribed_by = ItemToBackup.prescribed_by;
                                BackUpItem.prescription_date_written = ItemToBackup.prescription_date_written;
                                BackUpItem.quantity = ItemToBackup.quantity;
                                BackUpItem.refill = ItemToBackup.refill;
                                BackUpItem.relationship_code = ItemToBackup.relationship_code;
                                BackUpItem.unit_dose_indicator = ItemToBackup.unit_dose_indicator;
                                BackUpItem.wishard_claim_id = ItemToBackup.wishard_claim_id;

                                db.DbmsMergedMemberMedsPharmacyFeed.Add(BackUpItem);
                                int BackedUpResults = db.SaveChanges();

                                if (!BackedUp)
                                {
                                    if (BackedUpResults > 0)
                                    {
                                        BackedUp = true;
                                    }
                                }
                            }
                        }
                        else
                        {
                            BackedUp = true;
                        }
                    }
                    else
                    {
                        BackedUp = true;
                    }
                }

                return BackedUp;
            }
            catch (Exception ex)
            {
                return BackedUp;
            }
        }

        private bool BackupMemberNoteAttachments(Guid IncorrectMemberId)
        {
            bool BackedUp = false;

            try
            {
                List<MemberNotesAttachment> IncorrectItem = new List<MemberNotesAttachment>();

                using (var db = new ICMS2DbContext())
                {
                    IncorrectItem = (from incitems in db.DbmsMemberNotesAttachment
                                     where incitems.member_id == IncorrectMemberId
                                     select incitems).ToList();

                    if (IncorrectItem != null)
                    {
                        if (IncorrectItem.Count > 0)
                        {
                            foreach (MemberNotesAttachment ItemToBackup in IncorrectItem)
                            {
                                MergedMemberNotesAttachment BackUpItem = new MergedMemberNotesAttachment();
                                BackUpItem.care_coordination = ItemToBackup.care_coordination;
                                BackUpItem.creation_user_id = ItemToBackup.creation_user_id;
                                BackUpItem.entered_via_web = ItemToBackup.entered_via_web;
                                BackUpItem.file_blob = ItemToBackup.file_blob;
                                BackUpItem.file_identifier = ItemToBackup.file_identifier;
                                BackUpItem.internal_patient = ItemToBackup.internal_patient;
                                BackUpItem.member_id = ItemToBackup.member_id;
                                BackUpItem.record_date = ItemToBackup.record_date;


                                db.DbmsMergedMemberNotesAttachment.Add(BackUpItem);
                                int BackedUpResults = db.SaveChanges();

                                if (!BackedUp)
                                {
                                    if (BackedUpResults > 0)
                                    {
                                        BackedUp = true;
                                    }
                                }
                            }
                        }
                        else
                        {
                            BackedUp = true;
                        }
                    }
                    else
                    {
                        BackedUp = true;
                    }
                }

                return BackedUp;
            }
            catch (Exception ex)
            {
                return BackedUp;
            }
        }

        private bool BackupMemberNotes(Guid IncorrectMemberId)
        {
            bool BackedUp = false;

            try
            {
                List<MemberNotes> IncorrectItem = new List<MemberNotes>();

                using (var db = new ICMS2DbContext())
                {
                    IncorrectItem = (from incitems in db.DbmsMemberNotes
                                     where incitems.member_id == IncorrectMemberId
                                     select incitems).ToList();

                    if (IncorrectItem != null)
                    {
                        if (IncorrectItem.Count > 0)
                        {
                            foreach (MemberNotes ItemToBackup in IncorrectItem)
                            {
                                MergedMemberNotes BackUpItem = new MergedMemberNotes();
                                BackUpItem.adhoc = ItemToBackup.adhoc;
                                BackUpItem.billing_id = ItemToBackup.billing_id;
                                BackUpItem.care_coordination = ItemToBackup.care_coordination;
                                BackUpItem.care_plan_note = ItemToBackup.care_plan_note;
                                BackUpItem.date_lcm_activity_report_generated = ItemToBackup.date_lcm_activity_report_generated;
                                BackUpItem.date_lcm_report_generated = ItemToBackup.date_lcm_report_generated;
                                BackUpItem.employer = ItemToBackup.employer;
                                BackUpItem.end_time = ItemToBackup.end_time;
                                BackUpItem.entered_via_web = ItemToBackup.entered_via_web;
                                BackUpItem.evaluation_text = ItemToBackup.evaluation_text;
                                BackUpItem.internal_patient = ItemToBackup.internal_patient;
                                BackUpItem.lab = ItemToBackup.lab;
                                BackUpItem.lcm_activity_followup_id = ItemToBackup.lcm_activity_followup_id;
                                BackUpItem.lcm_activity_report = ItemToBackup.lcm_activity_report;
                                BackUpItem.lcm_followup_id = ItemToBackup.lcm_followup_id;
                                BackUpItem.lcn = ItemToBackup.lcn;
                                BackUpItem.lcn_case_number = ItemToBackup.lcn_case_number;
                                BackUpItem.member_call = ItemToBackup.member_call;
                                BackUpItem.member_id = ItemToBackup.member_id;
                                BackUpItem.note_billed = ItemToBackup.note_billed;
                                BackUpItem.note_billed_marked_date = ItemToBackup.note_billed_marked_date;
                                BackUpItem.note_sent_in_file = ItemToBackup.note_sent_in_file;
                                BackUpItem.note_sent_in_file_date = ItemToBackup.note_sent_in_file_date;
                                BackUpItem.override_date = ItemToBackup.override_date;
                                BackUpItem.radiology = ItemToBackup.radiology;
                                BackUpItem.record_date = ItemToBackup.record_date;
                                BackUpItem.record_seq_num = ItemToBackup.record_seq_num;
                                BackUpItem.RN_notes = ItemToBackup.RN_notes;
                                BackUpItem.std_note = ItemToBackup.std_note;
                                BackUpItem.telephone = ItemToBackup.telephone;
                                BackUpItem.updated_date = ItemToBackup.updated_date;
                                BackUpItem.updated_user_id = ItemToBackup.updated_user_id;
                                BackUpItem.user_updated = ItemToBackup.user_updated;
                                BackUpItem.wc_note = ItemToBackup.wc_note;
                                BackUpItem.web_client_note = ItemToBackup.web_client_note;

                                db.DbmsMergedMemberNotes.Add(BackUpItem);
                                int BackedUpResults = db.SaveChanges();

                                if (!BackedUp)
                                {
                                    if (BackedUpResults > 0)
                                    {
                                        BackedUp = true;
                                    }
                                }
                            }
                        }
                        else
                        {
                            BackedUp = true;
                        }
                    }
                    else
                    {
                        BackedUp = true;
                    }
                }

                return BackedUp;
            }
            catch (Exception ex)
            {
                return BackedUp;
            }
        }

        private bool BackupMemberNotesSummaries(Guid IncorrectMemberId)
        {
            bool BackedUp = false;

            try
            {
                List<MemberNotesSummary> IncorrectItem = new List<MemberNotesSummary>();

                using (var db = new ICMS2DbContext())
                {
                    IncorrectItem = (from incitems in db.DbmsMemberNotesSummary
                                     where incitems.member_id == IncorrectMemberId
                                     select incitems).ToList();

                    if (IncorrectItem != null)
                    {
                        if (IncorrectItem.Count > 0)
                        {
                            foreach (MemberNotesSummary ItemToBackup in IncorrectItem)
                            {
                                MergedMemberNotesSummary BackUpItem = new MergedMemberNotesSummary();
                                BackUpItem.creation_date = ItemToBackup.creation_date;
                                BackUpItem.creation_system_user_id = ItemToBackup.creation_system_user_id;
                                BackUpItem.evaluation_text = ItemToBackup.evaluation_text;
                                BackUpItem.member_id = ItemToBackup.member_id;
                                BackUpItem.member_notes_summary_id = ItemToBackup.member_notes_summary_id;
                                BackUpItem.month_closed = ItemToBackup.month_closed;
                                BackUpItem.record_date = ItemToBackup.record_date;

                                db.DbmsMergedMemberNotesSummary.Add(BackUpItem);
                                int BackedUpResults = db.SaveChanges();

                                if (!BackedUp)
                                {
                                    if (BackedUpResults > 0)
                                    {
                                        BackedUp = true;
                                    }
                                }
                            }
                        }
                        else
                        {
                            BackedUp = true;
                        }
                    }
                    else
                    {
                        BackedUp = true;
                    }
                }

                return BackedUp;
            }
            catch (Exception ex)
            {
                return BackedUp;
            }
        }

        private bool BackupMemberPcps(Guid IncorrectMemberId)
        {
            bool BackedUp = false;

            try
            {
                List<MemberPcp> IncorrectItem = new List<MemberPcp>();

                using (var db = new ICMS2DbContext())
                {
                    IncorrectItem = (from incitems in db.DbmsMemberPcp
                                     where incitems.member_id == IncorrectMemberId
                                     select incitems).ToList();

                    if (IncorrectItem != null)
                    {
                        if (IncorrectItem.Count > 0)
                        {
                            foreach (MemberPcp ItemToBackup in IncorrectItem)
                            {
                                MergedMemberPcp BackUpItem = new MergedMemberPcp();
                                BackUpItem.member_id = ItemToBackup.member_id;
                                BackUpItem.pcp_eff_date = ItemToBackup.pcp_eff_date;
                                BackUpItem.pcp_id = ItemToBackup.pcp_id;
                                BackUpItem.pcp_term_date = ItemToBackup.pcp_term_date;


                                db.DbmsMergedMemberPcp.Add(BackUpItem);
                                int BackedUpResults = db.SaveChanges();

                                if (!BackedUp)
                                {
                                    if (BackedUpResults > 0)
                                    {
                                        BackedUp = true;
                                    }
                                }
                            }
                        }
                        else
                        {
                            BackedUp = true;
                        }
                    }
                    else
                    {
                        BackedUp = true;
                    }
                }

                return BackedUp;
            }
            catch (Exception ex)
            {
                return BackedUp;
            }
        }

        private bool BackupMemberPhones(Guid IncorrectMemberId)
        {
            bool BackedUp = false;

            try
            {
                List<MemberPhone> IncorrectItem = new List<MemberPhone>();

                using (var db = new ICMS2DbContext())
                {
                    IncorrectItem = (from incitems in db.DbmsMemberPhone
                                     where incitems.member_id == IncorrectMemberId
                                     select incitems).ToList();

                    if (IncorrectItem != null)
                    {
                        if (IncorrectItem.Count > 0)
                        {
                            foreach (MemberPhone ItemToBackup in IncorrectItem)
                            {
                                MergedMemberPhone BackUpItem = new MergedMemberPhone();
                                BackUpItem.member_id = ItemToBackup.member_id;
                                BackUpItem.member_phone_id = ItemToBackup.member_phone_id;
                                BackUpItem.phone_note = ItemToBackup.phone_note;
                                BackUpItem.phone_number = ItemToBackup.phone_number;
                                BackUpItem.phone_type_id = ItemToBackup.phone_type_id;

                                db.DbmsMergedMemberPhone.Add(BackUpItem);
                                int BackedUpResults = db.SaveChanges();

                                if (!BackedUp)
                                {
                                    if (BackedUpResults > 0)
                                    {
                                        BackedUp = true;
                                    }
                                }
                            }
                        }
                        else
                        {
                            BackedUp = true;
                        }
                    }
                    else
                    {
                        BackedUp = true;
                    }
                }

                return BackedUp;
            }
            catch (Exception ex)
            {
                return BackedUp;
            }
        }

        private bool BackupMemberPictures(Guid IncorrectMemberId)
        {
            bool BackedUp = false;

            try
            {
                List<MemberPictures> IncorrectItem = new List<MemberPictures>();

                using (var db = new ICMS2DbContext())
                {
                    IncorrectItem = (from incitems in db.DbmsMemberPictures
                                     where incitems.member_id == IncorrectMemberId
                                     select incitems).ToList();

                    if (IncorrectItem != null)
                    {
                        if (IncorrectItem.Count > 0)
                        {
                            foreach (MemberPictures ItemToBackup in IncorrectItem)
                            {
                                MergedMemberPictures BackUpItem = new MergedMemberPictures();
                                BackUpItem.image_path = ItemToBackup.image_path;
                                BackUpItem.member_id = ItemToBackup.member_id;

                                db.DbmsMergedMemberPictures.Add(BackUpItem);
                                int BackedUpResults = db.SaveChanges();

                                if (!BackedUp)
                                {
                                    if (BackedUpResults > 0)
                                    {
                                        BackedUp = true;
                                    }
                                }
                            }
                        }
                        else
                        {
                            BackedUp = true;
                        }
                    }
                    else
                    {
                        BackedUp = true;
                    }
                }

                return BackedUp;
            }
            catch (Exception ex)
            {
                return BackedUp;
            }
        }

        private bool BackupMemberProfilePictures(Guid IncorrectMemberId)
        {
            bool BackedUp = false;

            try
            {
                List<MemberProfilePicture> IncorrectItem = new List<MemberProfilePicture>();

                using (var db = new ICMS2DbContext())
                {
                    IncorrectItem = (from incitems in db.DbmsMemberProfilePicture
                                     where incitems.member_id == IncorrectMemberId
                                     select incitems).ToList();

                    if (IncorrectItem != null)
                    {
                        if (IncorrectItem.Count > 0)
                        {
                            foreach (MemberProfilePicture ItemToBackup in IncorrectItem)
                            {
                                MergedMemberProfilePicture BackUpItem = new MergedMemberProfilePicture();
                                BackUpItem.content_type = ItemToBackup.content_type;
                                BackUpItem.creation_date = ItemToBackup.creation_date;
                                BackUpItem.creation_user_id = ItemToBackup.creation_user_id;
                                BackUpItem.file_blob = ItemToBackup.file_blob;
                                BackUpItem.last_update_date = ItemToBackup.last_update_date;
                                BackUpItem.last_update_user_id = ItemToBackup.last_update_user_id;
                                BackUpItem.member_id = ItemToBackup.member_id;
                                BackUpItem.member_profile_picture_id = ItemToBackup.member_profile_picture_id;
                                BackUpItem.picture_file_name = ItemToBackup.picture_file_name;
                                BackUpItem.sims_profile_picture = ItemToBackup.sims_profile_picture;

                                db.DbmsMergedMemberProfilePicture.Add(BackUpItem);
                                int BackedUpResults = db.SaveChanges();

                                if (!BackedUp)
                                {
                                    if (BackedUpResults > 0)
                                    {
                                        BackedUp = true;
                                    }
                                }
                            }
                        }
                        else
                        {
                            BackedUp = true;
                        }
                    }
                    else
                    {
                        BackedUp = true;
                    }
                }

                return BackedUp;
            }
            catch (Exception ex)
            {
                return BackedUp;
            }
        }

        private bool BackupMemberPrograms(Guid IncorrectMemberId)
        {
            bool BackedUp = false;

            try
            {
                List<MemberProgram> IncorrectItem = new List<MemberProgram>();

                using (var db = new ICMS2DbContext())
                {
                    IncorrectItem = (from incitems in db.DbmsMemberProgram
                                     where incitems.member_id == IncorrectMemberId
                                     select incitems).ToList();

                    if (IncorrectItem != null)
                    {
                        if (IncorrectItem.Count > 0)
                        {
                            foreach (MemberProgram ItemToBackup in IncorrectItem)
                            {
                                MergedMemberProgram BackUpItem = new MergedMemberProgram();
                                BackUpItem.care_coordination_optout = ItemToBackup.care_coordination_optout;
                                BackUpItem.care_coordination_optout_date = ItemToBackup.care_coordination_optout_date;
                                BackUpItem.ccm_optout = ItemToBackup.ccm_optout;
                                BackUpItem.ccm_optout_date = ItemToBackup.ccm_optout_date;
                                BackUpItem.cm_optout = ItemToBackup.cm_optout;
                                BackUpItem.cm_optout_date = ItemToBackup.cm_optout_date;
                                BackUpItem.dm_optout = ItemToBackup.dm_optout;
                                BackUpItem.dm_optout_date = ItemToBackup.dm_optout_date;
                                BackUpItem.last_userid = ItemToBackup.last_userid;
                                BackUpItem.lcm_optout = ItemToBackup.lcm_optout;
                                BackUpItem.lcm_optout_date = ItemToBackup.lcm_optout_date;
                                BackUpItem.lcm_sr_optout = ItemToBackup.lcm_sr_optout;
                                BackUpItem.lcm_sr_optout_date = ItemToBackup.lcm_sr_optout_date;
                                BackUpItem.lifestyle_optout = ItemToBackup.lifestyle_optout;
                                BackUpItem.lifestyle_optout_date = ItemToBackup.lifestyle_optout_date;
                                BackUpItem.member_id = ItemToBackup.member_id;

                                db.DbmsMergedMemberProgram.Add(BackUpItem);
                                int BackedUpResults = db.SaveChanges();

                                if (!BackedUp)
                                {
                                    if (BackedUpResults > 0)
                                    {
                                        BackedUp = true;
                                    }
                                }
                            }
                        }
                        else
                        {
                            BackedUp = true;
                        }
                    }
                    else
                    {
                        BackedUp = true;
                    }
                }

                return BackedUp;
            }
            catch (Exception ex)
            {
                return BackedUp;
            }
        }

        private bool BackupMemberQualityCareNotes(Guid IncorrectMemberId)
        {
            bool BackedUp = false;

            try
            { 
                List<rQualityCareNotes> IncorrectItem = new List<rQualityCareNotes>();

                using (var db = new ICMS2DbContext())
                {
                    IncorrectItem = (from incitems in db.DbmsQualityCareNotes
                                     where incitems.member_id == IncorrectMemberId
                                     select incitems).ToList();

                    if (IncorrectItem != null)
                    {
                        if (IncorrectItem.Count > 0)
                        {
                            foreach (rQualityCareNotes ItemToBackup in IncorrectItem)
                            {
                                MergedrQualityCareNotes BackUpItem = new MergedrQualityCareNotes();
                                BackUpItem.evaluation_text = ItemToBackup.evaluation_text;
                                BackUpItem.member_id = ItemToBackup.member_id;
                                BackUpItem.qoc_reason_id = ItemToBackup.qoc_reason_id;
                                BackUpItem.quality_care_type_id = ItemToBackup.quality_care_type_id;
                                BackUpItem.record_date = ItemToBackup.record_date;
                                BackUpItem.record_seq_num = ItemToBackup.record_seq_num;
                                BackUpItem.referral_number = ItemToBackup.referral_number;
                                BackUpItem.system_user_id = ItemToBackup.system_user_id;

                                db.DbmsMergedrQualityCareNotes.Add(BackUpItem);
                                int BackedUpResults = db.SaveChanges();

                                if (!BackedUp)
                                {
                                    if (BackedUpResults > 0)
                                    {
                                        BackedUp = true;
                                    }
                                }
                            }
                        }
                        else
                        {
                            BackedUp = true;
                        }
                    }
                    else
                    {
                        BackedUp = true;
                    }
                }

                return BackedUp;
            }
            catch (Exception ex)
            {
                return BackedUp;
            }
        }

        private bool BackupMemberReferralMedicines(Guid IncorrectMemberId)
        {
            bool BackedUp = false;

            try
            {
                List<rMemberReferralMedicine> IncorrectItem = new List<rMemberReferralMedicine>();

                using (var db = new ICMS2DbContext())
                {
                    IncorrectItem = (from incitems in db.DbmsMemberReferralMedicine
                                     where incitems.member_id == IncorrectMemberId
                                     select incitems).ToList();

                    if (IncorrectItem != null)
                    {
                        if (IncorrectItem.Count > 0)
                        {
                            foreach (rMemberReferralMedicine ItemToBackup in IncorrectItem)
                            {
                                MergedrMemberReferralMedicine BackUpItem = new MergedrMemberReferralMedicine();
                                BackUpItem.creation_date = ItemToBackup.creation_date;
                                BackUpItem.creation_user_id = ItemToBackup.creation_user_id;
                                BackUpItem.decision_id = ItemToBackup.decision_id;
                                BackUpItem.entered_via_web = ItemToBackup.entered_via_web;
                                BackUpItem.estimated_amount = ItemToBackup.estimated_amount;
                                BackUpItem.id = ItemToBackup.id;
                                BackUpItem.last_update_date = ItemToBackup.last_update_date;
                                BackUpItem.last_update_user_id = ItemToBackup.last_update_user_id;
                                BackUpItem.line_number = ItemToBackup.line_number;
                                BackUpItem.medicine_code = ItemToBackup.medicine_code;
                                BackUpItem.member_id = ItemToBackup.member_id;
                                BackUpItem.modifier1 = ItemToBackup.modifier1;
                                BackUpItem.referral_number = ItemToBackup.referral_number;
                                BackUpItem.system_role_r_service_category_types_id = ItemToBackup.system_role_r_service_category_types_id;
                                BackUpItem.unit = ItemToBackup.unit;

                                db.DbmsMergedrMemberReferralMedicine.Add(BackUpItem);
                                int BackedUpResults = db.SaveChanges();

                                if (!BackedUp)
                                {
                                    if (BackedUpResults > 0)
                                    {
                                        BackedUp = true;
                                    }
                                }
                            }
                        }
                        else
                        {
                            BackedUp = true;
                        }
                    }
                    else
                    {
                        BackedUp = true;
                    }
                }

                return BackedUp;
            }
            catch (Exception ex)
            {
                return BackedUp;
            }
        }

        private bool BackupMemberReferralQocs(Guid IncorrectMemberId)
        {
            bool BackedUp = false;

            try
            {
                List<rMemberReferralQoc> IncorrectItem = new List<rMemberReferralQoc>();

                using (var db = new ICMS2DbContext())
                {
                    IncorrectItem = (from incitems in db.DbmsMemberReferralQoc
                                     where incitems.member_id == IncorrectMemberId
                                     select incitems).ToList();

                    if (IncorrectItem != null)
                    {
                        if (IncorrectItem.Count > 0)
                        {
                            foreach (rMemberReferralQoc ItemToBackup in IncorrectItem)
                            {
                                MergedrMemberReferralQoc BackUpItem = new MergedrMemberReferralQoc();
                                BackUpItem.inpat_outpat = ItemToBackup.inpat_outpat;
                                BackUpItem.member_id = ItemToBackup.member_id;
                                BackUpItem.member_referral_qoc_id = ItemToBackup.member_referral_qoc_id;
                                BackUpItem.qoc_notes = ItemToBackup.qoc_notes;
                                BackUpItem.qoc_reason_id = ItemToBackup.qoc_reason_id;
                                BackUpItem.referral_number = ItemToBackup.referral_number;

                                db.DbmsMergedrMemberReferralQoc.Add(BackUpItem);
                                int BackedUpResults = db.SaveChanges();

                                if (!BackedUp)
                                {
                                    if (BackedUpResults > 0)
                                    {
                                        BackedUp = true;
                                    }
                                }
                            }
                        }
                        else
                        {
                            BackedUp = true;
                        }
                    }
                    else
                    {
                        BackedUp = true;
                    }
                }

                return BackedUp;
            }
            catch (Exception ex)
            {
                return BackedUp;
            }
        }

        private bool BackupMemberReferralUpdatesWorkflow(Guid IncorrectMemberId)
        {
            bool BackedUp = false;

            try
            {
                List<rMemberReferralUpdatesWorkflow> IncorrectItem = new List<rMemberReferralUpdatesWorkflow>();

                using (var db = new ICMS2DbContext())
                {
                    IncorrectItem = (from incitems in db.DbmsMemberReferralUpdatesWorkflow
                                     where incitems.member_id == IncorrectMemberId
                                     select incitems).ToList();

                    if (IncorrectItem != null)
                    {
                        if (IncorrectItem.Count > 0)
                        {
                            foreach (rMemberReferralUpdatesWorkflow ItemToBackup in IncorrectItem)
                            {
                                MergedrMemberReferralUpdatesWorkflow BackUpItem = new MergedrMemberReferralUpdatesWorkflow();
                                BackUpItem.created_by_user_id = ItemToBackup.created_by_user_id;
                                BackUpItem.created_date = ItemToBackup.created_date;
                                BackUpItem.description = ItemToBackup.description;
                                BackUpItem.eventtype_id = ItemToBackup.eventtype_id;
                                BackUpItem.member_id = ItemToBackup.member_id;
                                BackUpItem.referral_number = ItemToBackup.referral_number;
                                BackUpItem.r_member_referral_updates_workflow_id = ItemToBackup.r_member_referral_updates_workflow_id;

                                db.DbmsMergedrMemberReferralUpdatesWorkflow.Add(BackUpItem);
                                int BackedUpResults = db.SaveChanges();

                                if (!BackedUp)
                                {
                                    if (BackedUpResults > 0)
                                    {
                                        BackedUp = true;
                                    }
                                }
                            }
                        }
                        else
                        {
                            BackedUp = true;
                        }
                    }
                    else
                    {
                        BackedUp = true;
                    }
                }

                return BackedUp;
            }
            catch (Exception ex)
            {
                return BackedUp;
            }
        }

        private bool BackupMemberRelativeDiseaseHistories(Guid IncorrectMemberId)
        {
            bool BackedUp = false;

            try
            {
                List<MemberRelativeDiseaseHistory> IncorrectItem = new List<MemberRelativeDiseaseHistory>();

                using (var db = new ICMS2DbContext())
                {
                    IncorrectItem = (from incitems in db.DbmsMemberRelativeDiseaseHistory
                                     where incitems.member_id == IncorrectMemberId
                                     select incitems).ToList();

                    if (IncorrectItem != null)
                    {
                        if (IncorrectItem.Count > 0)
                        {
                            foreach (MemberRelativeDiseaseHistory ItemToBackup in IncorrectItem)
                            {
                                MergedMemberRelativeDiseaseHistory BackUpItem = new MergedMemberRelativeDiseaseHistory();
                                BackUpItem.date_deleted = ItemToBackup.date_deleted;
                                BackUpItem.deleted_flag = ItemToBackup.deleted_flag;
                                BackUpItem.disease_condition_id = ItemToBackup.disease_condition_id;
                                BackUpItem.member_id = ItemToBackup.member_id;
                                BackUpItem.member_relative_disease_history_id = ItemToBackup.member_relative_disease_history_id;
                                BackUpItem.relative_id = ItemToBackup.relative_id;
                                BackUpItem.user_deleted = ItemToBackup.user_deleted;

                                db.DbmsMergedMemberRelativeDiseaseHistory.Add(BackUpItem);
                                int BackedUpResults = db.SaveChanges();

                                if (!BackedUp)
                                {
                                    if (BackedUpResults > 0)
                                    {
                                        BackedUp = true;
                                    }
                                }
                            }
                        }
                        else
                        {
                            BackedUp = true;
                        }
                    }
                    else
                    {
                        BackedUp = true;
                    }
                }

                return BackedUp;
            }
            catch (Exception ex)
            {
                return BackedUp;
            }
        }

        private bool BackupMemberRenalTasks(Guid IncorrectMemberId)
        {
            bool BackedUp = false;

            try
            {
                List<MemberRenalTask> IncorrectItem = new List<MemberRenalTask>();

                using (var db = new ICMS2DbContext())
                {
                    IncorrectItem = (from incitems in db.DbmsMemberRenalTask
                                     where incitems.member_id == IncorrectMemberId
                                     select incitems).ToList();

                    if (IncorrectItem != null)
                    {
                        if (IncorrectItem.Count > 0)
                        {
                            foreach (MemberRenalTask ItemToBackup in IncorrectItem)
                            {
                                MergedMemberRenalTask BackUpItem = new MergedMemberRenalTask();
                                BackUpItem.assigned_to_system_user_id = ItemToBackup.assigned_to_system_user_id;
                                BackUpItem.completed = ItemToBackup.completed;
                                BackUpItem.completed_by_system_user_id = ItemToBackup.completed_by_system_user_id;
                                BackUpItem.completed_date = ItemToBackup.completed_date;
                                BackUpItem.date_entered = ItemToBackup.date_entered;
                                BackUpItem.disabled = ItemToBackup.disabled;
                                BackUpItem.end_action_date = ItemToBackup.end_action_date;
                                BackUpItem.entered_by_system_user_id = ItemToBackup.entered_by_system_user_id;
                                BackUpItem.manager_task_entry = ItemToBackup.manager_task_entry;
                                BackUpItem.member_id = ItemToBackup.member_id;
                                BackUpItem.member_renal_task_id = ItemToBackup.member_renal_task_id;
                                BackUpItem.referral_number = ItemToBackup.referral_number;
                                BackUpItem.start_action_date = ItemToBackup.start_action_date;
                                BackUpItem.taskoutcome_id = ItemToBackup.taskoutcome_id;
                                BackUpItem.task_id = ItemToBackup.task_id;
                                BackUpItem.task_note = ItemToBackup.task_note;

                                db.DbmsMergedMemberRenalTask.Add(BackUpItem);
                                int BackedUpResults = db.SaveChanges();

                                if (!BackedUp)
                                {
                                    if (BackedUpResults > 0)
                                    {
                                        BackedUp = true;
                                    }
                                }
                            }
                        }
                        else
                        {
                            BackedUp = true;
                        }
                    }
                    else
                    {
                        BackedUp = true;
                    }
                }

                return BackedUp;
            }
            catch (Exception ex)
            {
                return BackedUp;
            }
        }

        private bool BackupMemberReturnedLetters(Guid IncorrectMemberId)
        {
            bool BackedUp = false;

            try
            {
                List<MemberReturnedLetters> IncorrectItem = new List<MemberReturnedLetters>();

                using (var db = new ICMS2DbContext())
                {
                    IncorrectItem = (from incitems in db.DbmsMemberReturnedLetters
                                     where incitems.member_id == IncorrectMemberId
                                     select incitems).ToList();

                    if (IncorrectItem != null)
                    {
                        if (IncorrectItem.Count > 0)
                        {
                            foreach (MemberReturnedLetters ItemToBackup in IncorrectItem)
                            {
                                MergedMemberReturnedLetters BackUpItem = new MergedMemberReturnedLetters();
                                BackUpItem.creation_date = ItemToBackup.creation_date;
                                BackUpItem.creation_user_id = ItemToBackup.creation_user_id;
                                BackUpItem.last_contact_date = ItemToBackup.last_contact_date;
                                BackUpItem.last_contact_update_date = ItemToBackup.last_contact_update_date;
                                BackUpItem.last_contact_update_user_id = ItemToBackup.last_contact_update_user_id;
                                BackUpItem.member_id = ItemToBackup.member_id;
                                BackUpItem.member_returned_letters_id = ItemToBackup.member_returned_letters_id;
                                BackUpItem.note_record_date = ItemToBackup.note_record_date;
                                BackUpItem.note_type = ItemToBackup.note_type;
                                BackUpItem.no_response_date = ItemToBackup.no_response_date;
                                BackUpItem.no_response_update_date = ItemToBackup.no_response_update_date;
                                BackUpItem.no_response_update_user_id = ItemToBackup.no_response_update_user_id;
                                BackUpItem.referral_number = ItemToBackup.referral_number;
                                BackUpItem.returned_letter_date = ItemToBackup.returned_letter_date;
                                BackUpItem.r_member_referral_letters_id = ItemToBackup.r_member_referral_letters_id;

                                db.DbmsMergedMemberReturnedLetters.Add(BackUpItem);
                                int BackedUpResults = db.SaveChanges();

                                if (!BackedUp)
                                {
                                    if (BackedUpResults > 0)
                                    {
                                        BackedUp = true;
                                    }
                                }
                            }
                        }
                        else
                        {
                            BackedUp = true;
                        }
                    }
                    else
                    {
                        BackedUp = true;
                    }
                }

                return BackedUp;
            }
            catch (Exception ex)
            {
                return BackedUp;
            }
        }

        private bool BackupMemberSignatureFiles(Guid IncorrectMemberId)
        {
            bool BackedUp = false;

            try
            {
                List<MemberSignatureFile> IncorrectItem = new List<MemberSignatureFile>();

                using (var db = new ICMS2DbContext())
                {
                    IncorrectItem = (from incitems in db.DbmsMemberSignatureFile
                                     where incitems.member_id == IncorrectMemberId
                                     select incitems).ToList();

                    if (IncorrectItem != null)
                    {
                        if (IncorrectItem.Count > 0)
                        {
                            foreach (MemberSignatureFile ItemToBackup in IncorrectItem)
                            {
                                MergedMemberSignatureFiles BackUpItem = new MergedMemberSignatureFiles();
                                BackUpItem.content_type = ItemToBackup.content_type;
                                BackUpItem.creation_date = ItemToBackup.creation_date;
                                BackUpItem.creation_user_id = ItemToBackup.creation_user_id;
                                BackUpItem.file_name = ItemToBackup.file_name;
                                BackUpItem.last_update_date = ItemToBackup.last_update_date;
                                BackUpItem.last_update_user_id = ItemToBackup.last_update_user_id;
                                BackUpItem.member_id = ItemToBackup.member_id;
                                BackUpItem.member_signature_download_id = ItemToBackup.member_signature_download_id;
                                BackUpItem.signature_file = ItemToBackup.signature_file;

                                db.DbmsMergedMemberSignatureFile.Add(BackUpItem);
                                int BackedUpResults = db.SaveChanges();

                                if (!BackedUp)
                                {
                                    if (BackedUpResults > 0)
                                    {
                                        BackedUp = true;
                                    }
                                }
                            }
                        }
                        else
                        {
                            BackedUp = true;
                        }
                    }
                    else
                    {
                        BackedUp = true;
                    }
                }

                return BackedUp;
            }
            catch (Exception ex)
            {
                return BackedUp;
            }
        }

        private bool BackupMemberStratLevel(Guid IncorrectMemberId)
        {
            bool BackedUp = false;

            try
            {
                List<MemberStratLevel> IncorrectItem = new List<MemberStratLevel>();

                using (var db = new ICMS2DbContext())
                {
                    IncorrectItem = (from incitems in db.DbmsMemberStratLevel
                                     where incitems.member_id == IncorrectMemberId
                                     select incitems).ToList();

                    if (IncorrectItem != null)
                    {
                        if (IncorrectItem.Count > 0)
                        {
                            foreach (MemberStratLevel ItemToBackup in IncorrectItem)
                            {
                                MergedMemberStratLevel BackUpItem = new MergedMemberStratLevel();
                                BackUpItem.calcstrat_level_id = ItemToBackup.calcstrat_level_id;
                                BackUpItem.calc_date = ItemToBackup.calc_date;
                                BackUpItem.master_override_acuity_level_id = ItemToBackup.master_override_acuity_level_id;
                                BackUpItem.member_id = ItemToBackup.member_id;
                                BackUpItem.member_strat_level_id = ItemToBackup.member_strat_level_id;
                                BackUpItem.overridestrat_level_id = ItemToBackup.overridestrat_level_id;
                                BackUpItem.override_date = ItemToBackup.override_date;
                                BackUpItem.override_reason = ItemToBackup.override_reason;
                                BackUpItem.override_system_user_id = ItemToBackup.override_system_user_id;
                                BackUpItem.tool_id = ItemToBackup.tool_id;
                                BackUpItem.tool_instance_id = ItemToBackup.tool_instance_id;

                                db.DbmsMergedMemberStratLevel.Add(BackUpItem);
                                int BackedUpResults = db.SaveChanges();

                                if (!BackedUp)
                                {
                                    if (BackedUpResults > 0)
                                    {
                                        BackedUp = true;
                                    }
                                }
                            }
                        }
                        else
                        {
                            BackedUp = true;
                        }
                    }
                    else
                    {
                        BackedUp = true;
                    }
                }

                return BackedUp;
            }
            catch (Exception ex)
            {
                return BackedUp;
            }
        }

        private bool BackupMemberTasks(Guid IncorrectMemberId)
        {
            bool BackedUp = false;

            try
            {
                List<MemberTask> IncorrectItem = new List<MemberTask>();

                using (var db = new ICMS2DbContext())
                {
                    IncorrectItem = (from incitems in db.DbmsMemberTask
                                     where incitems.member_id == IncorrectMemberId
                                     select incitems).ToList();

                    if (IncorrectItem != null)
                    {
                        if (IncorrectItem.Count > 0)
                        {
                            foreach (MemberTask ItemToBackup in IncorrectItem)
                            {
                                MergedMemberTask BackUpItem = new MergedMemberTask();
                                BackUpItem.actual_end_action_date = ItemToBackup.actual_end_action_date;
                                BackUpItem.actual_start_action_date = ItemToBackup.actual_start_action_date;
                                BackUpItem.assigned_to_system_user_id = ItemToBackup.assigned_to_system_user_id;
                                BackUpItem.completed = ItemToBackup.completed;
                                BackUpItem.completed_by_system_user_id = ItemToBackup.completed_by_system_user_id;
                                BackUpItem.completed_date = ItemToBackup.completed_date;
                                BackUpItem.date_entered = ItemToBackup.date_entered;
                                BackUpItem.date_verified = ItemToBackup.date_verified;
                                BackUpItem.disabled = ItemToBackup.disabled;
                                BackUpItem.end_action_date = ItemToBackup.end_action_date;
                                BackUpItem.entered_by_system_user_id = ItemToBackup.entered_by_system_user_id;
                                BackUpItem.lcn_case_number = ItemToBackup.lcn_case_number;
                                BackUpItem.member_id = ItemToBackup.member_id;
                                BackUpItem.member_task_id = ItemToBackup.member_task_id;
                                BackUpItem.start_action_date = ItemToBackup.start_action_date;
                                BackUpItem.taskoutcome_id = ItemToBackup.taskoutcome_id;
                                BackUpItem.task_assigned_via_portal = ItemToBackup.task_assigned_via_portal;
                                BackUpItem.task_id = ItemToBackup.task_id;
                                BackUpItem.task_note = ItemToBackup.task_note;
                                BackUpItem.tool_instance_id = ItemToBackup.tool_instance_id;
                                BackUpItem.user_verified = ItemToBackup.user_verified;

                                db.DbmsMergedMemberTask.Add(BackUpItem);
                                int BackedUpResults = db.SaveChanges();

                                if (!BackedUp)
                                {
                                    if (BackedUpResults > 0)
                                    {
                                        BackedUp = true;
                                    }
                                }
                            }
                        }
                        else
                        {
                            BackedUp = true;
                        }
                    }
                    else
                    {
                        BackedUp = true;
                    }
                }

                return BackedUp;
            }
            catch (Exception ex)
            {
                return BackedUp;
            }
        }

        private bool BackupMemberToolProgramStaus(Guid IncorrectMemberId)
        {
            bool BackedUp = false;

            try
            {
                List<MemberToolProgramStatus> IncorrectItem = new List<MemberToolProgramStatus>();

                using (var db = new ICMS2DbContext())
                {
                    IncorrectItem = (from incitems in db.DbmsMemberToolProgramStatus
                                     where incitems.member_id == IncorrectMemberId
                                     select incitems).ToList();

                    if (IncorrectItem != null)
                    {
                        if (IncorrectItem.Count > 0)
                        {
                            foreach (MemberToolProgramStatus ItemToBackup in IncorrectItem)
                            {
                                MergedMemberToolProgramStatus BackUpItem = new MergedMemberToolProgramStatus();
                                BackUpItem.active_flag = ItemToBackup.active_flag;
                                BackUpItem.date_updated = ItemToBackup.date_updated;
                                BackUpItem.disenroll_reason_id = ItemToBackup.disenroll_reason_id;
                                BackUpItem.effective_date = ItemToBackup.effective_date;
                                BackUpItem.member_id = ItemToBackup.member_id;
                                BackUpItem.member_tool_program_inactive_reason_id = ItemToBackup.member_tool_program_inactive_reason_id;
                                BackUpItem.program_disenroll_date = ItemToBackup.program_disenroll_date;
                                BackUpItem.program_effective_date = ItemToBackup.program_effective_date;
                                BackUpItem.tool_id = ItemToBackup.tool_id;
                                BackUpItem.user_updated = ItemToBackup.user_updated;


                                db.DbmsMergedMemberToolProgramStatus.Add(BackUpItem);
                                int BackedUpResults = db.SaveChanges();

                                if (!BackedUp)
                                {
                                    if (BackedUpResults > 0)
                                    {
                                        BackedUp = true;
                                    }
                                }
                            }
                        }
                        else
                        {
                            BackedUp = true;
                        }
                    }
                    else
                    {
                        BackedUp = true;
                    }
                }

                return BackedUp;
            }
            catch (Exception ex)
            {
                return BackedUp;
            }
        }

        private bool BackupMemberUpdateReferences(Guid IncorrectMemberId)
        {
            bool BackedUp = false;

            try
            {
                List<MemberUpdateReference> IncorrectItem = new List<MemberUpdateReference>();

                using (var db = new ICMS2DbContext())
                {
                    IncorrectItem = (from incitems in db.DbmsMemberUpdateReference
                                     where incitems.member_id == IncorrectMemberId
                                     select incitems).ToList();

                    if (IncorrectItem != null)
                    {
                        if (IncorrectItem.Count > 0)
                        {
                            foreach (MemberUpdateReference ItemToBackup in IncorrectItem)
                            {
                                MergedMemberUpdateReference BackUpItem = new MergedMemberUpdateReference();
                                BackUpItem.creation_date = ItemToBackup.creation_date;
                                BackUpItem.creation_user_id = ItemToBackup.creation_user_id;
                                BackUpItem.member_id = ItemToBackup.member_id;
                                BackUpItem.member_update_reference_id = ItemToBackup.member_update_reference_id;
                                BackUpItem.original_client_bu_id = ItemToBackup.original_client_bu_id;
                                BackUpItem.original_client_id = ItemToBackup.original_client_id;
                                BackUpItem.original_employer_id = ItemToBackup.original_employer_id;

                                db.DbmsMergedMemberUpdateReference.Add(BackUpItem);
                                int BackedUpResults = db.SaveChanges();

                                if (!BackedUp)
                                {
                                    if (BackedUpResults > 0)
                                    {
                                        BackedUp = true;
                                    }
                                }
                            }
                        }
                        else
                        {
                            BackedUp = true;
                        }
                    }
                    else
                    {
                        BackedUp = true;
                    }
                }

                return BackedUp;
            }
            catch (Exception ex)
            {
                return BackedUp;
            }
        }

        private bool BackupMemberVitals(Guid IncorrectMemberId)
        {
            bool BackedUp = false;

            try
            {
                List<MemberVitals> IncorrectItem = new List<MemberVitals>();

                using (var db = new ICMS2DbContext())
                {
                    IncorrectItem = (from incitems in db.DbmsMemberVitals
                                     where incitems.member_id == IncorrectMemberId
                                     select incitems).ToList();

                    if (IncorrectItem != null)
                    {
                        if (IncorrectItem.Count > 0)
                        {
                            foreach (MemberVitals ItemToBackup in IncorrectItem)
                            {
                                MergedMemberVitals BackUpItem = new MergedMemberVitals();
                                BackUpItem.bmi = ItemToBackup.bmi;
                                BackUpItem.body_fat_percent = ItemToBackup.body_fat_percent;
                                BackUpItem.bp_method = ItemToBackup.bp_method;
                                BackUpItem.cof = ItemToBackup.cof;
                                BackUpItem.date_deleted = ItemToBackup.date_deleted;
                                BackUpItem.date_measured = ItemToBackup.date_measured;
                                BackUpItem.deleted_flag = ItemToBackup.deleted_flag;
                                BackUpItem.glasgow_eye_opening = ItemToBackup.glasgow_eye_opening;
                                BackUpItem.glasgow_motor_response = ItemToBackup.glasgow_motor_response;
                                BackUpItem.glasgow_verbal_response = ItemToBackup.glasgow_verbal_response;
                                BackUpItem.heart_is_regular = ItemToBackup.heart_is_regular;
                                BackUpItem.heart_rate = ItemToBackup.heart_rate;
                                BackUpItem.height_in_inches = ItemToBackup.height_in_inches;
                                BackUpItem.height_type = ItemToBackup.height_type;
                                BackUpItem.hip_girth = ItemToBackup.hip_girth;
                                BackUpItem.last_update_date = ItemToBackup.last_update_date;
                                BackUpItem.last_update_user_id = ItemToBackup.last_update_user_id;
                                BackUpItem.member_id = ItemToBackup.member_id;
                                BackUpItem.member_vitals_id = ItemToBackup.member_vitals_id;
                                BackUpItem.neuro_scale = ItemToBackup.neuro_scale;
                                BackUpItem.note = ItemToBackup.note;
                                BackUpItem.physician_reported_flag = ItemToBackup.physician_reported_flag;
                                BackUpItem.pulse_is_regular = ItemToBackup.pulse_is_regular;
                                BackUpItem.pulse_per_minute = ItemToBackup.pulse_per_minute;
                                BackUpItem.ramsay_scale = ItemToBackup.ramsay_scale;
                                BackUpItem.respiration_is_regular = ItemToBackup.respiration_is_regular;
                                BackUpItem.respiration_per_minute = ItemToBackup.respiration_per_minute;
                                BackUpItem.richmond_rass_scale = ItemToBackup.richmond_rass_scale;
                                BackUpItem.r_member_admission_id = ItemToBackup.r_member_admission_id;
                                BackUpItem.seated_blood_pressure_diastolic = ItemToBackup.seated_blood_pressure_diastolic;
                                BackUpItem.seated_blood_pressure_systolic = ItemToBackup.seated_blood_pressure_systolic;
                                BackUpItem.sp02 = ItemToBackup.sp02;
                                BackUpItem.standing_blood_pressure_diastolic = ItemToBackup.standing_blood_pressure_diastolic;
                                BackUpItem.standing_blood_pressure_systolic = ItemToBackup.standing_blood_pressure_systolic;
                                BackUpItem.temperature_in_fahrenheit = ItemToBackup.temperature_in_fahrenheit;
                                BackUpItem.temperature_type = ItemToBackup.temperature_type;
                                BackUpItem.user_deleted = ItemToBackup.user_deleted;
                                BackUpItem.visual_scale = ItemToBackup.visual_scale;
                                BackUpItem.waist_girth = ItemToBackup.waist_girth;
                                BackUpItem.waist_hip_ratio = ItemToBackup.waist_hip_ratio;
                                BackUpItem.web_user_id = ItemToBackup.web_user_id;
                                BackUpItem.weight_in_pounds = ItemToBackup.weight_in_pounds;
                                BackUpItem.weight_type = ItemToBackup.weight_type;

                                db.DbmsMergedMemberVitals.Add(BackUpItem);
                                int BackedUpResults = db.SaveChanges();

                                if (!BackedUp)
                                {
                                    if (BackedUpResults > 0)
                                    {
                                        BackedUp = true;
                                    }
                                }
                            }
                        }
                        else
                        {
                            BackedUp = true;
                        }
                    }
                    else
                    {
                        BackedUp = true;
                    }
                }

                return BackedUp;
            }
            catch (Exception ex)
            {
                return BackedUp;
            }
        }

        private bool BackupUtilizationDayNotes(Guid IncorrectMemberId)
        {
            bool BackedUp = false;

            try
            {
                List<rUtilizationDayNotes> IncorrectItem = new List<rUtilizationDayNotes>();

                using (var db = new ICMS2DbContext())
                {
                    IncorrectItem = (from incitems in db.DbmsUtilizationDayNotes
                                     where incitems.member_id == IncorrectMemberId
                                     select incitems).ToList();

                    if (IncorrectItem != null)
                    {
                        if (IncorrectItem.Count > 0)
                        {
                            foreach (rUtilizationDayNotes ItemToBackup in IncorrectItem)
                            {
                                MergedrUtilizationDaysNotes BackUpItem = new MergedrUtilizationDaysNotes();
                                BackUpItem.benefit_disclaimer = ItemToBackup.benefit_disclaimer;
                                BackUpItem.billing_id = ItemToBackup.billing_id;
                                BackUpItem.date_lcm_activity_report_generated = ItemToBackup.date_lcm_activity_report_generated;
                                BackUpItem.date_lcm_report_generated = ItemToBackup.date_lcm_report_generated;
                                BackUpItem.evaluation_text = ItemToBackup.evaluation_text;
                                BackUpItem.lcm_activity_followup_id = ItemToBackup.lcm_activity_followup_id;
                                BackUpItem.lcm_followup_id = ItemToBackup.lcm_followup_id;
                                BackUpItem.lcn_case_number = ItemToBackup.lcn_case_number;
                                BackUpItem.line_number = ItemToBackup.line_number;
                                BackUpItem.member_id = ItemToBackup.member_id;
                                BackUpItem.note_billed = ItemToBackup.note_billed;
                                BackUpItem.note_billed_marked_date = ItemToBackup.note_billed_marked_date;
                                BackUpItem.onletter = ItemToBackup.onletter;
                                BackUpItem.record_date = ItemToBackup.record_date;
                                BackUpItem.record_seq_num = ItemToBackup.record_seq_num;
                                BackUpItem.referral_number = ItemToBackup.referral_number;
                                BackUpItem.referral_type = ItemToBackup.referral_type;
                                BackUpItem.RN_notes = ItemToBackup.RN_notes;
                                BackUpItem.system_user_id = ItemToBackup.system_user_id;
                                BackUpItem.updated_date = ItemToBackup.updated_date;
                                BackUpItem.updated_user_id = ItemToBackup.updated_user_id;

                                db.DbmsMergedrUtilizationDaysNotes.Add(BackUpItem);
                                int BackedUpResults = db.SaveChanges();

                                if (!BackedUp)
                                {
                                    if (BackedUpResults > 0)
                                    {
                                        BackedUp = true;
                                    }
                                }
                            }
                        }
                        else
                        {
                            BackedUp = true;
                        }
                    }
                    else
                    {
                        BackedUp = true;
                    }
                }

                return BackedUp;
            }
            catch (Exception ex)
            {
                return BackedUp;
            }
        }

        private bool BackupUtilizationDays(Guid IncorrectMemberId)
        {
            bool BackedUp = false;

            try
            {
                List<rUtilizationDays> IncorrectItem = new List<rUtilizationDays>();

                using (var db = new ICMS2DbContext())
                {
                    IncorrectItem = (from incitems in db.DbmsUtilizationDays
                                     where incitems.member_id == IncorrectMemberId
                                     select incitems).ToList();

                    if (IncorrectItem != null)
                    {
                        if (IncorrectItem.Count > 0)
                        {
                            foreach (rUtilizationDays ItemToBackup in IncorrectItem)
                            {
                                MergedrUtilizationDays BackUpItem = new MergedrUtilizationDays();
                                BackUpItem.DateUpdated = ItemToBackup.DateUpdated;
                                BackUpItem.Date_Created = ItemToBackup.Date_Created;
                                BackUpItem.denial_reason_id = ItemToBackup.denial_reason_id;
                                BackUpItem.end_date = ItemToBackup.end_date;
                                BackUpItem.ICM_Units = ItemToBackup.ICM_Units;
                                BackUpItem.line_number = ItemToBackup.line_number;
                                BackUpItem.member_id = ItemToBackup.member_id;
                                BackUpItem.next_review_date = ItemToBackup.next_review_date;
                                BackUpItem.number_of_days = ItemToBackup.number_of_days;
                                BackUpItem.PatCaseActID = ItemToBackup.PatCaseActID;
                                BackUpItem.referral_number = ItemToBackup.referral_number;
                                BackUpItem.referral_type = ItemToBackup.referral_type;
                                BackUpItem.removed = ItemToBackup.removed;
                                BackUpItem.removed_date = ItemToBackup.removed_date;
                                BackUpItem.removed_user_id = ItemToBackup.removed_user_id;
                                BackUpItem.sands_referral_status_code_id = ItemToBackup.sands_referral_status_code_id;
                                BackUpItem.start_date = ItemToBackup.start_date;
                                BackUpItem.std_billed = ItemToBackup.std_billed;
                                BackUpItem.std_billed_date = ItemToBackup.std_billed_date;
                                BackUpItem.surgery_flag = ItemToBackup.surgery_flag;
                                BackUpItem.surgery_on_first_day_flag = ItemToBackup.surgery_on_first_day_flag;
                                BackUpItem.type_id = ItemToBackup.type_id;
                                BackUpItem.util_decision_id = ItemToBackup.util_decision_id;
                                BackUpItem.visits_authorized_end_date = ItemToBackup.visits_authorized_end_date;
                                BackUpItem.visits_authorized_start_date = ItemToBackup.visits_authorized_start_date;
                                BackUpItem.visits_num_periods_authorized = ItemToBackup.visits_num_periods_authorized;
                                BackUpItem.visits_num_periods_requested = ItemToBackup.visits_num_periods_requested;
                                BackUpItem.visits_num_per_period_authorized = ItemToBackup.visits_num_per_period_authorized;
                                BackUpItem.visits_num_per_period_requested = ItemToBackup.visits_num_per_period_requested;
                                BackUpItem.visits_period_authorized = ItemToBackup.visits_period_authorized;
                                BackUpItem.visits_period_requested = ItemToBackup.visits_period_requested;
                                BackUpItem .visits_recurring_flag= ItemToBackup.visits_recurring_flag;

                                db.DbmsMergedrUtilizationDays.Add(BackUpItem);
                                int BackedUpResults = db.SaveChanges();

                                if (!BackedUp)
                                {
                                    if (BackedUpResults > 0)
                                    {
                                        BackedUp = true;
                                    }
                                }
                            }
                        }
                        else
                        {
                            BackedUp = true;
                        }
                    }
                    else
                    {
                        BackedUp = true;
                    }
                }
                return BackedUp;
            }
            catch (Exception ex)
            {
                return BackedUp;
            }
        }

        private bool BackupUtilizationDischargeNotes(Guid IncorrectMemberId)
        {
            bool BackedUp = false;

            try
            {
                List<rUtilizationDischargeNote> IncorrectItem = new List<rUtilizationDischargeNote>();

                using (var db = new ICMS2DbContext())
                {
                    IncorrectItem = (from incitems in db.DbmsUtilizationDischargeNote
                                     where incitems.member_id == IncorrectMemberId
                                     select incitems).ToList();

                    if (IncorrectItem != null)
                    {
                        if (IncorrectItem.Count > 0)
                        {
                            foreach (rUtilizationDischargeNote ItemToBackup in IncorrectItem)
                            {
                                MergedrUtilizationDischargeNote BackUpItem = new MergedrUtilizationDischargeNote();
                                BackUpItem.creation_date = ItemToBackup.creation_date;
                                BackUpItem.creation_user_id = ItemToBackup.creation_user_id;
                                BackUpItem.discharge_note = ItemToBackup.discharge_note;
                                BackUpItem.member_id = ItemToBackup.member_id;
                                BackUpItem.referral_number = ItemToBackup.referral_number;
                                BackUpItem.r_utilization_discharge_note_id = ItemToBackup.r_utilization_discharge_note_id;

                                db.DbmsMergedrUtilizationDischargeNote.Add(BackUpItem);
                                int BackedUpResults = db.SaveChanges();

                                if (!BackedUp)
                                {
                                    if (BackedUpResults > 0)
                                    {
                                        BackedUp = true;
                                    }
                                }
                            }
                        }
                        else
                        {
                            BackedUp = true;
                        }
                    }
                    else
                    {
                        BackedUp = true;
                    }
                }

                return BackedUp;
            }
            catch (Exception ex)
            {
                return BackedUp;
            }
        }

        private bool BackupUtilizationReviews(Guid IncorrectMemberId)
        {
            bool BackedUp = false;

            try
            {
                List<rUtilizationReviews> IncorrectItem = new List<rUtilizationReviews>();

                using (var db = new ICMS2DbContext())
                {
                    IncorrectItem = (from incitems in db.DbmsUtilizationReviews
                                     where incitems.member_id == IncorrectMemberId
                                     select incitems).ToList();

                    if (IncorrectItem != null)
                    {
                        if (IncorrectItem.Count > 0)
                        {
                            foreach (rUtilizationReviews ItemToBackup in IncorrectItem)
                            {
                                MergedrUtilizationReviews BackUpItem = new MergedrUtilizationReviews();
                                BackUpItem.created_user_id = ItemToBackup.created_user_id;
                                BackUpItem.creation_date = ItemToBackup.creation_date;
                                BackUpItem.denial_reason_id = ItemToBackup.denial_reason_id;
                                BackUpItem.last_update_date = ItemToBackup.last_update_date;
                                BackUpItem.last_update_user_id = ItemToBackup.last_update_user_id;
                                BackUpItem.line_number = ItemToBackup.line_number;
                                BackUpItem.member_id = ItemToBackup.member_id;
                                BackUpItem.referral_number = ItemToBackup.referral_number;
                                BackUpItem.review_type_items_id = ItemToBackup.review_type_items_id;
                                BackUpItem.r_utilization_reviews_id = ItemToBackup.r_utilization_reviews_id;
                                BackUpItem.util_decision_id = ItemToBackup.util_decision_id;

                                db.DbmsMergedrUtilizationReviews.Add(BackUpItem);
                                int BackedUpResults = db.SaveChanges();

                                if (!BackedUp)
                                {
                                    if (BackedUpResults > 0)
                                    {
                                        BackedUp = true;
                                    }
                                }
                            }
                        }
                        else
                        {
                            BackedUp = true;
                        }
                    }
                    else
                    {
                        BackedUp = true;
                    }
                }

                return BackedUp;
            }
            catch (Exception ex)
            {
                return BackedUp;
            }
        }

        private bool BackupUtilizationSavings(Guid IncorrectMemberId)
        {
            bool BackedUp = false;

            try
            {
                List<rUtilizationSavings> IncorrectItem = new List<rUtilizationSavings>();

                using (var db = new ICMS2DbContext())
                {
                    IncorrectItem = (from incitems in db.DbmsUtilizationSavings
                                     where incitems.member_id == IncorrectMemberId
                                     select incitems).ToList();

                    if (IncorrectItem != null)
                    {
                        if (IncorrectItem.Count > 0)
                        {
                            foreach (rUtilizationSavings ItemToBackup in IncorrectItem)
                            {
                                MergedrUtilizationSavings BackUpItem = new MergedrUtilizationSavings();
                                BackUpItem.cost = ItemToBackup.cost;
                                BackUpItem.cpt_code = ItemToBackup.cpt_code;
                                BackUpItem.date_updated = ItemToBackup.date_updated;
                                BackUpItem.delete_flag = ItemToBackup.delete_flag;
                                BackUpItem.dollar_or_percent = ItemToBackup.dollar_or_percent;
                                BackUpItem.item_description = ItemToBackup.item_description;
                                BackUpItem.line_item = ItemToBackup.line_item;
                                BackUpItem.line_number = ItemToBackup.line_number;
                                BackUpItem.member_id = ItemToBackup.member_id;
                                BackUpItem.negotiated = ItemToBackup.negotiated;
                                BackUpItem.network_id = ItemToBackup.network_id;
                                BackUpItem.notes = ItemToBackup.notes;
                                BackUpItem.quantity = ItemToBackup.quantity;
                                BackUpItem.referral_number = ItemToBackup.referral_number;
                                BackUpItem.referral_type = ItemToBackup.referral_type;
                                BackUpItem.savings = ItemToBackup.savings;
                                BackUpItem.savings_line = ItemToBackup.savings_line;
                                BackUpItem.saving_units_id = ItemToBackup.saving_units_id;
                                BackUpItem.system_user_id = ItemToBackup.system_user_id;
                                BackUpItem.utilization_savings_id = ItemToBackup.utilization_savings_id;

                                db.DbmsMergedrUtilizationSavings.Add(BackUpItem);
                                int BackedUpResults = db.SaveChanges();

                                if (!BackedUp)
                                {
                                    if (BackedUpResults > 0)
                                    {
                                        BackedUp = true;
                                    }
                                }
                            }
                        }
                        else
                        {
                            BackedUp = true;
                        }
                    }
                    else
                    {
                        BackedUp = true;
                    }
                }

                return BackedUp;
            }
            catch (Exception ex)
            {
                return BackedUp;
            }
        }

        private bool BackupAcountsReceivablePayments(Guid IncorrectMemberId)
        {
            bool BackedUp = false;

            try
            {
                List<AccountsReceivablePayments> IncorrectItem = new List<AccountsReceivablePayments>();

                using (var db = new ICMS2DbContext())
                {
                    IncorrectItem = (from incitems in db.DbmsAccountsReceivablePayments
                                     where incitems.member_id == IncorrectMemberId
                                     select incitems).ToList();

                    if (IncorrectItem != null)
                    {
                        if (IncorrectItem.Count > 0)
                        {
                            foreach (AccountsReceivablePayments ItemToBackup in IncorrectItem)
                            {
                                MergedAccountsReceivablePayments BackUpItem = new MergedAccountsReceivablePayments();
                                BackUpItem.accounts_receivable_payment_id = ItemToBackup.accounts_receivable_payment_id;
                                BackUpItem.balance_outstanding = ItemToBackup.balance_outstanding;
                                BackUpItem.balance_outstanding_date = ItemToBackup.balance_outstanding_date;
                                BackUpItem.bill_paid_off = ItemToBackup.bill_paid_off;
                                BackUpItem.bill_total = ItemToBackup.bill_total;
                                BackUpItem.bill_type = ItemToBackup.bill_type;
                                BackUpItem.ccm_record_id = ItemToBackup.ccm_record_id;
                                BackUpItem.check_number = ItemToBackup.check_number;
                                BackUpItem.comment = ItemToBackup.comment;
                                BackUpItem.creation_date = ItemToBackup.creation_date;
                                BackUpItem.credit_amount = ItemToBackup.credit_amount;
                                BackUpItem.credit_date = ItemToBackup.credit_date;
                                BackUpItem.debit_amount = ItemToBackup.debit_amount;
                                BackUpItem.debit_date = ItemToBackup.debit_date;
                                BackUpItem.invoice_id = ItemToBackup.invoice_id;
                                BackUpItem.member_id = ItemToBackup.member_id;
                                BackUpItem.payment_amount = ItemToBackup.payment_amount;
                                BackUpItem.payment_date = ItemToBackup.payment_date;
                                BackUpItem.payment_user_id = ItemToBackup.payment_user_id;
                                BackUpItem.received_date = ItemToBackup.received_date;
                                BackUpItem.um_record_id = ItemToBackup.um_record_id;

                                db.DbmsMergedAccountsReceivablePayments.Add(BackUpItem);
                                int BackedUpResults = db.SaveChanges();

                                if (!BackedUp)
                                {
                                    if (BackedUpResults > 0)
                                    {
                                        BackedUp = true;
                                    }
                                }
                            }
                        }
                        else
                        {
                            BackedUp = true;
                        }
                    }
                    else
                    {
                        BackedUp = true;
                    }
                }

                return BackedUp;
            }
            catch (Exception ex)
            {
                return BackedUp;
            }
        }

        private bool BackupAdmissionCareplanCounts(Guid IncorrectMemberId)
        {
            bool BackedUp = false;

            try
            { 
                List<rAdmissionCareplanCount> IncorrectItem = new List<rAdmissionCareplanCount>();

                using (var db = new ICMS2DbContext())
                {
                    IncorrectItem = (from incitems in db.DbmsAdmissionCareplanCount
                                     where incitems.member_id == IncorrectMemberId
                                     select incitems).ToList();

                    if (IncorrectItem != null)
                    {
                        if (IncorrectItem.Count > 0)
                        {
                            foreach (rAdmissionCareplanCount ItemToBackup in IncorrectItem)
                            {
                                MergedrAdmissionCareplanCount BackUpItem = new MergedrAdmissionCareplanCount();
                                BackUpItem.admission_number = ItemToBackup.admission_number;
                                BackUpItem.care_plan_end_date = ItemToBackup.care_plan_end_date;
                                BackUpItem.care_plan_start_date = ItemToBackup.care_plan_start_date;
                                BackUpItem.creation_date = ItemToBackup.creation_date;
                                BackUpItem.creation_user_id = ItemToBackup.creation_user_id;
                                BackUpItem.language_therapy_count = ItemToBackup.language_therapy_count;
                                BackUpItem.last_update_date = ItemToBackup.last_update_date;
                                BackUpItem.last_update_user_id = ItemToBackup.last_update_user_id;
                                BackUpItem.medical_visit_count = ItemToBackup.medical_visit_count;
                                BackUpItem.member_id = ItemToBackup.member_id;
                                BackUpItem.nutrition_count = ItemToBackup.nutrition_count;
                                BackUpItem.occupational_therapy_count = ItemToBackup.occupational_therapy_count;
                                BackUpItem.physical_therapy_count = ItemToBackup.physical_therapy_count;
                                BackUpItem.psychology_count = ItemToBackup.psychology_count;
                                BackUpItem.respiratory_therapy_count = ItemToBackup.respiratory_therapy_count;
                                BackUpItem.rn_12_hour_night_count = ItemToBackup.rn_12_hour_night_count;
                                BackUpItem.rn_6_hours_count = ItemToBackup.rn_6_hours_count;
                                BackUpItem.rn_count = ItemToBackup.rn_count;
                                BackUpItem.rn_specific_activities_count = ItemToBackup.rn_specific_activities_count;
                                BackUpItem.r_admission_careplan_id = ItemToBackup.r_admission_careplan_id;

                                db.DbmsMergedAdmissionCareplanCount.Add(BackUpItem);
                                int BackedUpResults = db.SaveChanges();

                                if (!BackedUp)
                                {
                                    if (BackedUpResults > 0)
                                    {
                                        BackedUp = true;
                                    }
                                }
                            }
                        }
                        else
                        {
                            BackedUp = true;
                        }
                    }
                    else
                    {
                        BackedUp = true;
                    }
                }

                return BackedUp;
            }
            catch (Exception ex)
            {
                return BackedUp;
            }
        }

        private bool BackupAdmissions(Guid IncorrectMemberId)
        {
            bool BackedUp = false;

            try
            {
                List<Admission> IncorrectItem = new List<Admission>();

                using (var db = new ICMS2DbContext())
                {
                    IncorrectItem = (from incitems in db.DbmsAdmission
                                     where incitems.member_id == IncorrectMemberId
                                     select incitems).ToList();

                    if (IncorrectItem != null)
                    {
                        if (IncorrectItem.Count > 0)
                        {
                            foreach (Admission ItemToBackup in IncorrectItem)
                            {
                                MergedAdmission BackUpItem = new MergedAdmission();
                                BackUpItem.admission_discharge = ItemToBackup.admission_discharge;
                                BackUpItem.admission_id = ItemToBackup.admission_id;
                                BackUpItem.admission_start = ItemToBackup.admission_start;
                                BackUpItem.checked_out_by = ItemToBackup.checked_out_by;
                                BackUpItem.member_id = ItemToBackup.member_id;

                                db.DbmsMergedAdmission.Add(BackUpItem);
                                int BackedUpResults = db.SaveChanges();

                                if (!BackedUp)
                                {
                                    if (BackedUpResults > 0)
                                    {
                                        BackedUp = true;
                                    }
                                }
                            }
                        }
                        else
                        {
                            BackedUp = true;
                        }
                    }
                    else
                    {
                        BackedUp = true;
                    }
                }

                return BackedUp;
            }
            catch (Exception ex)
            {
                return BackedUp;
            }
        }

        private bool BackupAuthorizationUpdates(Guid IncorrectMemberId)
        {
            bool BackedUp = false;

            try
            {
                List<rAuthorizationUpdates> IncorrectItem = new List<rAuthorizationUpdates>();

                using (var db = new ICMS2DbContext())
                {
                    IncorrectItem = (from incitems in db.DbmsAuthorizationUpdates
                                     where incitems.member_id == IncorrectMemberId
                                     select incitems).ToList();

                    if (IncorrectItem != null)
                    {
                        if (IncorrectItem.Count > 0)
                        {
                            foreach (rAuthorizationUpdates ItemToBackup in IncorrectItem)
                            {
                                MergedrAuthorizationUpdates BackUpItem = new MergedrAuthorizationUpdates();
                                BackUpItem.authorization_type = ItemToBackup.authorization_type;
                                BackUpItem.creation_date = ItemToBackup.creation_date;
                                BackUpItem.creation_user_id = ItemToBackup.creation_user_id;
                                BackUpItem.member_id = ItemToBackup.member_id;
                                BackUpItem.referral_number = ItemToBackup.referral_number;
                                BackUpItem.r_authorization_updates_id = ItemToBackup.r_authorization_updates_id;

                                db.DbmsMergedAuthorizationUpdates.Add(BackUpItem);
                                int BackedUpResults = db.SaveChanges();

                                if (!BackedUp)
                                {
                                    if (BackedUpResults > 0)
                                    {
                                        BackedUp = true;
                                    }
                                }
                            }
                        }
                        else
                        {
                            BackedUp = true;
                        }
                    }
                    else
                    {
                        BackedUp = true;
                    }
                }

                return BackedUp;
            }
            catch (Exception ex)
            {
                return BackedUp;
            }
        }

        private bool BackupBillingUpdateHistoryLog(Guid IncorrectMemberId)
        {
            bool BackedUp = false;

            try
            {
                List<BillingUpdateHistoryLog> IncorrectItem = new List<BillingUpdateHistoryLog>();

                using (var db = new ICMS2DbContext())
                {
                    IncorrectItem = (from incitems in db.DbmsBillingUpdateHistoryLog
                                     where incitems.member_id == IncorrectMemberId
                                     select incitems).ToList();

                    if (IncorrectItem != null)
                    {
                        if (IncorrectItem.Count > 0)
                        {
                            foreach (BillingUpdateHistoryLog ItemToBackup in IncorrectItem)
                            {
                                MergedBillingUpdateHistoryLog BackUpItem = new MergedBillingUpdateHistoryLog();
                                BackUpItem.billing_update_history_log_id = ItemToBackup.billing_update_history_log_id;
                                BackUpItem.lcm_record_id = ItemToBackup.lcm_record_id;
                                BackUpItem.member_id = ItemToBackup.member_id;
                                BackUpItem.original_billing_code = ItemToBackup.original_billing_code;
                                BackUpItem.original_billing_description = ItemToBackup.original_billing_description;
                                BackUpItem.original_billing_id = ItemToBackup.original_billing_id;
                                BackUpItem.original_entered_by_user = ItemToBackup.original_entered_by_user;
                                BackUpItem.original_minutes = ItemToBackup.original_minutes;
                                BackUpItem.original_record_date = ItemToBackup.original_record_date;
                                BackUpItem.referral_number = ItemToBackup.referral_number;
                                BackUpItem.update_billing_code = ItemToBackup.update_billing_code;
                                BackUpItem.update_billing_description = ItemToBackup.update_billing_description;
                                BackUpItem.update_billing_id = ItemToBackup.update_billing_id;
                                BackUpItem.update_date = ItemToBackup.update_date;
                                BackUpItem.update_minutes = ItemToBackup.update_minutes;
                                BackUpItem.update_reason = ItemToBackup.update_reason;
                                BackUpItem.update_screen = ItemToBackup.update_screen;
                                BackUpItem.update_user_id = ItemToBackup.update_user_id;

                                db.DbmsMergedBillingUpdateHistoryLog.Add(BackUpItem);
                                int BackedUpResults = db.SaveChanges();

                                if (!BackedUp)
                                {
                                    if (BackedUpResults > 0)
                                    {
                                        BackedUp = true;
                                    }
                                }
                            }
                        }
                        else
                        {
                            BackedUp = true;
                        }
                    }
                    else
                    {
                        BackedUp = true;
                    }
                }

                return BackedUp;
            }
            catch (Exception ex)
            {
                return BackedUp;
            }
        }

        private bool BackupBillingBackups(Guid IncorrectMemberId)
        {
            bool BackedUp = false;

            try
            {
                List<BillingBackup> IncorrectItem = new List<BillingBackup>();

                using (var db = new IcmsDataStagingDbContext())
                {
                    IncorrectItem = (from incitems in db.DbmsBillingBackup
                                     where incitems.member_id == IncorrectMemberId
                                     select incitems).ToList();

                    if (IncorrectItem != null)
                    {
                        if (IncorrectItem.Count > 0)
                        {
                            foreach (BillingBackup ItemToBackup in IncorrectItem)
                            {
                                MergedBillingBackup BackUpItem = new MergedBillingBackup();
                                BackUpItem.altered_bill_amount = ItemToBackup.altered_bill_amount;
                                BackUpItem.altered_bill_amount_date = ItemToBackup.altered_bill_amount_date;
                                BackUpItem.altered_bill_amount_user_id = ItemToBackup.altered_bill_amount_user_id;
                                BackUpItem.auth_end_date = ItemToBackup.auth_end_date;
                                BackUpItem.auth_start_date = ItemToBackup.auth_start_date;
                                BackUpItem.auto_print = ItemToBackup.auto_print;
                                BackUpItem.backup_period_id = ItemToBackup.backup_period_id;
                                BackUpItem.billing_backup_id = ItemToBackup.billing_backup_id;
                                BackUpItem.billing_type = ItemToBackup.billing_type;
                                BackUpItem.bill_due_date = ItemToBackup.bill_due_date;
                                BackUpItem.bill_entered_by = ItemToBackup.bill_entered_by;
                                BackUpItem.care_mode = ItemToBackup.care_mode;
                                BackUpItem.case_manager = ItemToBackup.case_manager;
                                BackUpItem.case_owner_created_by = ItemToBackup.case_owner_created_by;
                                BackUpItem.ccm_billing_rate = ItemToBackup.ccm_billing_rate;
                                BackUpItem.ccm_bill_count = ItemToBackup.ccm_bill_count;
                                BackUpItem.ccm_record_id = ItemToBackup.ccm_record_id;
                                BackUpItem.comments = ItemToBackup.comments;
                                BackUpItem.creation_date = ItemToBackup.creation_date;
                                BackUpItem.cr_rate = ItemToBackup.cr_rate;
                                BackUpItem.cr_record_id = ItemToBackup.cr_record_id;
                                BackUpItem.date_updated = ItemToBackup.date_updated;
                                BackUpItem.description = ItemToBackup.description;
                                BackUpItem.disable_flag = ItemToBackup.disable_flag;
                                BackUpItem.dob = ItemToBackup.dob;
                                BackUpItem.employer = ItemToBackup.employer;
                                BackUpItem.employer_id = ItemToBackup.employer_id;
                                BackUpItem.employer_name = ItemToBackup.employer_name;
                                BackUpItem.has_activity_report = ItemToBackup.has_activity_report;
                                BackUpItem.invoice_id = ItemToBackup.invoice_id;
                                BackUpItem.keep_in_billing = ItemToBackup.keep_in_billing;
                                BackUpItem.lcm_activity_followup_id = ItemToBackup.lcm_activity_followup_id;
                                BackUpItem.LCM_Invoice_Number = ItemToBackup.LCM_Invoice_Number;
                                BackUpItem.lcm_rate = ItemToBackup.lcm_rate;
                                BackUpItem.lcm_record_id = ItemToBackup.lcm_record_id;
                                BackUpItem.memberid = ItemToBackup.memberid;
                                BackUpItem.member_dob = ItemToBackup.member_dob;
                                BackUpItem.member_first_name = ItemToBackup.member_first_name;
                                BackUpItem.member_id = ItemToBackup.member_id;
                                BackUpItem.member_last_name = ItemToBackup.member_last_name;
                                BackUpItem.member_name = ItemToBackup.member_name;
                                BackUpItem.member_ssn = ItemToBackup.member_ssn;
                                BackUpItem.notes = ItemToBackup.notes;
                                BackUpItem.note_entered_by = ItemToBackup.note_entered_by;
                                BackUpItem.patient = ItemToBackup.patient;
                                BackUpItem.possible_delete = ItemToBackup.possible_delete;
                                BackUpItem.print_cr = ItemToBackup.print_cr;
                                BackUpItem.print_lcm = ItemToBackup.print_lcm;
                                BackUpItem.print_std = ItemToBackup.print_std;
                                BackUpItem.received_date = ItemToBackup.received_date;
                                BackUpItem.record_date = ItemToBackup.record_date;
                                BackUpItem.referral_number = ItemToBackup.referral_number;
                                BackUpItem.referral_type = ItemToBackup.referral_type;
                                BackUpItem.refreshed = ItemToBackup.refreshed;
                                BackUpItem.refreshed_date = ItemToBackup.refreshed_date;
                                BackUpItem.refreshed_user_id = ItemToBackup.refreshed_user_id;
                                BackUpItem.reprint = ItemToBackup.reprint;
                                BackUpItem.search_end_date = ItemToBackup.search_end_date;
                                BackUpItem.search_start_date = ItemToBackup.search_start_date;
                                BackUpItem.sending_date = ItemToBackup.sending_date;
                                BackUpItem.sending_item = ItemToBackup.sending_item;
                                BackUpItem.sent_date = ItemToBackup.sent_date;
                                BackUpItem.sent_item = ItemToBackup.sent_item;
                                BackUpItem.std_rate = ItemToBackup.std_rate;
                                BackUpItem.std_record_id = ItemToBackup.std_record_id;
                                BackUpItem.time_code = ItemToBackup.time_code;
                                BackUpItem.time_length = ItemToBackup.time_length;
                                BackUpItem.tpa = ItemToBackup.tpa;
                                BackUpItem.tpa_id = ItemToBackup.tpa_id;
                                BackUpItem.tpa_name = ItemToBackup.tpa_name;
                                BackUpItem.um_billing_rate = ItemToBackup.um_billing_rate;
                                BackUpItem.um_bill_count = ItemToBackup.um_bill_count;
                                BackUpItem.um_note = ItemToBackup.um_note;
                                BackUpItem.um_record_id = ItemToBackup.um_record_id;
                                BackUpItem.updated_date = ItemToBackup.updated_date;
                                BackUpItem.updated_user_id = ItemToBackup.updated_user_id;
                                BackUpItem.user_created = ItemToBackup.user_created;
                                BackUpItem.user_updated = ItemToBackup.user_updated;
                                BackUpItem.use_altered_bill_amount = ItemToBackup.use_altered_bill_amount;

                                db.DbmsMergedBillingBackup.Add(BackUpItem);
                                int BackedUpResults = db.SaveChanges();

                                if (!BackedUp)
                                {
                                    if (BackedUpResults > 0)
                                    {
                                        BackedUp = true;
                                    }
                                }
                            }
                        }
                        else
                        {
                            BackedUp = true;
                        }
                    }
                    else
                    {
                        BackedUp = true;
                    }
                }

                return BackedUp;
            }
            catch (Exception ex)
            {
                return BackedUp;
            }
        }

        private bool BackupMemberCareCoordinationCalls(Guid IncorrectMemberId)
        {
            bool BackedUp = false;

            try
            {
                List<MemberCareCoordinationCall> IncorrectItem = new List<MemberCareCoordinationCall>();

                using (var db = new ICMS2DbContext())
                {
                    IncorrectItem = (from incitems in db.DbmsMemberCareCoordinationCall
                                     where incitems.member_id == IncorrectMemberId
                                     select incitems).ToList();

                    if (IncorrectItem != null)
                    {
                        if (IncorrectItem.Count > 0)
                        {
                            foreach (MemberCareCoordinationCall ItemToBackup in IncorrectItem)
                            {
                                MergedMemberCareCoordinationCall BackUpItem = new MergedMemberCareCoordinationCall();
                                BackUpItem.call_date = ItemToBackup.call_date;
                                BackUpItem.call_entered_by_system_user_id = ItemToBackup.call_entered_by_system_user_id;
                                BackUpItem.call_note = ItemToBackup.call_note;
                                BackUpItem.creation_date = ItemToBackup.creation_date;
                                BackUpItem.member_care_coordination_call_id = ItemToBackup.member_care_coordination_call_id;
                                BackUpItem.member_id = ItemToBackup.member_id;
                                BackUpItem.referral_number = ItemToBackup.referral_number;

                                db.DbmsMergedMemberCareCoordinationCall.Add(BackUpItem);
                                int BackedUpResults = db.SaveChanges();

                                if (!BackedUp)
                                {
                                    if (BackedUpResults > 0)
                                    {
                                        BackedUp = true;
                                    }
                                }
                            }
                        }
                        else
                        {
                            BackedUp = true;
                        }
                    }
                    else
                    {
                        BackedUp = true;
                    }
                }

                return BackedUp;
            }
            catch (Exception ex)
            {
                return BackedUp;
            }
        }

        private bool BackupCarePlanNotesAttachments(Guid IncorrectMemberId)
        {
            bool BackedUp = false;

            try
            {
                List<CarePlanNotesAttachment> IncorrectItem = new List<CarePlanNotesAttachment>();

                using (var db = new ICMS2DbContext())
                {
                    IncorrectItem = (from incitems in db.DbmsCarePlanNotesAttachment
                                     where incitems.member_id == IncorrectMemberId
                                     select incitems).ToList();

                    if (IncorrectItem != null)
                    {
                        if (IncorrectItem.Count > 0)
                        {
                            foreach (CarePlanNotesAttachment ItemToBackup in IncorrectItem)
                            {
                                MergedCarePlanNotesAttachment BackUpItem = new MergedCarePlanNotesAttachment();
                                BackUpItem.creation_user_id = ItemToBackup.creation_user_id;
                                BackUpItem.file_blob = ItemToBackup.file_blob;
                                BackUpItem.file_identifier = ItemToBackup.file_identifier;
                                BackUpItem.internal_patient = ItemToBackup.internal_patient;
                                BackUpItem.member_id = ItemToBackup.member_id;
                                BackUpItem.record_date = ItemToBackup.record_date;

                                db.DbmsMergedCarePlanNotesAttachment.Add(BackUpItem);
                                int BackedUpResults = db.SaveChanges();

                                if (!BackedUp)
                                {
                                    if (BackedUpResults > 0)
                                    {
                                        BackedUp = true;
                                    }
                                }
                            }
                        }
                        else
                        {
                            BackedUp = true;
                        }
                    }
                    else
                    {
                        BackedUp = true;
                    }
                }

                return BackedUp;
            }
            catch (Exception ex)
            {
                return BackedUp;
            }
        }

        private bool BackupCaseOwners(Guid IncorrectMemberId)
        {
            bool BackedUp = false;

            try
            {
                List<CaseOwner> IncorrectItem = new List<CaseOwner>();

                using (var db = new ICMS2DbContext())
                {
                    IncorrectItem = (from incitems in db.DbmsCaseOwner
                                     where incitems.member_id == IncorrectMemberId
                                     select incitems).ToList();

                    if (IncorrectItem != null)
                    {
                        if (IncorrectItem.Count > 0)
                        {
                            foreach (CaseOwner ItemToBackup in IncorrectItem)
                            {
                                MergedCaseOwner BackUpItem = new MergedCaseOwner();
                                BackUpItem.assigned_date = ItemToBackup.assigned_date;
                                BackUpItem.case_type_code = ItemToBackup.case_type_code;
                                BackUpItem.discharge_date = ItemToBackup.discharge_date;
                                BackUpItem.member_id = ItemToBackup.member_id;
                                BackUpItem.system_user_id = ItemToBackup.system_user_id;
                                BackUpItem.transfer_date = ItemToBackup.transfer_date;
                                BackUpItem.transfer_to = ItemToBackup.transfer_to;

                                db.DbmsMergedCaseOwner.Add(BackUpItem);
                                int BackedUpResults = db.SaveChanges();

                                if (!BackedUp)
                                {
                                    if (BackedUpResults > 0)
                                    {
                                        BackedUp = true;
                                    }
                                }
                            }
                        }
                        else
                        {
                            BackedUp = true;
                        }
                    }
                    else
                    {
                        BackedUp = true;
                    }
                }

                return BackedUp;
            }
            catch (Exception ex)
            {
                return BackedUp;
            }
        }

        private bool BackupClinicalRequestHistories(Guid IncorrectMemberId)
        {
            bool BackedUp = false;

            try
            {
                List<ClinicalRequestHistory> IncorrectItem = new List<ClinicalRequestHistory>();

                using (var db = new ICMS2DbContext())
                {
                    IncorrectItem = (from incitems in db.DbmsClinicalRequestHistory
                                     where incitems.member_id == IncorrectMemberId
                                     select incitems).ToList();

                    if (IncorrectItem != null)
                    {
                        if (IncorrectItem.Count > 0)
                        {
                            foreach (ClinicalRequestHistory ItemToBackup in IncorrectItem)
                            {
                                MergedClinicalRequestHistory BackUpItem = new MergedClinicalRequestHistory();
                                BackUpItem.clinical_request_history_id = ItemToBackup.clinical_request_history_id;
                                BackUpItem.clinical_request_providers_id = ItemToBackup.clinical_request_providers_id;
                                BackUpItem.file_blob = ItemToBackup.file_blob;
                                BackUpItem.file_identifier = ItemToBackup.file_identifier;
                                BackUpItem.mail_request = ItemToBackup.mail_request;
                                BackUpItem.member_id = ItemToBackup.member_id;
                                BackUpItem.sent_by_user_id = ItemToBackup.sent_by_user_id;
                                BackUpItem.sent_date = ItemToBackup.sent_date;
                                BackUpItem.sent_to = ItemToBackup.sent_to;
                                BackUpItem.sent_to_name = ItemToBackup.sent_to_name;

                                db.DbmsMergedClinicalRequestHistory.Add(BackUpItem);
                                int BackedUpResults = db.SaveChanges();

                                if (!BackedUp)
                                {
                                    if (BackedUpResults > 0)
                                    {
                                        BackedUp = true;
                                    }
                                }
                            }
                        }
                        else
                        {
                            BackedUp = true;
                        }
                    }
                    else
                    {
                        BackedUp = true;
                    }
                }

                return BackedUp;
            }
            catch (Exception ex)
            {
                return BackedUp;
            }
        }

        private bool BackupClinicalRequestProviders(Guid IncorrectMemberId)
        {
            bool BackedUp = false;

            try
            {
                List<ClinicalRequestProviders> IncorrectItem = new List<ClinicalRequestProviders>();

                using (var db = new ICMS2DbContext())
                {
                    IncorrectItem = (from incitems in db.DbmsClinicalRequestProviders
                                     where incitems.member_id == IncorrectMemberId
                                     select incitems).ToList();

                    if (IncorrectItem != null)
                    {
                        if (IncorrectItem.Count > 0)
                        {
                            foreach (ClinicalRequestProviders ItemToBackup in IncorrectItem)
                            {
                                MergedClinicalRequestProviders BackUpItem = new MergedClinicalRequestProviders();
                                BackUpItem.address = ItemToBackup.address;
                                BackUpItem.city = ItemToBackup.city;
                                BackUpItem.clinical_request_providers_id = ItemToBackup.clinical_request_providers_id;
                                BackUpItem.creation_date = ItemToBackup.creation_date;
                                BackUpItem.creation_user_id = ItemToBackup.creation_user_id;
                                BackUpItem.department_id = ItemToBackup.department_id;
                                BackUpItem.disabled = ItemToBackup.disabled;
                                BackUpItem.fax_number = ItemToBackup.fax_number;
                                BackUpItem.last_update_date = ItemToBackup.last_update_date;
                                BackUpItem.last_update_user_id = ItemToBackup.last_update_user_id;
                                BackUpItem.member_id = ItemToBackup.member_id;
                                BackUpItem.name = ItemToBackup.name;
                                BackUpItem.pcp_id = ItemToBackup.pcp_id;
                                BackUpItem.phone_id = ItemToBackup.phone_id;
                                BackUpItem.state = ItemToBackup.state;
                                BackUpItem.system_role_id = ItemToBackup.system_role_id;
                                BackUpItem.use_manual_number = ItemToBackup.use_manual_number;
                                BackUpItem.zip = ItemToBackup.zip;

                                db.DbmsMergedClinicalRequestProviders.Add(BackUpItem);
                                int BackedUpResults = db.SaveChanges();

                                if (!BackedUp)
                                {
                                    if (BackedUpResults > 0)
                                    {
                                        BackedUp = true;
                                    }
                                }
                            }
                        }
                        else
                        {
                            BackedUp = true;
                        }
                    }
                    else
                    {
                        BackedUp = true;
                    }
                }

                return BackedUp;
            }
            catch (Exception ex)
            {
                return BackedUp;
            }
        }

        private bool BackupCrBillingWorktables(Guid IncorrectMemberId)
        {
            bool BackedUp = false;

            try
            {
                List<CrBillingWorktable> IncorrectItem = new List<CrBillingWorktable>();

                using (var db = new IcmsDataStagingDbContext())
                {
                    IncorrectItem = (from incitems in db.DbmsCrBillingWorktable
                                     where incitems.member_id == IncorrectMemberId
                                     select incitems).ToList();

                    if (IncorrectItem != null)
                    {
                        if (IncorrectItem.Count > 0)
                        {
                            foreach (CrBillingWorktable ItemToBackup in IncorrectItem)
                            {
                                MergedCrBillingWorktable BackUpItem = new MergedCrBillingWorktable();
                                BackUpItem.auth_start_date = ItemToBackup.auth_start_date;
                                BackUpItem.bill_due_date = ItemToBackup.bill_due_date;
                                BackUpItem.bill_entered_by = ItemToBackup.bill_entered_by;
                                BackUpItem.comments = ItemToBackup.comments;
                                BackUpItem.creation_date = ItemToBackup.creation_date;
                                BackUpItem.cr_rate = ItemToBackup.cr_rate;
                                BackUpItem.cr_record_id = ItemToBackup.cr_record_id;
                                BackUpItem.date_updated = ItemToBackup.date_updated;
                                BackUpItem.description = ItemToBackup.description;
                                BackUpItem.disable_flag = ItemToBackup.disable_flag;
                                BackUpItem.employer_name = ItemToBackup.employer_name;
                                BackUpItem.invoice_id = ItemToBackup.invoice_id;
                                BackUpItem.member_dob = ItemToBackup.member_dob;
                                BackUpItem.member_first_name = ItemToBackup.member_first_name;
                                BackUpItem.member_id = ItemToBackup.member_id;
                                BackUpItem.member_last_name = ItemToBackup.member_last_name;
                                BackUpItem.member_name = ItemToBackup.member_name;
                                BackUpItem.member_ssn = ItemToBackup.member_ssn;
                                BackUpItem.notes = ItemToBackup.notes;
                                BackUpItem.print_cr = ItemToBackup.print_cr;
                                BackUpItem.record_date = ItemToBackup.record_date;
                                BackUpItem.referral_number = ItemToBackup.referral_number;
                                BackUpItem.referral_type = ItemToBackup.referral_type;
                                BackUpItem.refreshed = ItemToBackup.refreshed;
                                BackUpItem.refreshed_date = ItemToBackup.refreshed_date;
                                BackUpItem.refreshed_user_id = ItemToBackup.refreshed_user_id;
                                BackUpItem.search_end_date = ItemToBackup.search_end_date;
                                BackUpItem.search_start_date = ItemToBackup.search_start_date;
                                BackUpItem.sending_date = ItemToBackup.sending_date;
                                BackUpItem.sending_item = ItemToBackup.sending_item;
                                BackUpItem.sent_date = ItemToBackup.sent_date;
                                BackUpItem.sent_item = ItemToBackup.sent_item;
                                BackUpItem.tpa_name = ItemToBackup.tpa_name;
                                BackUpItem.updated_date = ItemToBackup.updated_date;
                                BackUpItem.updated_user_id = ItemToBackup.updated_user_id;
                                BackUpItem.user_created = ItemToBackup.user_created;
                                BackUpItem.user_updated = ItemToBackup.user_updated;

                                db.DbmsMergedCrBillingWorktable.Add(BackUpItem);
                                int BackedUpResults = db.SaveChanges();

                                if (!BackedUp)
                                {
                                    if (BackedUpResults > 0)
                                    {
                                        BackedUp = true;
                                    }
                                }
                            }
                        }
                        else
                        {
                            BackedUp = true;
                        }
                    }
                    else
                    {
                        BackedUp = true;
                    }
                }

                return BackedUp;
            }
            catch (Exception ex)
            {
                return BackedUp;
            }
        }

        private bool BackupCmMemberNotes(Guid IncorrectMemberId)
        {
            bool BackedUp = false;

            try
            {
                List<CmMemberNote> IncorrectItem = new List<CmMemberNote>();

                using (var db = new ICMS2DbContext())
                {
                    IncorrectItem = (from incitems in db.DbmsCmMemberNote
                                     where incitems.member_id == IncorrectMemberId
                                     select incitems).ToList();

                    if (IncorrectItem != null)
                    {
                        if (IncorrectItem.Count > 0)
                        {
                            foreach (CmMemberNote ItemToBackup in IncorrectItem)
                            {
                                MergedCmMemberNote BackUpItem = new MergedCmMemberNote();
                                BackUpItem.created_user_id = ItemToBackup.created_user_id;
                                BackUpItem.creation_date = ItemToBackup.creation_date;
                                BackUpItem.evaluation_text = ItemToBackup.evaluation_text;
                                BackUpItem.member_id = ItemToBackup.member_id;
                                BackUpItem.record_date = ItemToBackup.record_date;

                                db.DbmsMergedCmMemberNote.Add(BackUpItem);
                                int BackedUpResults = db.SaveChanges();

                                if (!BackedUp)
                                {
                                    if (BackedUpResults > 0)
                                    {
                                        BackedUp = true;
                                    }
                                }
                            }
                        }
                        else
                        {
                            BackedUp = true;
                        }
                    }
                    else
                    {
                        BackedUp = true;
                    }
                }

                return BackedUp;
            }
            catch (Exception ex)
            {
                return BackedUp;
            }
        }

        private bool BackupClinicalReviewBills(Guid IncorrectMemberId)
        {
            bool BackedUp = false;

            try
            {
                List<ClinicalReviewBills> IncorrectItem = new List<ClinicalReviewBills>();

                using (var db = new ICMS2DbContext())
                {
                    IncorrectItem = (from incitems in db.DbmsClinicalReviewBills
                                     where incitems.member_id == IncorrectMemberId
                                     select incitems).ToList();

                    if (IncorrectItem != null)
                    {
                        if (IncorrectItem.Count > 0)
                        {
                            foreach (ClinicalReviewBills ItemToBackup in IncorrectItem)
                            {
                                MergedClinicalReviewBills BackUpItem = new MergedClinicalReviewBills();
                                BackUpItem.creation_date = ItemToBackup.creation_date;
                                BackUpItem.cr_bill_id = ItemToBackup.cr_bill_id;
                                BackUpItem.description = ItemToBackup.description;
                                BackUpItem.is_hospital_plan_bill = ItemToBackup.is_hospital_plan_bill;
                                BackUpItem.is_nurse_review = ItemToBackup.is_nurse_review;
                                BackUpItem.is_other_review = ItemToBackup.is_other_review;
                                BackUpItem.is_physician_review = ItemToBackup.is_physician_review;
                                BackUpItem.last_update_date = ItemToBackup.last_update_date;
                                BackUpItem.last_user_id = ItemToBackup.last_user_id;
                                BackUpItem.member_id = ItemToBackup.member_id;
                                BackUpItem.other_review_cost = ItemToBackup.other_review_cost;
                                BackUpItem.other_type_of_review = ItemToBackup.other_type_of_review;
                                BackUpItem.referral_number = ItemToBackup.referral_number;
                                BackUpItem.review_cost = ItemToBackup.review_cost;
                                BackUpItem.system_role_id = ItemToBackup.system_role_id;
                                BackUpItem.type_of_review = ItemToBackup.type_of_review;
                                BackUpItem.user_id = ItemToBackup.user_id;

                                db.DbmsMergedClinicalReviewBills.Add(BackUpItem);
                                int BackedUpResults = db.SaveChanges();

                                if (!BackedUp)
                                {
                                    if (BackedUpResults > 0)
                                    {
                                        BackedUp = true;
                                    }
                                }
                            }
                        }
                        else
                        {
                            BackedUp = true;
                        }
                    }
                    else
                    {
                        BackedUp = true;
                    }
                }

                return BackedUp;
            }
            catch (Exception ex)
            {
                return BackedUp;
            }
        }

        private bool BackupCodeRemovalItems(Guid IncorrectMemberId)
        {
            bool BackedUp = false;

            try
            {
                List<CodeRemovalItems> IncorrectItem = new List<CodeRemovalItems>();

                using (var db = new ICMS2DbContext())
                {
                    IncorrectItem = (from incitems in db.DbmsCodeRemovalItems
                                     where incitems.member_id == IncorrectMemberId
                                     select incitems).ToList();

                    if (IncorrectItem != null)
                    {
                        if (IncorrectItem.Count > 0)
                        {
                            foreach (CodeRemovalItems ItemToBackup in IncorrectItem)
                            {
                                MergedCodeRemovalItems BackUpItem = new MergedCodeRemovalItems();
                                BackUpItem.code_removal_item_id = ItemToBackup.code_removal_item_id;
                                BackUpItem.code_removal_reasons_id = ItemToBackup.code_removal_reasons_id;
                                BackUpItem.cpt_code = ItemToBackup.cpt_code;
                                BackUpItem.created_user_id = ItemToBackup.created_user_id;
                                BackUpItem.creation_date = ItemToBackup.creation_date;
                                BackUpItem.diagnosis_or_procedure_code = ItemToBackup.diagnosis_or_procedure_code;
                                BackUpItem.hcpcs_code = ItemToBackup.hcpcs_code;
                                BackUpItem.is_icd_10 = ItemToBackup.is_icd_10;
                                BackUpItem.is_primary_diagnosis = ItemToBackup.is_primary_diagnosis;
                                BackUpItem.lcm_activity_followup_id = ItemToBackup.lcm_activity_followup_id;
                                BackUpItem.lcm_followup_id = ItemToBackup.lcm_followup_id;
                                BackUpItem.lcn_case_number = ItemToBackup.lcn_case_number;
                                BackUpItem.member_id = ItemToBackup.member_id;
                                BackUpItem.other_diagnosis = ItemToBackup.other_diagnosis;
                                BackUpItem.primary_diagnosis = ItemToBackup.primary_diagnosis;
                                BackUpItem.procedure = ItemToBackup.procedure;
                                BackUpItem.quantity = ItemToBackup.quantity;
                                BackUpItem.referral_number = ItemToBackup.referral_number;
                                BackUpItem.removal_type = ItemToBackup.removal_type;
                                BackUpItem.secondary_diagnosis = ItemToBackup.secondary_diagnosis;
                                BackUpItem.surgical_procedure = ItemToBackup.surgical_procedure;

                                db.DbmsMergedCodeRemovalItems.Add(BackUpItem);
                                int BackedUpResults = db.SaveChanges();

                                if (!BackedUp)
                                {
                                    if (BackedUpResults > 0)
                                    {
                                        BackedUp = true;
                                    }
                                }
                            }
                        }
                        else
                        {
                            BackedUp = true;
                        }
                    }
                    else
                    {
                        BackedUp = true;
                    }
                }

                return BackedUp;
            }
            catch (Exception ex)
            {
                return BackedUp;
            }
        }

        private bool BackUpDentalVisits(Guid IncorrectMemberId)
        {
            bool BackedUp = false;

            try
            {
                List<rDentalVisits> IncorrectItem = new List<rDentalVisits>();

                using (var db = new ICMS2DbContext())
                {
                    IncorrectItem = (from incitems in db.DbmsDentalVisits
                                     where incitems.member_id == IncorrectMemberId
                                     select incitems).ToList();

                    if (IncorrectItem != null)
                    {
                        if (IncorrectItem.Count > 0)
                        {
                            foreach (rDentalVisits ItemToBackup in IncorrectItem)
                            {
                                MergedrDentalVisits BackUpItem = new MergedrDentalVisits();
                                BackUpItem.creation_date = ItemToBackup.creation_date;
                                BackUpItem.creation_user_id = ItemToBackup.creation_user_id;
                                BackUpItem.disabled = ItemToBackup.disabled;
                                BackUpItem.last_update_date = ItemToBackup.last_update_date;
                                BackUpItem.last_update_user_id = ItemToBackup.last_update_user_id;
                                BackUpItem.member_id = ItemToBackup.member_id;
                                BackUpItem.oral_health_provider = ItemToBackup.oral_health_provider;
                                BackUpItem.oral_note = ItemToBackup.oral_note;
                                BackUpItem.provider_address = ItemToBackup.provider_address;
                                BackUpItem.provider_phone = ItemToBackup.provider_phone;
                                BackUpItem.r_dental_specialty_id = ItemToBackup.r_dental_specialty_id;
                                BackUpItem.r_dental_visits_id = ItemToBackup.r_dental_visits_id;
                                BackUpItem.visit_date = ItemToBackup.visit_date;

                                db.DbmsMergedrDentalVisits.Add(BackUpItem);
                                int BackedUpResults = db.SaveChanges();

                                if (!BackedUp)
                                {
                                    if (BackedUpResults > 0)
                                    {
                                        BackedUp = true;
                                    }
                                }
                            }
                        }
                        else
                        {
                            BackedUp = true;
                        }
                    }
                    else
                    {
                        BackedUp = true;
                    }
                }

                return BackedUp;
            }
            catch (Exception ex)
            {
                return BackedUp;
            }
        }

        private bool BackUpDepartmentBedVacancies(Guid IncorrectMemberId)
        {
            bool BackedUp = false;

            try
            {
                List<rDepartmentBedVacancy> IncorrectItem = new List<rDepartmentBedVacancy>();

                using (var db = new ICMS2DbContext())
                {
                    IncorrectItem = (from incitems in db.DbmsDepartmentBedVacancy
                                     where incitems.member_id == IncorrectMemberId
                                     select incitems).ToList();

                    if (IncorrectItem != null)
                    {
                        if (IncorrectItem.Count > 0)
                        {
                            foreach (rDepartmentBedVacancy ItemToBackup in IncorrectItem)
                            {
                                MergedrDepartmentBedVacancy BackUpItem = new MergedrDepartmentBedVacancy();
                                BackUpItem.admission_number = ItemToBackup.admission_number;
                                BackUpItem.admit_date = ItemToBackup.admit_date;
                                BackUpItem.admit_user_id = ItemToBackup.admit_user_id;
                                BackUpItem.bed_changed = ItemToBackup.bed_changed;
                                BackUpItem.bed_changed_date = ItemToBackup.bed_changed_date;
                                BackUpItem.bed_changed_user_id = ItemToBackup.bed_changed_user_id;
                                BackUpItem.completed = ItemToBackup.completed;
                                BackUpItem.completed_date = ItemToBackup.completed_date;
                                BackUpItem.completed_user_id = ItemToBackup.completed_user_id;
                                BackUpItem.creation_date = ItemToBackup.creation_date;
                                BackUpItem.creation_user_id = ItemToBackup.creation_user_id;
                                BackUpItem.currently_in_room = ItemToBackup.currently_in_room;
                                BackUpItem.discharge_date = ItemToBackup.discharge_date;
                                BackUpItem.discharge_user_id = ItemToBackup.discharge_user_id;
                                BackUpItem.member_id = ItemToBackup.member_id;
                                BackUpItem.room_number = ItemToBackup.room_number;
                                BackUpItem.r_department_bed_vacancy_id = ItemToBackup.r_department_bed_vacancy_id;
                                BackUpItem.r_member_admission_transfer_id = ItemToBackup.r_member_admission_transfer_id;
                                BackUpItem.tpa_id = ItemToBackup.tpa_id;
                                BackUpItem.transfer_department_id = ItemToBackup.transfer_department_id;

                                db.DbmsMergedrDepartmentBedVacancy.Add(BackUpItem);
                                int BackedUpResults = db.SaveChanges();

                                if (!BackedUp)
                                {
                                    if (BackedUpResults > 0)
                                    {
                                        BackedUp = true;
                                    }
                                }
                            }
                        }
                        else
                        {
                            BackedUp = true;
                        }
                    }
                    else
                    {
                        BackedUp = true;
                    }
                }

                return BackedUp;
            }
            catch (Exception ex)
            {
                return BackedUp;
            }
        }

        private bool BackupDependentMemberUpdateReferences(Guid IncorrectMemberId)
        {
            bool BackedUp = false;

            try
            {
                List<DependentMemberUpdateReference> IncorrectItem = new List<DependentMemberUpdateReference>();

                using (var db = new ICMS2DbContext())
                {
                    IncorrectItem = (from incitems in db.DbmsDependentMemberUpdateReference
                                     where incitems.member_id == IncorrectMemberId
                                     select incitems).ToList();

                    if (IncorrectItem != null)
                    {
                        if (IncorrectItem.Count > 0)
                        {
                            foreach (DependentMemberUpdateReference ItemToBackup in IncorrectItem)
                            {
                                MergedDependentMemberUpdateReference BackUpItem = new MergedDependentMemberUpdateReference();
                                BackUpItem.creation_date = ItemToBackup.creation_date;
                                BackUpItem.creation_user_id = ItemToBackup.creation_user_id;
                                BackUpItem.dependent_update_reference_id = ItemToBackup.dependent_update_reference_id;
                                BackUpItem.member_id = ItemToBackup.member_id;
                                BackUpItem.original_member_parent_id = ItemToBackup.original_member_parent_id;
                                BackUpItem.original_relationship_id = ItemToBackup.original_relationship_id;
                                BackUpItem.updated_member_parent_id = ItemToBackup.updated_member_parent_id;
                                BackUpItem.updated_relationship_id = ItemToBackup.updated_relationship_id;

                                db.DbmsMergedDependentMemberUpdateReference.Add(BackUpItem);
                                int BackedUpResults = db.SaveChanges();

                                if (!BackedUp)
                                {
                                    if (BackedUpResults > 0)
                                    {
                                        BackedUp = true;
                                    }
                                }
                            }
                        }
                        else
                        {
                            BackedUp = true;
                        }
                    }
                    else
                    {
                        BackedUp = true;
                    }
                }

                return BackedUp;
            }
            catch (Exception ex)
            {
                return BackedUp;
            }
        }

        private bool BackupDiseaseManagementNotesAttachments(Guid IncorrectMemberId)
        {
            bool BackedUp = false;

            try
            {
                List<DiseaseManagementNotesAttachment> IncorrectItem = new List<DiseaseManagementNotesAttachment>();

                using (var db = new ICMS2DbContext())
                {
                    IncorrectItem = (from incitems in db.DbmsDiseaseManagementNotesAttachment
                                     where incitems.member_id == IncorrectMemberId
                                     select incitems).ToList();

                    if (IncorrectItem != null)
                    {
                        if (IncorrectItem.Count > 0)
                        {
                            foreach (DiseaseManagementNotesAttachment ItemToBackup in IncorrectItem)
                            {
                                MergedDiseaseManagementNotesAttachment BackUpItem = new MergedDiseaseManagementNotesAttachment();
                                BackUpItem.creation_user_id = ItemToBackup.creation_user_id;
                                BackUpItem.file_blob = ItemToBackup.file_blob;
                                BackUpItem.file_identifier = ItemToBackup.file_identifier;
                                BackUpItem.internal_patient = ItemToBackup.internal_patient;
                                BackUpItem.member_id = ItemToBackup.member_id;
                                BackUpItem.record_date = ItemToBackup.record_date;

                                db.DbmsMergedDiseaseManagementNotesAttachment.Add(BackUpItem);
                                int BackedUpResults = db.SaveChanges();

                                if (!BackedUp)
                                {
                                    if (BackedUpResults > 0)
                                    {
                                        BackedUp = true;
                                    }
                                }
                            }
                        }
                        else
                        {
                            BackedUp = true;
                        }
                    }
                    else
                    {
                        BackedUp = true;
                    }
                }

                return BackedUp;
            }
            catch (Exception ex)
            {
                return BackedUp;
            }
        }

        private bool BackupDmMemberSavings(Guid IncorrectMemberId)
        {
            bool BackedUp = false;

            try
            {
                List<DmMemberSavings> IncorrectItem = new List<DmMemberSavings>();

                using (var db = new ICMS2DbContext())
                {
                    IncorrectItem = (from incitems in db.DbmsDmMemberSavings
                                     where incitems.member_id == IncorrectMemberId
                                     select incitems).ToList();

                    if (IncorrectItem != null)
                    {
                        if (IncorrectItem.Count > 0)
                        {
                            foreach (DmMemberSavings ItemToBackup in IncorrectItem)
                            {
                                MergedDmMemberSavings BackUpItem = new MergedDmMemberSavings();
                                BackUpItem.care_plan_id = ItemToBackup.care_plan_id;
                                BackUpItem.comment = ItemToBackup.comment;
                                BackUpItem.cost_amount = ItemToBackup.cost_amount;
                                BackUpItem.creation_date = ItemToBackup.creation_date;
                                BackUpItem.creation_user_id = ItemToBackup.creation_user_id;
                                BackUpItem.dm_member_savings_description_id = ItemToBackup.dm_member_savings_description_id;
                                BackUpItem.dm_member_savings_id = ItemToBackup.dm_member_savings_id;
                                BackUpItem.end_date = ItemToBackup.end_date;
                                BackUpItem.last_update_date = ItemToBackup.last_update_date;
                                BackUpItem.last_update_user_id = ItemToBackup.last_update_user_id;
                                BackUpItem.member_id = ItemToBackup.member_id;
                                BackUpItem.savings_amount = ItemToBackup.savings_amount;
                                BackUpItem.savings_period_closed = ItemToBackup.savings_period_closed;
                                BackUpItem.start_date = ItemToBackup.start_date;

                                db.DbmsMergedDmMemberSavings.Add(BackUpItem);
                                int BackedUpResults = db.SaveChanges();

                                if (!BackedUp)
                                {
                                    if (BackedUpResults > 0)
                                    {
                                        BackedUp = true;
                                    }
                                }
                            }
                        }
                        else
                        {
                            BackedUp = true;
                        }
                    }
                    else
                    {
                        BackedUp = true;
                    }
                }

                return BackedUp;
            }
            catch (Exception ex)
            {
                return BackedUp;
            }
        }

        private bool BackupEmailOutbounds(Guid IncorrectMemberId)
        {
            bool BackedUp = false;

            try
            {
                List<EmailsOutbound> IncorrectItem = new List<EmailsOutbound>();

                using (var db = new ICMS2DbContext())
                {
                    IncorrectItem = (from incitems in db.DbmsEmailsOutbound
                                     where incitems.member_id == IncorrectMemberId
                                     select incitems).ToList();

                    if (IncorrectItem != null)
                    {
                        if (IncorrectItem.Count > 0)
                        {
                            foreach (EmailsOutbound ItemToBackup in IncorrectItem)
                            {
                                MergedEmailsOutbound BackUpItem = new MergedEmailsOutbound();
                                BackUpItem.creation_date = ItemToBackup.creation_date;
                                BackUpItem.email_address = ItemToBackup.email_address;
                                BackUpItem.email_cc_list = ItemToBackup.email_cc_list;
                                BackUpItem.email_message = ItemToBackup.email_message;
                                BackUpItem.email_outbound_id = ItemToBackup.email_outbound_id;
                                BackUpItem.email_sent = ItemToBackup.email_sent;
                                BackUpItem.email_sent_date = ItemToBackup.email_sent_date;
                                BackUpItem.email_subject = ItemToBackup.email_subject;
                                BackUpItem.email_to = ItemToBackup.email_to;
                                BackUpItem.email_type_id = ItemToBackup.email_type_id;
                                BackUpItem.file_blob = ItemToBackup.file_blob;
                                BackUpItem.file_identifier = ItemToBackup.file_identifier;
                                BackUpItem.lcm_followup_id = ItemToBackup.lcm_followup_id;
                                BackUpItem.lcn_case_number = ItemToBackup.lcn_case_number;
                                BackUpItem.member_id = ItemToBackup.member_id;
                                BackUpItem.notice_type = ItemToBackup.notice_type;
                                BackUpItem.referral_number = ItemToBackup.referral_number;
                                BackUpItem.user_id = ItemToBackup.user_id;
                                BackUpItem.zip_file_name = ItemToBackup.zip_file_name;
                                BackUpItem.zip_file_password = ItemToBackup.zip_file_password;

                                db.DbmsMergedEmailsOutbound.Add(BackUpItem);
                                int BackedUpResults = db.SaveChanges();

                                if (!BackedUp)
                                {
                                    if (BackedUpResults > 0)
                                    {
                                        BackedUp = true;
                                    }
                                }
                            }
                        }
                        else
                        {
                            BackedUp = true;
                        }
                    }
                    else
                    {
                        BackedUp = true;
                    }
                }

                return BackedUp;
            }
            catch (Exception ex)
            {
                return BackedUp;
            }
        }

        private bool BackupEpisodesOfCares(Guid IncorrectMemberId)
        {
            bool BackedUp = false;

            try
            {
                List<EpisodesOfCare> IncorrectItem = new List<EpisodesOfCare>();

                using (var db = new ICMS2DbContext())
                {
                    IncorrectItem = (from incitems in db.DbmsEpisodesOfCare
                                     where incitems.member_id == IncorrectMemberId
                                     select incitems).ToList();

                    if (IncorrectItem != null)
                    {
                        if (IncorrectItem.Count > 0)
                        {
                            foreach (EpisodesOfCare ItemToBackup in IncorrectItem)
                            {
                                MergedEpisodesOfCare BackUpItem = new MergedEpisodesOfCare();
                                BackUpItem.a1c_test_date_last_done = ItemToBackup.a1c_test_date_last_done;
                                BackUpItem.a1c_test_results = ItemToBackup.a1c_test_results;
                                BackUpItem.blood_pressure_date_last_done = ItemToBackup.blood_pressure_date_last_done;
                                BackUpItem.blood_pressure_results = ItemToBackup.blood_pressure_results;
                                BackUpItem.blood_verified_date = ItemToBackup.blood_verified_date;
                                BackUpItem.care_plan_id = ItemToBackup.care_plan_id;
                                BackUpItem.cholesterol_date_last_done = ItemToBackup.cholesterol_date_last_done;
                                BackUpItem.cholesterol_results = ItemToBackup.cholesterol_results;
                                BackUpItem.cholesterol_verified_date = ItemToBackup.cholesterol_verified_date;
                                BackUpItem.created_user_id = ItemToBackup.created_user_id;
                                BackUpItem.creation_date = ItemToBackup.creation_date;
                                BackUpItem.diabetic_education_date_last_done= ItemToBackup.diabetic_education_date_last_done;
                                BackUpItem.dialated_eye_date_last_done = ItemToBackup.dialated_eye_date_last_done;
                                BackUpItem.dilated_eye_exam_verified_date = ItemToBackup.dilated_eye_exam_verified_date;
                                BackUpItem.episode_complete = ItemToBackup.episode_complete;
                                BackUpItem.episode_of_care_id = ItemToBackup.episode_of_care_id;
                                BackUpItem.er_treatment_dates = ItemToBackup.er_treatment_dates;
                                BackUpItem.er_visits_verified_date = ItemToBackup.er_visits_verified_date;
                                BackUpItem.flu_vaccine_date_last_done = ItemToBackup.flu_vaccine_date_last_done;
                                BackUpItem.flu_vaccine_results = ItemToBackup.flu_vaccine_results;
                                BackUpItem.flu_vaccine_verified_date = ItemToBackup.flu_vaccine_verified_date;
                                BackUpItem.foot_check_date_last_done = ItemToBackup.foot_check_date_last_done;
                                BackUpItem.foot_exam_verified_date = ItemToBackup.foot_exam_verified_date;
                                BackUpItem.hdl_date_last_done = ItemToBackup.hdl_date_last_done;
                                BackUpItem.hdl_results = ItemToBackup.hdl_results;
                                BackUpItem.hdl_verified_date = ItemToBackup.hdl_verified_date;
                                BackUpItem.hgb_a1c_verified_date = ItemToBackup.hgb_a1c_verified_date;
                                BackUpItem.hospitalization_visits_verified_date = ItemToBackup.hospitalization_visits_verified_date;
                                BackUpItem.hospital_treatment_dates = ItemToBackup.hospital_treatment_dates;
                                BackUpItem.last_update_date = ItemToBackup.last_update_date;
                                BackUpItem.last_update_userid = ItemToBackup.last_update_userid;
                                BackUpItem.ldl_date_last_done = ItemToBackup.ldl_date_last_done;
                                BackUpItem.ldl_results = ItemToBackup.ldl_results;
                                BackUpItem.ldl_verified_date = ItemToBackup.ldl_verified_date;
                                BackUpItem.member_id = ItemToBackup.member_id;
                                BackUpItem.pcp_treatment_dates = ItemToBackup.pcp_treatment_dates;
                                BackUpItem.pcp_verified_date = ItemToBackup.pcp_verified_date;
                                BackUpItem.pneumonia_vaccine_date_last_done = ItemToBackup.pneumonia_vaccine_date_last_done;
                                BackUpItem.pneumonia_vaccine_results = ItemToBackup.pneumonia_vaccine_results;
                                BackUpItem.pneumonia_vaccine_verified_date = ItemToBackup.pneumonia_vaccine_verified_date;
                                BackUpItem.received_diabetic_education_material = ItemToBackup.received_diabetic_education_material;
                                BackUpItem.smoking_cessation_dates = ItemToBackup.smoking_cessation_dates;
                                BackUpItem.smoking_cessation_methods = ItemToBackup.smoking_cessation_methods;
                                BackUpItem.smoking_cessation_verified_date = ItemToBackup.smoking_cessation_verified_date;
                                BackUpItem.tool_id = ItemToBackup.tool_id;
                                BackUpItem.tool_instance_id = ItemToBackup.tool_instance_id;
                                BackUpItem.triglyceride_date_last_done = ItemToBackup.triglyceride_date_last_done;
                                BackUpItem.triglyceride_results = ItemToBackup.triglyceride_results;
                                BackUpItem.trig_verified_date  = ItemToBackup.trig_verified_date;
                                BackUpItem.urgent_care_treatement_dates = ItemToBackup.urgent_care_treatement_dates;
                                BackUpItem.urgent_care_visits_verified_date = ItemToBackup.urgent_care_visits_verified_date;
                                BackUpItem.urine_micro_date_last_done = ItemToBackup.urine_micro_date_last_done;
                                BackUpItem.urine_micro_results = ItemToBackup.urine_micro_results;
                                BackUpItem.urine_micro_verified_date = ItemToBackup.urine_micro_verified_date;

                                db.DbmsMergedEpisodesOfCare.Add(BackUpItem);
                                int BackedUpResults = db.SaveChanges();

                                if (!BackedUp)
                                {
                                    if (BackedUpResults > 0)
                                    {
                                        BackedUp = true;
                                    }
                                }
                            }
                        }
                        else
                        {
                            BackedUp = true;
                        }
                    }
                    else
                    {
                        BackedUp = true;
                    }
                }

                return BackedUp;
            }
            catch (Exception ex)
            {
                return BackedUp;
            }
        }

        private bool BackupInboundFaxReferralRemovals(Guid IncorrectMemberId)
        {
            bool BackedUp = false;

            try
            {
                List<rInboundFaxReferralRemoval> IncorrectItem = new List<rInboundFaxReferralRemoval>();

                using (var db = new ICMS2DbContext())
                {
                    IncorrectItem = (from incitems in db.DbmsInboundFaxReferralRemoval
                                     where incitems.member_id == IncorrectMemberId
                                     select incitems).ToList();

                    if (IncorrectItem != null)
                    {
                        if (IncorrectItem.Count > 0)
                        {
                            foreach (rInboundFaxReferralRemoval ItemToBackup in IncorrectItem)
                            {
                                MergedrInboundFaxReferralRemoval BackUpItem = new MergedrInboundFaxReferralRemoval();
                                BackUpItem.id = ItemToBackup.id;
                                BackUpItem.member_id = ItemToBackup.member_id;
                                BackUpItem.referral_number = ItemToBackup.referral_number;
                                BackUpItem.removed_by_user_id = ItemToBackup.removed_by_user_id;
                                BackUpItem.removed_date = ItemToBackup.removed_date;
                                BackUpItem.r_inbound_fax_referral_removal_id = ItemToBackup.r_inbound_fax_referral_removal_id;

                                db.DbmsMergedInboundFaxReferralRemoval.Add(BackUpItem);
                                int BackedUpResults = db.SaveChanges();

                                if (!BackedUp)
                                {
                                    if (BackedUpResults > 0)
                                    {
                                        BackedUp = true;
                                    }
                                }
                            }
                        }
                        else
                        {
                            BackedUp = true;
                        }
                    }
                    else
                    {
                        BackedUp = true;
                    }
                }

                return BackedUp;
            }
            catch (Exception ex)
            {
                return BackedUp;
            }
        }

        private bool BackupInboundVoicemails(Guid IncorrectMemberId)
        {
            bool BackedUp = false;

            try
            {
                List<rInboundVoicemail> IncorrectItem = new List<rInboundVoicemail>();

                using (var db = new ICMS2DbContext())
                {
                    IncorrectItem = (from incitems in db.DbmsInboundVoicemail
                                     where incitems.member_id == IncorrectMemberId
                                     select incitems).ToList();

                    if (IncorrectItem != null)
                    {
                        if (IncorrectItem.Count > 0)
                        {
                            foreach (rInboundVoicemail ItemToBackup in IncorrectItem)
                            {
                                MergedrInboundVoicemail BackUpItem = new MergedrInboundVoicemail();
                                BackUpItem.assigned_by_user_id = ItemToBackup.assigned_by_user_id;
                                BackUpItem.assigned_to_user_date = ItemToBackup.assigned_to_user_date;
                                BackUpItem.assigned_to_user_id = ItemToBackup.assigned_to_user_id;
                                BackUpItem.assigned_to_user_opened_date = ItemToBackup.assigned_to_user_opened_date;
                                BackUpItem.completed_by_user_id = ItemToBackup.completed_by_user_id;
                                BackUpItem.completed_date = ItemToBackup.completed_date;
                                BackUpItem.content_type = ItemToBackup.content_type;
                                BackUpItem.deleted_flag = ItemToBackup.deleted_flag;
                                BackUpItem.fax_dos = ItemToBackup.fax_dos;
                                BackUpItem.fax_dos_date = ItemToBackup.fax_dos_date;
                                BackUpItem.fax_type_date = ItemToBackup.fax_type_date;
                                BackUpItem.fax_type_id = ItemToBackup.fax_type_id;
                                BackUpItem.id = ItemToBackup.id;
                                BackUpItem.inbound_member_name = ItemToBackup.inbound_member_name;
                                BackUpItem.member_id = ItemToBackup.member_id;
                                BackUpItem.need_conversion = ItemToBackup.need_conversion;
                                BackUpItem.opened_by_date = ItemToBackup.opened_by_date;
                                BackUpItem.opened_by_user_id = ItemToBackup.opened_by_user_id;
                                BackUpItem.priority_level = ItemToBackup.priority_level;
                                BackUpItem.queue_dummy = ItemToBackup.queue_dummy;
                                BackUpItem.ready_flag = ItemToBackup.ready_flag;
                                BackUpItem.referral_number = ItemToBackup.referral_number;
                                BackUpItem.test_file = ItemToBackup.test_file;
                                BackUpItem.to_be_completed_date = ItemToBackup.to_be_completed_date;
                                BackUpItem.vmqueue_id = ItemToBackup.vmqueue_id;
                                BackUpItem.vm_creationtime = ItemToBackup.vm_creationtime;
                                BackUpItem.vm_filename = ItemToBackup.vm_filename;
                                BackUpItem.vm_handle = ItemToBackup.vm_handle;
                                BackUpItem.vm_image = ItemToBackup.vm_image;
                                BackUpItem.vm_remoteid = ItemToBackup.vm_remoteid;
                                BackUpItem.vm_subject = ItemToBackup.vm_subject;

                                db.DbmsMergedInboundVoicemail.Add(BackUpItem);
                                int BackedUpResults = db.SaveChanges();

                                if (!BackedUp)
                                {
                                    if (BackedUpResults > 0)
                                    {
                                        BackedUp = true;
                                    }
                                }
                            }
                        }
                        else
                        {
                            BackedUp = true;
                        }
                    }
                    else
                    {
                        BackedUp = true;
                    }
                }

                return BackedUp;
            }
            catch (Exception ex)
            {
                return BackedUp;
            }
        }

        private bool BackupLcmBillingWorktables(Guid IncorrectMemberId)
        {
            bool BackedUp = false;

            try
            {
                List<LcmBillingWorktable> IncorrectItem = new List<LcmBillingWorktable>();

                using (var db = new IcmsDataStagingDbContext())
                {
                    IncorrectItem = (from incitems in db.DbmsLcmBillingWorktable
                                     where incitems.member_id == IncorrectMemberId
                                     select incitems).ToList();

                    if (IncorrectItem != null)
                    {
                        if (IncorrectItem.Count > 0)
                        {
                            foreach (LcmBillingWorktable ItemToBackup in IncorrectItem)
                            {
                                MergedLcmBillingWorktable BackUpItem = new MergedLcmBillingWorktable();
                                BackUpItem.bill_due_date = ItemToBackup.bill_due_date;
                                BackUpItem.case_manager = ItemToBackup.case_manager;
                                BackUpItem.comments = ItemToBackup.comments;
                                BackUpItem.date_updated = ItemToBackup.date_updated;
                                BackUpItem.disable_flag = ItemToBackup.disable_flag;
                                BackUpItem.dob = ItemToBackup.dob;
                                BackUpItem.employer = ItemToBackup.employer;
                                BackUpItem.has_activity_report = ItemToBackup.has_activity_report;
                                BackUpItem.keep_in_billing = ItemToBackup.keep_in_billing;
                                BackUpItem.lcm_activity_followup_id = ItemToBackup.lcm_activity_followup_id;
                                BackUpItem.LCM_Invoice_Number = ItemToBackup.LCM_Invoice_Number;
                                BackUpItem.lcm_rate = ItemToBackup.lcm_rate;
                                BackUpItem.lcm_record_id = ItemToBackup.lcm_record_id;
                                BackUpItem.line_item_qa = ItemToBackup.line_item_qa;
                                BackUpItem.line_item_qa_date = ItemToBackup.line_item_qa_date;
                                BackUpItem.line_item_qa_user_id = ItemToBackup.line_item_qa_user_id;
                                BackUpItem.memberid = ItemToBackup.memberid;
                                BackUpItem.member_id = ItemToBackup.member_id;
                                BackUpItem.notes = ItemToBackup.notes;
                                BackUpItem.patient = ItemToBackup.patient;
                                BackUpItem.print_lcm = ItemToBackup.print_lcm;
                                BackUpItem.record_date = ItemToBackup.record_date;
                                BackUpItem.referral_number = ItemToBackup.referral_number;
                                BackUpItem.refreshed = ItemToBackup.refreshed;
                                BackUpItem.refreshed_date = ItemToBackup.refreshed_date;
                                BackUpItem.refreshed_user_id = ItemToBackup.refreshed_user_id;
                                BackUpItem.sending_date = ItemToBackup.sending_date;
                                BackUpItem.sending_item = ItemToBackup.sending_item;
                                BackUpItem.sent_date = ItemToBackup.sent_date;
                                BackUpItem.sent_item = ItemToBackup.sent_item;
                                BackUpItem.time_code = ItemToBackup.time_code;
                                BackUpItem.time_length = ItemToBackup.time_length;
                                BackUpItem.tpa = ItemToBackup.tpa;
                                BackUpItem.um_note = ItemToBackup.um_note;
                                BackUpItem.updated_date = ItemToBackup.updated_date;
                                BackUpItem.updated_user_id = ItemToBackup.updated_user_id;
                                BackUpItem.user_updated = ItemToBackup.user_updated;

                                db.DbmsMergedLcmBillingWorktable.Add(BackUpItem);
                                int BackedUpResults = db.SaveChanges();

                                if (!BackedUp)
                                {
                                    if (BackedUpResults > 0)
                                    {
                                        BackedUp = true;
                                    }
                                }
                            }
                        }
                        else
                        {
                            BackedUp = true;
                        }
                    }
                    else
                    {
                        BackedUp = true;
                    }
                }

                return BackedUp;
            }
            catch (Exception ex)
            {
                return BackedUp;
            }
        }

        private bool BackupLcmInfo(Guid IncorrectMemberId)
        {
            bool BackedUp = false;

            try
            {
                bool InitRptsMerged = false;
                bool ActivityRptsMerged = false;
                bool SavingsMerged = false;

                List<MemberLcmInitial> IncorrectInitRpts = new List<MemberLcmInitial>();
                List<MemberLcmActivity> IncorrectActivityRpts = new List<MemberLcmActivity>();
                List<MemberLcmFollowupSavings> IncorrectSavings = new List<MemberLcmFollowupSavings>();


                using (var db = new ICMS2DbContext())
                {

                    IncorrectInitRpts = (from inccpts in db.DbmsMemberLcmInitial
                                         where inccpts.member_id == IncorrectMemberId
                                         select inccpts).ToList();

                    if (IncorrectInitRpts != null)
                    {
                        if (IncorrectInitRpts.Count > 0)
                        {
                            foreach (MemberLcmInitial InitRptToBackup in IncorrectInitRpts)
                            {
                                MergedMemberLcmInitial BackUpRpt = new MergedMemberLcmInitial();
                                BackUpRpt.auth_number = InitRptToBackup.auth_number;
                                BackUpRpt.cancer_related = InitRptToBackup.cancer_related;
                                BackUpRpt.cm_flag = InitRptToBackup.cm_flag;
                                BackUpRpt.facility_id = InitRptToBackup.facility_id;
                                BackUpRpt.facility_type = InitRptToBackup.facility_type;
                                BackUpRpt.generated_via_cm_dashboard = InitRptToBackup.generated_via_cm_dashboard;
                                BackUpRpt.hospitalized = InitRptToBackup.hospitalized;
                                BackUpRpt.hospital_five_days = InitRptToBackup.hospital_five_days;
                                BackUpRpt.lcm_close_date = InitRptToBackup.lcm_close_date;
                                BackUpRpt.lcm_flag = InitRptToBackup.lcm_flag;
                                BackUpRpt.lcm_open_date = InitRptToBackup.lcm_open_date;
                                BackUpRpt.lcn_case_number = InitRptToBackup.lcn_case_number;
                                BackUpRpt.member_id = InitRptToBackup.member_id;
                                BackUpRpt.next_report_date = InitRptToBackup.next_report_date;
                                BackUpRpt.other_diagnosis = InitRptToBackup.other_diagnosis;
                                BackUpRpt.primary_diagnosis = InitRptToBackup.primary_diagnosis;
                                BackUpRpt.procedure = InitRptToBackup.procedure;
                                BackUpRpt.referral_number = InitRptToBackup.referral_number;
                                BackUpRpt.reinsurer_name = InitRptToBackup.reinsurer_name;
                                BackUpRpt.report_billed = InitRptToBackup.report_billed;
                                BackUpRpt.report_billed_date = InitRptToBackup.report_billed_date;
                                BackUpRpt.report_complete = InitRptToBackup.report_complete;
                                BackUpRpt.report_type = InitRptToBackup.report_type;
                                BackUpRpt.secondary_diagnosis = InitRptToBackup.secondary_diagnosis;
                                BackUpRpt.senttoadmin = InitRptToBackup.senttoadmin;
                                BackUpRpt.senttorein = InitRptToBackup.senttorein;
                                BackUpRpt.staging = InitRptToBackup.staging;
                                BackUpRpt.staging_status = InitRptToBackup.staging_status;
                                BackUpRpt.system_user_id = InitRptToBackup.system_user_id;
                                BackUpRpt.tpa_name = InitRptToBackup.tpa_name;
                                BackUpRpt.trigger_flag = InitRptToBackup.trigger_flag;
                                BackUpRpt.um_flag = InitRptToBackup.um_flag;
                                BackUpRpt._fixed = InitRptToBackup._fixed;

                                db.DbmsMergedMemberLcmInitial.Add(BackUpRpt);
                                int MergedIntiRptAdded = db.SaveChanges();

                                if (!InitRptsMerged)
                                {
                                    if (MergedIntiRptAdded > 0)
                                    {
                                        InitRptsMerged = true;
                                    }
                                }
                            }
                        }
                        else
                        {
                            InitRptsMerged = true;
                        }
                    }
                    else
                    {
                        InitRptsMerged = true;
                    }

                }


                using (var dbactrpt = new ICMS2DbContext())
                {
                    IncorrectActivityRpts = (from incicd in dbactrpt.DbmsMemberLcmActivity
                                             where incicd.member_id == IncorrectMemberId
                                             select incicd).ToList();

                    if (IncorrectActivityRpts != null)
                    {
                        if (IncorrectActivityRpts.Count > 0)
                        {
                            foreach (MemberLcmActivity ActivityRptToBackup in IncorrectActivityRpts)
                            {
                                MergedMemberLcmActivity BackupActivityRpt = new MergedMemberLcmActivity();
                                BackupActivityRpt.activity_report_note = ActivityRptToBackup.activity_report_note;
                                BackupActivityRpt.created_user_id = ActivityRptToBackup.created_user_id;
                                BackupActivityRpt.creation_date = ActivityRptToBackup.creation_date;
                                BackupActivityRpt.current_report = ActivityRptToBackup.current_report;
                                BackupActivityRpt.from_portal = ActivityRptToBackup.from_portal;
                                BackupActivityRpt.last_lcm_report_followup_id = ActivityRptToBackup.last_lcm_report_followup_id;
                                BackupActivityRpt.last_update_date = ActivityRptToBackup.last_update_date;
                                BackupActivityRpt.last_update_reason = ActivityRptToBackup.last_update_reason;
                                BackupActivityRpt.last_update_user_id = ActivityRptToBackup.last_update_user_id;
                                BackupActivityRpt.lcm_activity_followup_id = ActivityRptToBackup.lcm_activity_followup_id;
                                BackupActivityRpt.lcn_case_number = ActivityRptToBackup.lcn_case_number;
                                BackupActivityRpt.member_id = ActivityRptToBackup.member_id;
                                BackupActivityRpt.next_report_date = ActivityRptToBackup.next_report_date;
                                BackupActivityRpt.referral_number = ActivityRptToBackup.referral_number;
                                BackupActivityRpt.report_billed = ActivityRptToBackup.report_billed;
                                BackupActivityRpt.report_billed_date = ActivityRptToBackup.report_billed_date;

                                dbactrpt.DbmsMergedMemberLcmActivity.Add(BackupActivityRpt);
                                int MergedActivityRptAdded = dbactrpt.SaveChanges();

                                if (!ActivityRptsMerged)
                                {
                                    if (MergedActivityRptAdded > 0)
                                    {
                                        ActivityRptsMerged = true;
                                    }
                                }
                            }
                        }
                        else
                        {
                            ActivityRptsMerged = true;
                        }
                    }
                    else
                    {
                        ActivityRptsMerged = true;
                    }
                }


                using (var dbsavings = new ICMS2DbContext())
                {
                    IncorrectSavings = (from inchcpcs in dbsavings.DbmsMemberLcmFollowupSavings
                                        where inchcpcs.member_id == IncorrectMemberId
                                        select inchcpcs).ToList();

                    if (IncorrectSavings != null)
                    {
                        if (IncorrectSavings.Count > 0)
                        {
                            foreach (MemberLcmFollowupSavings MemLcmFollowupSavingsToBackup in IncorrectSavings)
                            {
                                MergedMemberLcmFollowupSavings BackupMemLcmFollowupSavings = new MergedMemberLcmFollowupSavings();
                                BackupMemLcmFollowupSavings.amount = MemLcmFollowupSavingsToBackup.amount;
                                BackupMemLcmFollowupSavings.creation_date = MemLcmFollowupSavingsToBackup.creation_date;
                                BackupMemLcmFollowupSavings.creation_user_id = MemLcmFollowupSavingsToBackup.creation_user_id;
                                BackupMemLcmFollowupSavings.description = MemLcmFollowupSavingsToBackup.description;
                                BackupMemLcmFollowupSavings.last_update_date = MemLcmFollowupSavingsToBackup.last_update_date;
                                BackupMemLcmFollowupSavings.last_update_user_id = MemLcmFollowupSavingsToBackup.last_update_user_id;
                                BackupMemLcmFollowupSavings.lcm_followup_id = MemLcmFollowupSavingsToBackup.lcm_followup_id;
                                BackupMemLcmFollowupSavings.lcn_case_number = MemLcmFollowupSavingsToBackup.lcn_case_number;
                                BackupMemLcmFollowupSavings.line_number = MemLcmFollowupSavingsToBackup.line_number;
                                BackupMemLcmFollowupSavings.member_id = MemLcmFollowupSavingsToBackup.member_id;
                                BackupMemLcmFollowupSavings.member_lcm_followup_savings_id = MemLcmFollowupSavingsToBackup.member_lcm_followup_savings_id;
                                BackupMemLcmFollowupSavings.member_lcm_followup_savings_type_id = MemLcmFollowupSavingsToBackup.member_lcm_followup_savings_type_id;
                                BackupMemLcmFollowupSavings.note = MemLcmFollowupSavingsToBackup.note;

                                dbsavings.DbmsMergedMemberLcmFollowupSavings.Add(BackupMemLcmFollowupSavings);
                                int MergedSavingsAdded = dbsavings.SaveChanges();

                                if (!SavingsMerged)
                                {
                                    if (MergedSavingsAdded > 0)
                                    {
                                        SavingsMerged = true;
                                    }
                                }
                            }
                        }
                        else
                        {
                            SavingsMerged = true;
                        }
                    }
                    else
                    {
                        SavingsMerged = true;
                    }
                }


                if (InitRptsMerged && ActivityRptsMerged && SavingsMerged)
                {
                    BackedUp = true;
                }

                return BackedUp;
            }
            catch (Exception ex)
            {
                return BackedUp;
            }
        }

        private bool BackupLcmReportNeededForBillingTasks(Guid IncorrectMemberId)
        {
            bool BackedUp = false;

            try
            {
                List<LcmReportNeededForBillingTask> IncorrectItem = new List<LcmReportNeededForBillingTask>();

                using (var db = new ICMS2DbContext())
                {
                    IncorrectItem = (from incitems in db.DbmsLcmReportNeededForBillingTask
                                     where incitems.member_id == IncorrectMemberId
                                     select incitems).ToList();

                    if (IncorrectItem != null)
                    {
                        if (IncorrectItem.Count > 0)
                        {
                            foreach (LcmReportNeededForBillingTask ItemToBackup in IncorrectItem)
                            {
                                MergedLcmReportNeededForBillingTask BackUpItem = new MergedLcmReportNeededForBillingTask();
                                BackUpItem.actual_end_action_date = ItemToBackup.actual_end_action_date;
                                BackUpItem.actual_start_action_date = ItemToBackup.actual_start_action_date;
                                BackUpItem.assigned_to_system_user_id = ItemToBackup.assigned_to_system_user_id;
                                BackUpItem.completed = ItemToBackup.completed;
                                BackUpItem.completed_by_system_user_id = ItemToBackup.completed_by_system_user_id;
                                BackUpItem.completed_date = ItemToBackup.completed_date;
                                BackUpItem.date_entered = ItemToBackup.date_entered;
                                BackUpItem.date_verified = ItemToBackup.date_verified;
                                BackUpItem.disabled = ItemToBackup.disabled;
                                BackUpItem.employer_id = ItemToBackup.employer_id;
                                BackUpItem.end_action_date = ItemToBackup.end_action_date;
                                BackUpItem.entered_by_system_user_id = ItemToBackup.entered_by_system_user_id;
                                BackUpItem.lcm_report_needed_for_billing_id = ItemToBackup.lcm_report_needed_for_billing_id;
                                BackUpItem.member_dob = ItemToBackup.member_dob;
                                BackUpItem.member_id = ItemToBackup.member_id;
                                BackUpItem.member_name = ItemToBackup.member_name;
                                BackUpItem.potential_billing_end_date = ItemToBackup.potential_billing_end_date;
                                BackUpItem.potential_billing_start_date = ItemToBackup.potential_billing_start_date;
                                BackUpItem.potential_lcm_followup_id = ItemToBackup.potential_lcm_followup_id;
                                BackUpItem.potential_lcn_case_number = ItemToBackup.potential_lcn_case_number;
                                BackUpItem.record_date = ItemToBackup.record_date;
                                BackUpItem.start_action_date = ItemToBackup.start_action_date;
                                BackUpItem.taskoutcome_id = ItemToBackup.taskoutcome_id;
                                BackUpItem.task_id = ItemToBackup.task_id;
                                BackUpItem.task_note = ItemToBackup.task_note;
                                BackUpItem.tpa_id = ItemToBackup.tpa_id;
                                BackUpItem.user_verified = ItemToBackup.user_verified;

                                db.DbmsMergedLcmReportNeededForBillingTask.Add(BackUpItem);
                                int BackedUpResults = db.SaveChanges();

                                if (!BackedUp)
                                {
                                    if (BackedUpResults > 0)
                                    {
                                        BackedUp = true;
                                    }
                                }
                            }
                        }
                        else
                        {
                            BackedUp = true;
                        }
                    }
                    else
                    {
                        BackedUp = true;
                    }
                }

                return BackedUp;
            }
            catch (Exception ex)
            {
                return BackedUp;
            }
        }

        private bool BackupLcmReportQaNotes(Guid IncorrectMemberId)
        {
            bool BackedUp = false;

            try
            {
                List<LcmReportQaNotes> IncorrectItem = new List<LcmReportQaNotes>();

                using (var db = new ICMS2DbContext())
                {
                    IncorrectItem = (from incitems in db.DbmsLcmReportQaNotes
                                     where incitems.member_id == IncorrectMemberId
                                     select incitems).ToList();

                    if (IncorrectItem != null)
                    {
                        if (IncorrectItem.Count > 0)
                        {
                            foreach (LcmReportQaNotes ItemToBackup in IncorrectItem)
                            {
                                MergedLcmReportQaNotes BackUpItem = new MergedLcmReportQaNotes();
                                BackUpItem.assigned_date = ItemToBackup.assigned_date;
                                BackUpItem.assigned_to_user_id = ItemToBackup.assigned_to_user_id;
                                BackUpItem.completed = ItemToBackup.completed;
                                BackUpItem.completed_date = ItemToBackup.completed_date;
                                BackUpItem.completed_user_id = ItemToBackup.completed_user_id;
                                BackUpItem.created_user_id = ItemToBackup.created_user_id;
                                BackUpItem.creation_date = ItemToBackup.creation_date;
                                BackUpItem.lcm_followup_id = ItemToBackup.lcm_followup_id;
                                BackUpItem.lcm_report_qa_notes_id = ItemToBackup.lcm_report_qa_notes_id;
                                BackUpItem.lcm_report_qa_task_id = ItemToBackup.lcm_report_qa_task_id;
                                BackUpItem.lcn_case_number = ItemToBackup.lcn_case_number;
                                BackUpItem.member_id = ItemToBackup.member_id;
                                BackUpItem.qa_notes = ItemToBackup.qa_notes;
                                BackUpItem.updated_date = ItemToBackup.updated_date;
                                BackUpItem.update_user_id = ItemToBackup.update_user_id;

                                db.DbmsMergedLcmReportQaNotes.Add(BackUpItem);
                                int BackedUpResults = db.SaveChanges();

                                if (!BackedUp)
                                {
                                    if (BackedUpResults > 0)
                                    {
                                        BackedUp = true;
                                    }
                                }
                            }
                        }
                        else
                        {
                            BackedUp = true;
                        }
                    }
                    else
                    {
                        BackedUp = true;
                    }
                }

                return BackedUp;
            }
            catch (Exception ex)
            {
                return BackedUp;
            }
        }

        private bool BackupLcmReportQaTasks(Guid IncorrectMemberId)
        {
            bool BackedUp = false;

            try
            {
                List<LcmReportQaTasks> IncorrectItem = new List<LcmReportQaTasks>();

                using (var db = new ICMS2DbContext())
                {
                    IncorrectItem = (from incitems in db.DbmsLcmReportQaTasks
                                     where incitems.member_id == IncorrectMemberId
                                     select incitems).ToList();

                    if (IncorrectItem != null)
                    {
                        if (IncorrectItem.Count > 0)
                        {
                            foreach (LcmReportQaTasks ItemToBackup in IncorrectItem)
                            {
                                MergedLcmReportQaTasks BackUpItem = new MergedLcmReportQaTasks();
                                BackUpItem.completed = ItemToBackup.completed;
                                BackUpItem.completed_date = ItemToBackup.completed_date;
                                BackUpItem.completed_user_id = ItemToBackup.completed_user_id;
                                BackUpItem.created_user_id = ItemToBackup.created_user_id;
                                BackUpItem.creation_date = ItemToBackup.creation_date;
                                BackUpItem.last_save_and_close_date = ItemToBackup.last_save_and_close_date;
                                BackUpItem.last_save_and_close_user_id = ItemToBackup.last_save_and_close_user_id;
                                BackUpItem.lcm_followup_id= ItemToBackup.lcm_followup_id;
                                BackUpItem.lcm_report_qa_task_id = ItemToBackup.lcm_report_qa_task_id;
                                BackUpItem.lcn_case_number = ItemToBackup.lcn_case_number;
                                BackUpItem.member_id = ItemToBackup.member_id;
                                BackUpItem.qa_notes = ItemToBackup.qa_notes;
                                BackUpItem.qa_task_assigned = ItemToBackup.qa_task_assigned;
                                BackUpItem.referral_number = ItemToBackup.referral_number;

                                db.DbmsMergedLcmReportQaTasks.Add(BackUpItem);
                                int BackedUpResults = db.SaveChanges();

                                if (!BackedUp)
                                {
                                    if (BackedUpResults > 0)
                                    {
                                        BackedUp = true;
                                    }
                                }
                            }
                        }
                        else
                        {
                            BackedUp = true;
                        }
                    }
                    else
                    {
                        BackedUp = true;
                    }
                }

                return BackedUp;
            }
            catch (Exception ex)
            {
                return BackedUp;
            }
        }

        private bool BackupLcmReportQaNotesTaskReferences(Guid IncorrectMemberId)
        {
            bool BackedUp = false;

            try
            {
                List<LcmReportQaNotesTaskReference> IncorrectItem = new List<LcmReportQaNotesTaskReference>();

                using (var db = new ICMS2DbContext())
                {
                    IncorrectItem = (from incitems in db.DbmsLcmReportQaNotesTaskReference
                                     where incitems.member_id == IncorrectMemberId
                                     select incitems).ToList();

                    if (IncorrectItem != null)
                    {
                        if (IncorrectItem.Count > 0)
                        {
                            foreach (LcmReportQaNotesTaskReference ItemToBackup in IncorrectItem)
                            {
                                MergedLcmReportQaNotesTaskReference BackUpItem = new MergedLcmReportQaNotesTaskReference();
                                BackUpItem.actual_end_action_date = ItemToBackup.actual_end_action_date;
                                BackUpItem.actual_start_action_date = ItemToBackup.actual_start_action_date;
                                BackUpItem.assigned_to_system_user_id = ItemToBackup.assigned_to_system_user_id;
                                BackUpItem.completed = ItemToBackup.completed;
                                BackUpItem.completed_by_system_user_id = ItemToBackup.completed_by_system_user_id;
                                BackUpItem.creation_date = ItemToBackup.creation_date;
                                BackUpItem.date_entered = ItemToBackup.date_entered;
                                BackUpItem.disabled = ItemToBackup.disabled;
                                BackUpItem.end_action_date = ItemToBackup.end_action_date;
                                BackUpItem.entered_by_system_user_id = ItemToBackup.entered_by_system_user_id;
                                BackUpItem.lcm_followup_id = ItemToBackup.lcm_followup_id;
                                BackUpItem.lcm_report_qa_notes_task_id = ItemToBackup.lcm_report_qa_notes_task_id;
                                BackUpItem.lcm_report_qa_task_id = ItemToBackup.lcm_report_qa_task_id;
                                BackUpItem.lcn_case_number = ItemToBackup.lcn_case_number;
                                BackUpItem.member_id = ItemToBackup.member_id;
                                BackUpItem.record_date = ItemToBackup.record_date;
                                BackUpItem.start_action_date = ItemToBackup.start_action_date;
                                BackUpItem.taskoutcome_id = ItemToBackup.taskoutcome_id;
                                BackUpItem.task_id = ItemToBackup.task_id;
                                BackUpItem.task_note = ItemToBackup.task_note;

                                db.DbmsMergedLcmReportQaNotesTaskReference.Add(BackUpItem);
                                int BackedUpResults = db.SaveChanges();

                                if (!BackedUp)
                                {
                                    if (BackedUpResults > 0)
                                    {
                                        BackedUp = true;
                                    }
                                }
                            }
                        }
                        else
                        {
                            BackedUp = true;
                        }
                    }
                    else
                    {
                        BackedUp = true;
                    }
                }

                return BackedUp;
            }
            catch (Exception ex)
            {
                return BackedUp;
            }
        }

        private bool BackupLcnReportFaxes(Guid IncorrectMemberId)
        {
            bool BackedUp = false;

            try
            {
                List<LcnReportFax> IncorrectItem = new List<LcnReportFax>();

                using (var db = new ICMS2DbContext())
                {
                    IncorrectItem = (from incitems in db.DbmsLcnReportFax
                                     where incitems.member_id == IncorrectMemberId
                                     select incitems).ToList();

                    if (IncorrectItem != null)
                    {
                        if (IncorrectItem.Count > 0)
                        {
                            foreach (LcnReportFax ItemToBackup in IncorrectItem)
                            {
                                MergedLcnReportFax BackUpItem = new MergedLcnReportFax();
                                BackUpItem.creation_date = ItemToBackup.creation_date;
                                BackUpItem.fax_handle = ItemToBackup.fax_handle;
                                BackUpItem.file_blob = ItemToBackup.file_blob;
                                BackUpItem.file_identifier = ItemToBackup.file_identifier;
                                BackUpItem.lcm_activity_followup_id = ItemToBackup.lcm_activity_followup_id;
                                BackUpItem.lcm_followup_id = ItemToBackup.lcm_followup_id;
                                BackUpItem.lcn_case_number = ItemToBackup.lcn_case_number;
                                BackUpItem.lcn_report_fax_id = ItemToBackup.lcn_report_fax_id;
                                BackUpItem.member_id = ItemToBackup.member_id;
                                BackUpItem.referral_number = ItemToBackup.referral_number;
                                BackUpItem.reinsurer_fax_number_used = ItemToBackup.reinsurer_fax_number_used;
                                BackUpItem.reinsurer_id = ItemToBackup.reinsurer_id;
                                BackUpItem.tpa_fax_number_used = ItemToBackup.tpa_fax_number_used;
                                BackUpItem.tpa_id = ItemToBackup.tpa_id;
                                BackUpItem.user_id = ItemToBackup.user_id;

                                db.DbmsMergedLcnReportFax.Add(BackUpItem);
                                int BackedUpResults = db.SaveChanges();

                                if (!BackedUp)
                                {
                                    if (BackedUpResults > 0)
                                    {
                                        BackedUp = true;
                                    }
                                }
                            }
                        }
                        else
                        {
                            BackedUp = true;
                        }
                    }
                    else
                    {
                        BackedUp = true;
                    }
                }

                return BackedUp;
            }
            catch (Exception ex)
            {
                return BackedUp;
            }
        }

        private bool BackupLetterReportFaxes(Guid IncorrectMemberId)
        {
            bool BackedUp = false;

            try
            {
                List<LetterReportFax> IncorrectItem = new List<LetterReportFax>();

                using (var db = new ICMS2DbContext())
                {
                    IncorrectItem = (from incitems in db.DbmsLetterReportFax
                                     where incitems.member_id == IncorrectMemberId
                                     select incitems).ToList();

                    if (IncorrectItem != null)
                    {
                        if (IncorrectItem.Count > 0)
                        {
                            foreach (LetterReportFax ItemToBackup in IncorrectItem)
                            {
                                MergedLetterReportFax BackUpItem = new MergedLetterReportFax();
                                BackUpItem.creation_date = ItemToBackup.creation_date;
                                BackUpItem.employer_id = ItemToBackup.employer_id;
                                BackUpItem.fax_date = ItemToBackup.fax_date;
                                BackUpItem.fax_handle = ItemToBackup.fax_handle;
                                BackUpItem.file_blob = ItemToBackup.file_blob;
                                BackUpItem.file_identifier = ItemToBackup.file_identifier;
                                BackUpItem.letter_report_fax_id = ItemToBackup.letter_report_fax_id;
                                BackUpItem.letter_report_name = ItemToBackup.letter_report_name;
                                BackUpItem.member_id = ItemToBackup.member_id;
                                BackUpItem.referral_number = ItemToBackup.referral_number;
                                BackUpItem.reinsurer_fax_number_used = ItemToBackup.reinsurer_fax_number_used;
                                BackUpItem.reinsurer_id = ItemToBackup.reinsurer_id;
                                BackUpItem.tpa_fax_number_used = ItemToBackup.tpa_fax_number_used;
                                BackUpItem.tpa_id = ItemToBackup.tpa_id;
                                BackUpItem.user_id = ItemToBackup.user_id;

                                db.DbmsMergedLetterReportFax.Add(BackUpItem);
                                int BackedUpResults = db.SaveChanges();

                                if (!BackedUp)
                                {
                                    if (BackedUpResults > 0)
                                    {
                                        BackedUp = true;
                                    }
                                }
                            }
                        }
                        else
                        {
                            BackedUp = true;
                        }
                    }
                    else
                    {
                        BackedUp = true;
                    }
                }

                return BackedUp;
            }
            catch (Exception ex)
            {
                return BackedUp;
            }
        }

        private bool BackupMdReviewDeterminations(Guid IncorrectMemberId)
        {
            bool BackedUp = false;

            try
            {
                List<MdReviewDetermination> IncorrectItem = new List<MdReviewDetermination>();

                using (var db = new ICMS2DbContext())
                {
                    IncorrectItem = (from incitems in db.DbmsMdReviewDetermination
                                     where incitems.member_id == IncorrectMemberId
                                     select incitems).ToList();

                    if (IncorrectItem != null)
                    {
                        if (IncorrectItem.Count > 0)
                        {
                            foreach (MdReviewDetermination ItemToBackup in IncorrectItem)
                            {
                                MergedMdReviewDetermination BackUpItem = new MergedMdReviewDetermination();
                                BackUpItem.actual_end_action_date = ItemToBackup.actual_end_action_date;
                                BackUpItem.actual_start_action_date = ItemToBackup.actual_start_action_date;
                                BackUpItem.assigned_to_system_user_id = ItemToBackup.assigned_to_system_user_id;
                                BackUpItem.cm_request = ItemToBackup.cm_request;
                                BackUpItem.cm_request_date = ItemToBackup.cm_request_date;
                                BackUpItem.completed = ItemToBackup.completed;
                                BackUpItem.completed_by_system_user_id = ItemToBackup.completed_by_system_user_id;
                                BackUpItem.completed_date = ItemToBackup.completed_date;
                                BackUpItem.creation_date = ItemToBackup.creation_date;
                                BackUpItem.date_entered = ItemToBackup.date_entered;
                                BackUpItem.date_verified = ItemToBackup.date_verified;
                                BackUpItem.disabled = ItemToBackup.disabled;
                                BackUpItem.end_action_date = ItemToBackup.end_action_date;
                                BackUpItem.entered_by_system_user_id = ItemToBackup.entered_by_system_user_id;
                                BackUpItem.md_review_determination_id = ItemToBackup.md_review_determination_id;
                                BackUpItem.md_review_determination_note = ItemToBackup.md_review_determination_note;
                                BackUpItem.md_review_request_id = ItemToBackup.md_review_request_id;
                                BackUpItem.member_id = ItemToBackup.member_id;
                                BackUpItem.record_date = ItemToBackup.record_date;
                                BackUpItem.referral_number = ItemToBackup.referral_number;
                                BackUpItem.start_action_date = ItemToBackup.start_action_date;
                                BackUpItem.taskoutcome_id = ItemToBackup.taskoutcome_id;
                                BackUpItem.task_id = ItemToBackup.task_id;
                                BackUpItem.task_note = ItemToBackup.task_note;
                                BackUpItem.task_viewed = ItemToBackup.task_viewed;
                                BackUpItem.task_viewed_date = ItemToBackup.task_viewed_date;
                                BackUpItem.task_viewed_user_id = ItemToBackup.task_viewed_user_id;
                                BackUpItem.user_verified = ItemToBackup.user_verified;

                                db.DbmsMergedMdReviewDetermination.Add(BackUpItem);
                                int BackedUpResults = db.SaveChanges();

                                if (!BackedUp)
                                {
                                    if (BackedUpResults > 0)
                                    {
                                        BackedUp = true;
                                    }
                                }
                            }
                        }
                        else
                        {
                            BackedUp = true;
                        }
                    }
                    else
                    {
                        BackedUp = true;
                    }
                }

                return BackedUp;
            }
            catch (Exception ex)
            {
                return BackedUp;
            }
        }

        private bool BackupMdReviewFollowups(Guid IncorrectMemberId)
        {
            bool BackedUp = false;

            try
            {
                List<MdReviewFollowup> IncorrectItem = new List<MdReviewFollowup>();

                using (var db = new ICMS2DbContext())
                {
                    IncorrectItem = (from incitems in db.DbmsMdReviewFollowup
                                     where incitems.member_id == IncorrectMemberId
                                     select incitems).ToList();

                    if (IncorrectItem != null)
                    {
                        if (IncorrectItem.Count > 0)
                        {
                            foreach (MdReviewFollowup ItemToBackup in IncorrectItem)
                            {
                                MergedMdReviewFollowup BackUpItem = new MergedMdReviewFollowup();
                                BackUpItem.actual_end_action_date = ItemToBackup.actual_end_action_date;
                                BackUpItem.actual_start_action_date = ItemToBackup.actual_start_action_date;
                                BackUpItem.assigned_to_system_user_id = ItemToBackup.assigned_to_system_user_id;
                                BackUpItem.cm_request = ItemToBackup.cm_request;
                                BackUpItem.cm_request_date = ItemToBackup.cm_request_date;
                                BackUpItem.completed = ItemToBackup.completed;
                                BackUpItem.completed_by_system_user_id = ItemToBackup.completed_by_system_user_id;
                                BackUpItem.completed_date = ItemToBackup.completed_date;
                                BackUpItem.creation_date = ItemToBackup.creation_date;
                                BackUpItem.date_entered = ItemToBackup.date_entered;
                                BackUpItem.disabled = ItemToBackup.disabled;
                                BackUpItem.end_action_date = ItemToBackup.end_action_date;
                                BackUpItem.entered_by_system_user_id = ItemToBackup.entered_by_system_user_id;
                                BackUpItem.md_review_appeal_note = ItemToBackup.md_review_appeal_note;
                                BackUpItem.md_review_followup_id = ItemToBackup.md_review_followup_id;
                                BackUpItem.md_review_request_id = ItemToBackup.md_review_request_id;
                                BackUpItem.member_id = ItemToBackup.member_id;
                                BackUpItem.record_date = ItemToBackup.record_date;
                                BackUpItem.referral_number = ItemToBackup.referral_number;
                                BackUpItem.start_action_date = ItemToBackup.start_action_date;
                                BackUpItem.taskoutcome_id = ItemToBackup.taskoutcome_id;
                                BackUpItem.task_id = ItemToBackup.task_id;
                                BackUpItem.task_note = ItemToBackup.task_note;

                                db.DbmsMergedMdReviewFollowup.Add(BackUpItem);
                                int BackedUpResults = db.SaveChanges();

                                if (!BackedUp)
                                {
                                    if (BackedUpResults > 0)
                                    {
                                        BackedUp = true;
                                    }
                                }
                            }
                        }
                        else
                        {
                            BackedUp = true;
                        }
                    }
                    else
                    {
                        BackedUp = true;
                    }
                }

                return BackedUp;
            }
            catch (Exception ex)
            {
                return BackedUp;
            }
        }

        private bool BackupMdReviewQuestions(Guid IncorrectMemberId)
        {
            bool BackedUp = false;

            try
            {
                List<MdReviewQuestion> IncorrectItem = new List<MdReviewQuestion>();

                using (var db = new ICMS2DbContext())
                {
                    IncorrectItem = (from incitems in db.DbmsMdReviewQuestion
                                     where incitems.member_id == IncorrectMemberId
                                     select incitems).ToList();

                    if (IncorrectItem != null)
                    {
                        if (IncorrectItem.Count > 0)
                        {
                            foreach (MdReviewQuestion ItemToBackup in IncorrectItem)
                            {
                                MergedMdReviewQuestion BackUpItem = new MergedMdReviewQuestion();
                                BackUpItem.actual_end_action_date = ItemToBackup.actual_end_action_date;
                                BackUpItem.actual_start_action_date = ItemToBackup.actual_start_action_date;
                                BackUpItem.assigned_to_system_user_id = ItemToBackup.assigned_to_system_user_id;
                                BackUpItem.cm_request = ItemToBackup.cm_request;
                                BackUpItem.cm_request_date = ItemToBackup.cm_request_date;
                                BackUpItem.completed = ItemToBackup.completed;
                                BackUpItem.completed_by_system_user_id = ItemToBackup.completed_by_system_user_id;
                                BackUpItem.completed_date = ItemToBackup.completed_date;
                                BackUpItem.creation_date = ItemToBackup.creation_date;
                                BackUpItem.date_entered = ItemToBackup.date_entered;
                                BackUpItem.date_verified = ItemToBackup.date_verified;
                                BackUpItem.disabled = ItemToBackup.disabled;
                                BackUpItem.end_action_date = ItemToBackup.end_action_date;
                                BackUpItem.entered_by_system_user_id = ItemToBackup.entered_by_system_user_id;
                                BackUpItem.md_answer_note = ItemToBackup.md_answer_note;
                                BackUpItem.md_question_note = ItemToBackup.md_question_note;
                                BackUpItem.md_review_question_id = ItemToBackup.md_review_question_id;
                                BackUpItem.md_review_request_id = ItemToBackup.md_review_request_id;
                                BackUpItem.member_id = ItemToBackup.member_id;
                                BackUpItem.mined_tpa_id = ItemToBackup.mined_tpa_id;
                                BackUpItem.record_date = ItemToBackup.record_date;
                                BackUpItem.referral_number = ItemToBackup.referral_number;
                                BackUpItem.start_action_date = ItemToBackup.start_action_date;
                                BackUpItem.taskoutcome_id = ItemToBackup.taskoutcome_id;
                                BackUpItem.task_id = ItemToBackup.task_id;
                                BackUpItem.task_note = ItemToBackup.task_note;
                                BackUpItem.user_verified = ItemToBackup.user_verified;

                                db.DbmsMergedMdReviewQuestion.Add(BackUpItem);
                                int BackedUpResults = db.SaveChanges();

                                if (!BackedUp)
                                {
                                    if (BackedUpResults > 0)
                                    {
                                        BackedUp = true;
                                    }
                                }
                            }
                        }
                        else
                        {
                            BackedUp = true;
                        }
                    }
                    else
                    {
                        BackedUp = true;
                    }
                }

                return BackedUp;
            }
            catch (Exception ex)
            {
                return BackedUp;
            }
        }

        private bool BackupMdReviewRequests(Guid IncorrectMemberId)
        {
            bool BackedUp = false;

            try
            {
                List<MdReviewRequest> IncorrectItem = new List<MdReviewRequest>();

                using (var db = new ICMS2DbContext())
                {
                    IncorrectItem = (from incitems in db.DbmsMdReviewRequest
                                     where incitems.member_id == IncorrectMemberId
                                     select incitems).ToList();

                    if (IncorrectItem != null)
                    {
                        if (IncorrectItem.Count > 0)
                        {
                            foreach (MdReviewRequest ItemToBackup in IncorrectItem)
                            {
                                MergedMdReviewRequest BackUpItem = new MergedMdReviewRequest();
                                BackUpItem.actual_end_action_date = ItemToBackup.actual_end_action_date;
                                BackUpItem.actual_start_action_date = ItemToBackup.actual_start_action_date;
                                BackUpItem.assigned_to_system_user_id = ItemToBackup.assigned_to_system_user_id;
                                BackUpItem.cm_request = ItemToBackup.cm_request;
                                BackUpItem.cm_request_date = ItemToBackup.cm_request_date;
                                BackUpItem.completed = ItemToBackup.completed;
                                BackUpItem.completed_by_system_user_id = ItemToBackup.completed_by_system_user_id;
                                BackUpItem.completed_date = ItemToBackup.completed_date;
                                BackUpItem.creation_date = ItemToBackup.creation_date;
                                BackUpItem.date_entered = ItemToBackup.date_entered;
                                BackUpItem.disabled = ItemToBackup.disabled;
                                BackUpItem.end_action_date = ItemToBackup.end_action_date;
                                BackUpItem.entered_by_system_user_id = ItemToBackup.entered_by_system_user_id;
                                BackUpItem.md_review_appeal_note = ItemToBackup.md_review_appeal_note;
                                BackUpItem.md_review_request_id = ItemToBackup.md_review_request_id;
                                BackUpItem.member_id = ItemToBackup.member_id;
                                BackUpItem.record_date = ItemToBackup.record_date;
                                BackUpItem.referral_number = ItemToBackup.referral_number;
                                BackUpItem.start_action_date = ItemToBackup.start_action_date;
                                BackUpItem.taskoutcome_id = ItemToBackup.taskoutcome_id;
                                BackUpItem.task_id = ItemToBackup.task_id;
                                BackUpItem.task_note = ItemToBackup.task_note;

                                db.DbmsMergedMdReviewRequest.Add(BackUpItem);
                                int BackedUpResults = db.SaveChanges();

                                if (!BackedUp)
                                {
                                    if (BackedUpResults > 0)
                                    {
                                        BackedUp = true;
                                    }
                                }
                            }
                        }
                        else
                        {
                            BackedUp = true;
                        }
                    }
                    else
                    {
                        BackedUp = true;
                    }
                }

                return BackedUp;
            }
            catch (Exception ex)
            {
                return BackedUp;
            }
        }

        private bool BackupMonthlyLcmManagementQas(Guid IncorrectMemberId)
        {
            bool BackedUp = false;

            try
            {
                List<MonthlyLcmManagementQa> IncorrectItem = new List<MonthlyLcmManagementQa>();

                using (var db = new ICMS2DbContext())
                {
                    IncorrectItem = (from incitems in db.DbmsMonthlyLcmManagementQa
                                     where incitems.member_id == IncorrectMemberId
                                     select incitems).ToList();

                    if (IncorrectItem != null)
                    {
                        if (IncorrectItem.Count > 0)
                        {
                            foreach (MonthlyLcmManagementQa ItemToBackup in IncorrectItem)
                            {
                                MergedMonthlyLcmManagementQa BackUpItem = new MergedMonthlyLcmManagementQa();
                                BackUpItem.assigned = ItemToBackup.assigned;
                                BackUpItem.assigned_by_user_id = ItemToBackup.assigned_by_user_id;
                                BackUpItem.assigned_date = ItemToBackup.assigned_date;
                                BackUpItem.assigned_to_user_id = ItemToBackup.assigned_to_user_id;
                                BackUpItem.creation_date = ItemToBackup.creation_date;
                                BackUpItem.creation_user_id = ItemToBackup.creation_user_id;
                                BackUpItem.member_id = ItemToBackup.member_id;
                                BackUpItem.monthly_lcm_management_qa = ItemToBackup.monthly_lcm_management_qa1;
                                BackUpItem.referral_number = ItemToBackup.referral_number;
                                BackUpItem.referral_qa = ItemToBackup.referral_qa;
                                BackUpItem.referral_qa_date = ItemToBackup.referral_qa_date;
                                BackUpItem.referral_qa_user_id = ItemToBackup.referral_qa_user_id;

                                db.DbmsMergedMonthlyLcmManagementQa.Add(BackUpItem);
                                int BackedUpResults = db.SaveChanges();

                                if (!BackedUp)
                                {
                                    if (BackedUpResults > 0)
                                    {
                                        BackedUp = true;
                                    }
                                }
                            }
                        }
                        else
                        {
                            BackedUp = true;
                        }
                    }
                    else
                    {
                        BackedUp = true;
                    }
                }

                return BackedUp;
            }
            catch (Exception ex)
            {
                return BackedUp;
            }
        }

        private bool BackupMonthlyUtilizationManagements(Guid IncorrectMemberId)
        {
            bool BackedUp = false;

            try
            {
                List<MonthlyUtilizationManagement> IncorrectItem = new List<MonthlyUtilizationManagement>();

                using (var db = new ICMS2DbContext())
                {
                    IncorrectItem = (from incitems in db.DbmsMonthlyUtilizationManagement
                                     where incitems.member_id == IncorrectMemberId
                                     select incitems).ToList();

                    if (IncorrectItem != null)
                    {
                        if (IncorrectItem.Count > 0)
                        {
                            foreach (MonthlyUtilizationManagement ItemToBackup in IncorrectItem)
                            {
                                MergedMonthlyUtilizationManagement BackUpItem = new MergedMonthlyUtilizationManagement();
                                BackUpItem.assigned = ItemToBackup.assigned;
                                BackUpItem.assigned_by_user_id = ItemToBackup.assigned_by_user_id;
                                BackUpItem.assigned_date = ItemToBackup.assigned_date;
                                BackUpItem.assigned_to_user_id = ItemToBackup.assigned_to_user_id;
                                BackUpItem.member_id = ItemToBackup.member_id;
                                BackUpItem.monthly_utilization_management_id = ItemToBackup.monthly_utilization_management_id;
                                BackUpItem.referral_number = ItemToBackup.referral_number;
                                BackUpItem.referral_qa = ItemToBackup.referral_qa;
                                BackUpItem.referral_qa_date = ItemToBackup.referral_qa_date;
                                BackUpItem.referral_qa_user_id = ItemToBackup.referral_qa_user_id;

                                db.DbmsMergedMonthlyUtilizationManagement.Add(BackUpItem);
                                int BackedUpResults = db.SaveChanges();

                                if (!BackedUp)
                                {
                                    if (BackedUpResults > 0)
                                    {
                                        BackedUp = true;
                                    }
                                }
                            }
                        }
                        else
                        {
                            BackedUp = true;
                        }
                    }
                    else
                    {
                        BackedUp = true;
                    }
                }

                return BackedUp;
            }
            catch (Exception ex)
            {
                return BackedUp;
            }
        }

        private bool BackupStdBillingWorktables(Guid IncorrectMemberId)
        {
            bool BackedUp = false;

            try
            {
                List<StdBillingWorktable> IncorrectItem = new List<StdBillingWorktable>();

                using (var db = new IcmsDataStagingDbContext())
                {
                    IncorrectItem = (from incitems in db.DbmsStdBillingWorktable
                                     where incitems.member_id == IncorrectMemberId
                                     select incitems).ToList();

                    if (IncorrectItem != null)
                    {
                        if (IncorrectItem.Count > 0)
                        {
                            foreach (StdBillingWorktable ItemToBackup in IncorrectItem)
                            {
                                MergedStdBillingWorktable BackUpItem = new MergedStdBillingWorktable();
                                BackUpItem.auth_end_date = ItemToBackup.auth_end_date;
                                BackUpItem.auth_start_date = ItemToBackup.auth_start_date;
                                BackUpItem.bill_due_date = ItemToBackup.bill_due_date;
                                BackUpItem.care_mode = ItemToBackup.care_mode;
                                BackUpItem.case_owner_created_by = ItemToBackup.case_owner_created_by;
                                BackUpItem.comments = ItemToBackup.comments;
                                BackUpItem.creation_date = ItemToBackup.creation_date;
                                BackUpItem.date_updated = ItemToBackup.date_updated;
                                BackUpItem.disable_flag = ItemToBackup.disable_flag;
                                BackUpItem.employer_id = ItemToBackup.employer_id;
                                BackUpItem.employer_name = ItemToBackup.employer_name;
                                BackUpItem.invoice_id = ItemToBackup.invoice_id;
                                BackUpItem.member_dob = ItemToBackup.member_dob;
                                BackUpItem.member_first_name = ItemToBackup.member_first_name;
                                BackUpItem.member_id = ItemToBackup.member_id;
                                BackUpItem.member_last_name = ItemToBackup.member_last_name;
                                BackUpItem.member_name = ItemToBackup.member_name;
                                BackUpItem.member_ssn = ItemToBackup.member_ssn;
                                BackUpItem.notes = ItemToBackup.notes;
                                BackUpItem.note_entered_by = ItemToBackup.note_entered_by;
                                BackUpItem.print_std = ItemToBackup.print_std;
                                BackUpItem.record_date = ItemToBackup.record_date;
                                BackUpItem.referral_number = ItemToBackup.referral_number;
                                BackUpItem.referral_type = ItemToBackup.referral_type;
                                BackUpItem.refreshed = ItemToBackup.refreshed;
                                BackUpItem.refreshed_date = ItemToBackup.refreshed_date;
                                BackUpItem.refreshed_user_id = ItemToBackup.refreshed_user_id;
                                BackUpItem.search_end_date = ItemToBackup.search_end_date;
                                BackUpItem.search_start_date = ItemToBackup.search_start_date;
                                BackUpItem.sending_date = ItemToBackup.sending_date;
                                BackUpItem.sending_item = ItemToBackup.sending_item;
                                BackUpItem.sent_date = ItemToBackup.sent_date;
                                BackUpItem.sent_item = ItemToBackup.sent_item;
                                BackUpItem.std_office_location = ItemToBackup.std_office_location;
                                BackUpItem.std_rate = ItemToBackup.std_rate;
                                BackUpItem.std_record_id = ItemToBackup.std_record_id;
                                BackUpItem.time_code = ItemToBackup.time_code;
                                BackUpItem.time_length = ItemToBackup.time_length;
                                BackUpItem.tpa_id = ItemToBackup.tpa_id;
                                BackUpItem.tpa_name = ItemToBackup.tpa_name;
                                BackUpItem.updated_date = ItemToBackup.updated_date;
                                BackUpItem.updated_user_id = ItemToBackup.updated_user_id;
                                BackUpItem.user_created = ItemToBackup.user_created;
                                BackUpItem.user_updated = ItemToBackup.user_updated;

                                db.DbmsMergedStdBillingWorktable.Add(BackUpItem);
                                int BackedUpResults = db.SaveChanges();

                                if (!BackedUp)
                                {
                                    if (BackedUpResults > 0)
                                    {
                                        BackedUp = true;
                                    }
                                }
                            }
                        }
                        else
                        {
                            BackedUp = true;
                        }
                    }
                    else
                    {
                        BackedUp = true;
                    }
                }

                return BackedUp;
            }
            catch (Exception ex)
            {
                return BackedUp;
            }
        }

        private bool BackupSuspendCaseToTaskReferences(Guid IncorrectMemberId)
        {
            bool BackedUp = false;

            try
            {
                List<SuspendCaseToTaskReference> IncorrectItem = new List<SuspendCaseToTaskReference>();

                using (var db = new ICMS2DbContext())
                {
                    IncorrectItem = (from incitems in db.DbmsSuspendCaseToTaskReference
                                     where incitems.member_id == IncorrectMemberId
                                     select incitems).ToList();

                    if (IncorrectItem != null)
                    {
                        if (IncorrectItem.Count > 0)
                        {
                            foreach (SuspendCaseToTaskReference ItemToBackup in IncorrectItem)
                            {
                                MergedSuspendCaseToTaskReference BackUpItem = new MergedSuspendCaseToTaskReference();
                                BackUpItem.comment = ItemToBackup.comment;
                                BackUpItem.completed = ItemToBackup.completed;
                                BackUpItem.completed_date = ItemToBackup.completed_date;
                                BackUpItem.completed_user_id = ItemToBackup.completed_user_id;
                                BackUpItem.created_user_id = ItemToBackup.created_user_id;
                                BackUpItem.creation_date = ItemToBackup.creation_date;
                                BackUpItem.lcm_followup_id = ItemToBackup.lcm_followup_id;
                                BackUpItem.lcn_case_number = ItemToBackup.lcn_case_number;
                                BackUpItem.member_id = ItemToBackup.member_id;
                                BackUpItem.member_task_id = ItemToBackup.member_task_id;
                                BackUpItem.move_to_date = ItemToBackup.move_to_date;
                                BackUpItem.referral_number = ItemToBackup.referral_number;
                                BackUpItem.referral_type = ItemToBackup.referral_type;
                                BackUpItem.suspend_case_to_task_reference_id = ItemToBackup.suspend_case_to_task_reference_id;
                                BackUpItem.task_id = ItemToBackup.task_id;

                                db.DbmsMergedSuspendCaseToTaskReference.Add(BackUpItem);
                                int BackedUpResults = db.SaveChanges();

                                if (!BackedUp)
                                {
                                    if (BackedUpResults > 0)
                                    {
                                        BackedUp = true;
                                    }
                                }
                            }
                        }
                        else
                        {
                            BackedUp = true;
                        }
                    }
                    else
                    {
                        BackedUp = true;
                    }
                }

                return BackedUp;
            }
            catch (Exception ex)
            {
                return BackedUp;
            }
        }

        private bool BackupSuspendedNotes(Guid IncorrectMemberId)
        {
            bool BackedUp = false;

            try
            {
                List<SuspendedNotes> IncorrectItem = new List<SuspendedNotes>();

                using (var db = new ICMS2DbContext())
                {
                    IncorrectItem = (from incitems in db.DbmsSuspendedNotes
                                     where incitems.member_id == IncorrectMemberId
                                     select incitems).ToList();

                    if (IncorrectItem != null)
                    {
                        if (IncorrectItem.Count > 0)
                        {
                            foreach (SuspendedNotes ItemToBackup in IncorrectItem)
                            {
                                MergedSuspendedNotes BackUpItem = new MergedSuspendedNotes();
                                BackUpItem.billing_id = ItemToBackup.billing_id;
                                BackUpItem.creation_date = ItemToBackup.creation_date;
                                BackUpItem.creation_user_id = ItemToBackup.creation_user_id;
                                BackUpItem.member_id = ItemToBackup.member_id;
                                BackUpItem.mid_month_allow_save_date = ItemToBackup.mid_month_allow_save_date;
                                BackUpItem.mid_month_suspend = ItemToBackup.mid_month_suspend;
                                BackUpItem.note_text = ItemToBackup.note_text;
                                BackUpItem.note_type = ItemToBackup.note_type;
                                BackUpItem.referral_number = ItemToBackup.referral_number;
                                BackUpItem.RN_notes = ItemToBackup.RN_notes;
                                BackUpItem.suspended_note_id = ItemToBackup.suspended_note_id;

                                db.DbmsMergedSuspendedNotes.Add(BackUpItem);
                                int BackedUpResults = db.SaveChanges();

                                if (!BackedUp)
                                {
                                    if (BackedUpResults > 0)
                                    {
                                        BackedUp = true;
                                    }
                                }
                            }
                        }
                        else
                        {
                            BackedUp = true;
                        }
                    }
                    else
                    {
                        BackedUp = true;
                    }
                }

                return BackedUp;
            }
            catch (Exception ex)
            {
                return BackedUp;
            }
        }

        private bool BackupSuspendedNotesOverrides(Guid IncorrectMemberId)
        {
            bool BackedUp = false;

            try
            {
                List<SuspendedNotesOverride> IncorrectItem = new List<SuspendedNotesOverride>();

                using (var db = new ICMS2DbContext())
                {
                    IncorrectItem = (from incitems in db.DbmsSuspendedNotesOverride
                                     where incitems.member_id == IncorrectMemberId
                                     select incitems).ToList();

                    if (IncorrectItem != null)
                    {
                        if (IncorrectItem.Count > 0)
                        {
                            foreach (SuspendedNotesOverride ItemToBackup in IncorrectItem)
                            {
                                MergedSuspendedNotesOverride BackUpItem = new MergedSuspendedNotesOverride();
                                BackUpItem.member_id = ItemToBackup.member_id;
                                BackUpItem.note_text = ItemToBackup.note_text;
                                BackUpItem.note_type = ItemToBackup.note_type;
                                BackUpItem.override_date = ItemToBackup.override_date;
                                BackUpItem.override_user_id = ItemToBackup.override_user_id;
                                BackUpItem.referral_number = ItemToBackup.referral_number;
                                BackUpItem.RN_notes = ItemToBackup.RN_notes;
                                BackUpItem.suspended_notes_override_id = ItemToBackup.suspended_notes_override_id;

                                db.DbmsMergedSuspendedNotesOverride.Add(BackUpItem);
                                int BackedUpResults = db.SaveChanges();

                                if (!BackedUp)
                                {
                                    if (BackedUpResults > 0)
                                    {
                                        BackedUp = true;
                                    }
                                }
                            }
                        }
                        else
                        {
                            BackedUp = true;
                        }
                    }
                    else
                    {
                        BackedUp = true;
                    }
                }

                return BackedUp;
            }
            catch (Exception ex)
            {
                return BackedUp;
            }
        }

        private bool BackupTelephoneNotesAttachments(Guid IncorrectMemberId)
        {
            bool BackedUp = false;

            try
            {
                List<TelephoneNotesAttachment> IncorrectItem = new List<TelephoneNotesAttachment>();

                using (var db = new ICMS2DbContext())
                {
                    IncorrectItem = (from incitems in db.DbmsTelephoneNotesAttachment
                                     where incitems.member_id == IncorrectMemberId
                                     select incitems).ToList();

                    if (IncorrectItem != null)
                    {
                        if (IncorrectItem.Count > 0)
                        {
                            foreach (TelephoneNotesAttachment ItemToBackup in IncorrectItem)
                            {
                                MergedTelephoneNotesAttachment BackUpItem = new MergedTelephoneNotesAttachment();
                                BackUpItem.creation_user_id = ItemToBackup.creation_user_id;
                                BackUpItem.file_blob = ItemToBackup.file_blob;
                                BackUpItem.file_identifier = ItemToBackup.file_identifier;
                                BackUpItem.internal_patient = ItemToBackup.internal_patient;
                                BackUpItem.member_id = ItemToBackup.member_id;
                                BackUpItem.record_date = ItemToBackup.record_date;

                                db.DbmsMergedTelephoneNotesAttachment.Add(BackUpItem);
                                int BackedUpResults = db.SaveChanges();

                                if (!BackedUp)
                                {
                                    if (BackedUpResults > 0)
                                    {
                                        BackedUp = true;
                                    }
                                }
                            }
                        }
                        else
                        {
                            BackedUp = true;
                        }
                    }
                    else
                    {
                        BackedUp = true;
                    }
                }

                return BackedUp;
            }
            catch (Exception ex)
            {
                return BackedUp;
            }
        }

        private bool BackupTransitionalCareReferences(Guid IncorrectMemberId)
        {
            bool BackedUp = false;

            try
            {
                List<TransitionalCareReference> IncorrectItem = new List<TransitionalCareReference>();

                using (var db = new ICMS2DbContext())
                {
                    IncorrectItem = (from incitems in db.DbmsTransitionalCareReference
                                     where incitems.member_id == IncorrectMemberId
                                     select incitems).ToList();

                    if (IncorrectItem != null)
                    {
                        if (IncorrectItem.Count > 0)
                        {
                            foreach (TransitionalCareReference ItemToBackup in IncorrectItem)
                            {
                                MergedTransitionalCareReference BackUpItem = new MergedTransitionalCareReference();
                                BackUpItem.admit_date = ItemToBackup.admit_date;
                                BackUpItem.contact_email = ItemToBackup.contact_email;
                                BackUpItem.contact_name = ItemToBackup.contact_name;
                                BackUpItem.contact_phone = ItemToBackup.contact_phone;
                                BackUpItem.discharge_date = ItemToBackup.discharge_date;
                                BackUpItem.dme_pcp_id = ItemToBackup.dme_pcp_id;
                                BackUpItem.has_ot = ItemToBackup.has_ot;
                                BackUpItem.has_other = ItemToBackup.has_other;
                                BackUpItem.has_pt = ItemToBackup.has_pt;
                                BackUpItem.has_rn = ItemToBackup.has_rn;
                                BackUpItem.has_rt = ItemToBackup.has_rt;
                                BackUpItem.has_st = ItemToBackup.has_st;
                                BackUpItem.home_care_services_requested = ItemToBackup.home_care_services_requested;
                                BackUpItem.home_pcp_id = ItemToBackup.home_pcp_id;
                                BackUpItem.member_id = ItemToBackup.member_id;
                                BackUpItem.note = ItemToBackup.note;
                                BackUpItem.other_frequency = ItemToBackup.other_frequency;
                                BackUpItem.ot_frequency = ItemToBackup.ot_frequency;
                                BackUpItem.primary_care_giver = ItemToBackup.primary_care_giver;
                                BackUpItem.pt_frequency = ItemToBackup.pt_frequency;
                                BackUpItem.referral_number = ItemToBackup.referral_number;
                                BackUpItem.rn_requency = ItemToBackup.rn_requency;
                                BackUpItem.rt_frequency = ItemToBackup.rt_frequency;
                                BackUpItem.st_frequency = ItemToBackup.st_frequency;
                                BackUpItem.tc_nurse_system_user_id = ItemToBackup.tc_nurse_system_user_id;
                                BackUpItem.transitional_care_reference_id = ItemToBackup.transitional_care_reference_id;

                                db.DbmsMergedTransitionalCareReference.Add(BackUpItem);
                                int BackedUpResults = db.SaveChanges();

                                if (!BackedUp)
                                {
                                    if (BackedUpResults > 0)
                                    {
                                        BackedUp = true;
                                    }
                                }
                            }
                        }
                        else
                        {
                            BackedUp = true;
                        }
                    }
                    else
                    {
                        BackedUp = true;
                    }
                }

                return BackedUp;
            }
            catch (Exception ex)
            {
                return BackedUp;
            }
        }

        private bool BackupUmAssignedToTasks(Guid IncorrectMemberId)
        {
            bool BackedUp = false;

            try
            {
                List<UmAssignedToTask> IncorrectItem = new List<UmAssignedToTask>();

                using (var db = new ICMS2DbContext())
                {
                    IncorrectItem = (from incitems in db.DbmsUmAssignedToTask
                                     where incitems.member_id == IncorrectMemberId
                                     select incitems).ToList();

                    if (IncorrectItem != null)
                    {
                        if (IncorrectItem.Count > 0)
                        {
                            foreach (UmAssignedToTask ItemToBackup in IncorrectItem)
                            {
                                MergedUmAssignedToTask BackUpItem = new MergedUmAssignedToTask();
                                BackUpItem.actual_end_action_date = ItemToBackup.actual_end_action_date;
                                BackUpItem.actual_start_action_date = ItemToBackup.actual_start_action_date;
                                BackUpItem.assigned_to_system_user_id = ItemToBackup.assigned_to_system_user_id;
                                BackUpItem.completed = ItemToBackup.completed;
                                BackUpItem.completed_by_system_user_id = ItemToBackup.completed_by_system_user_id;
                                BackUpItem.completed_date = ItemToBackup.completed_date;
                                BackUpItem.date_entered = ItemToBackup.date_entered;
                                BackUpItem.disabled = ItemToBackup.disabled;
                                BackUpItem.employer_id = ItemToBackup.employer_id;
                                BackUpItem.end_action_date = ItemToBackup.end_action_date;
                                BackUpItem.end_date = ItemToBackup.end_date;
                                BackUpItem.entered_by_system_user_id = ItemToBackup.entered_by_system_user_id;
                                BackUpItem.member_dob = ItemToBackup.member_dob;
                                BackUpItem.member_id = ItemToBackup.member_id;
                                BackUpItem.member_name = ItemToBackup.member_name;
                                BackUpItem.priority = ItemToBackup.priority;
                                BackUpItem.record_date = ItemToBackup.record_date;
                                BackUpItem.referral_number = ItemToBackup.referral_number;
                                BackUpItem.referral_status = ItemToBackup.referral_status;
                                BackUpItem.start_action_date = ItemToBackup.start_action_date;
                                BackUpItem.start_date = ItemToBackup.start_date;
                                BackUpItem.taskoutcome_id = ItemToBackup.taskoutcome_id;
                                BackUpItem.task_id = ItemToBackup.task_id;
                                BackUpItem.task_note = ItemToBackup.task_note;
                                BackUpItem.tpa_id = ItemToBackup.tpa_id;
                                BackUpItem.um_assigned_to_reference_id = ItemToBackup.um_assigned_to_reference_id;
                                BackUpItem.um_assigned_to_task_id = ItemToBackup.um_assigned_to_task_id;
                                BackUpItem.workflow_id = ItemToBackup.workflow_id;

                                db.DbmsMergedUmAssignedToTask.Add(BackUpItem);
                                int BackedUpResults = db.SaveChanges();

                                if (!BackedUp)
                                {
                                    if (BackedUpResults > 0)
                                    {
                                        BackedUp = true;
                                    }
                                }
                            }
                        }
                        else
                        {
                            BackedUp = true;
                        }
                    }
                    else
                    {
                        BackedUp = true;
                    }
                }

                return BackedUp;
            }
            catch (Exception ex)
            {
                return BackedUp;
            }
        }

        private bool BackupUmAssignedToTaskTouchedReferences(Guid IncorrectMemberId)
        {
            bool BackedUp = false;

            try
            {
                List<UmAssignedToTaskTouchedReference> IncorrectItem = new List<UmAssignedToTaskTouchedReference>();

                using (var db = new ICMS2DbContext())
                {
                    IncorrectItem = (from incitems in db.DbmsUmAssignedToTaskTouchedReference
                                     where incitems.member_id == IncorrectMemberId
                                     select incitems).ToList();

                    if (IncorrectItem != null)
                    {
                        if (IncorrectItem.Count > 0)
                        {
                            foreach (UmAssignedToTaskTouchedReference ItemToBackup in IncorrectItem)
                            {
                                MergedUmAssignedToTaskTouchedReference BackUpItem = new MergedUmAssignedToTaskTouchedReference();
                                BackUpItem.created_user_id = ItemToBackup.created_user_id;
                                BackUpItem.creation_date = ItemToBackup.creation_date;
                                BackUpItem.disabled = ItemToBackup.disabled;
                                BackUpItem.last_update_date = ItemToBackup.last_update_date;
                                BackUpItem.last_update_user_id = ItemToBackup.last_update_user_id;
                                BackUpItem.member_id = ItemToBackup.member_id;
                                BackUpItem.previous_touched_date = ItemToBackup.previous_touched_date;
                                BackUpItem.referral_number = ItemToBackup.referral_number;
                                BackUpItem.touched = ItemToBackup.touched;
                                BackUpItem.touched_date = ItemToBackup.touched_date;
                                BackUpItem.um_assigned_to_task_id = ItemToBackup.um_assigned_to_task_id;

                                db.DbmsMergedUmAssignedToTaskTouchedReference.Add(BackUpItem);
                                int BackedUpResults = db.SaveChanges();

                                if (!BackedUp)
                                {
                                    if (BackedUpResults > 0)
                                    {
                                        BackedUp = true;
                                    }
                                }
                            }
                        }
                        else
                        {
                            BackedUp = true;
                        }
                    }
                    else
                    {
                        BackedUp = true;
                    }
                }

                return BackedUp;
            }
            catch (Exception ex)
            {
                return BackedUp;
            }
        }

        private bool BackupUmAutoApprovedDiagnosisTasks(Guid IncorrectMemberId)
        {
            bool BackedUp = false;

            try
            {
                List<UmAutoApprovedDiagnosisTask> IncorrectItem = new List<UmAutoApprovedDiagnosisTask>();

                using (var db = new ICMS2DbContext())
                {
                    IncorrectItem = (from incitems in db.DbmsUmAutoApprovedDiagnosisTask
                                     where incitems.member_id == IncorrectMemberId
                                     select incitems).ToList();

                    if (IncorrectItem != null)
                    {
                        if (IncorrectItem.Count > 0)
                        {
                            foreach (UmAutoApprovedDiagnosisTask ItemToBackup in IncorrectItem)
                            {
                                MergedUmAutoApprovedDiagnosisTask BackUpItem = new MergedUmAutoApprovedDiagnosisTask();
                                BackUpItem.actual_end_action_date = ItemToBackup.actual_end_action_date;
                                BackUpItem.actual_start_action_date = ItemToBackup.actual_start_action_date;
                                BackUpItem.assigned_to_system_user_id = ItemToBackup.assigned_to_system_user_id;
                                BackUpItem.completed = ItemToBackup.completed;
                                BackUpItem.completed_by_system_user_id = ItemToBackup.completed_by_system_user_id;
                                BackUpItem.completed_date = ItemToBackup.completed_date;
                                BackUpItem.date_entered = ItemToBackup.date_entered;
                                BackUpItem.date_verified = ItemToBackup.date_verified;
                                BackUpItem.diagnosis_code = ItemToBackup.diagnosis_code;
                                BackUpItem.disabled = ItemToBackup.disabled;
                                BackUpItem.employer_id = ItemToBackup.employer_id;
                                BackUpItem.end_action_date = ItemToBackup.end_action_date;
                                BackUpItem.end_date = ItemToBackup.end_date;
                                BackUpItem.entered_by_system_user_id = ItemToBackup.entered_by_system_user_id;
                                BackUpItem.member_dob = ItemToBackup.member_dob;
                                BackUpItem.member_id = ItemToBackup.member_id;
                                BackUpItem.member_name = ItemToBackup.member_name;
                                BackUpItem.record_date = ItemToBackup.record_date;
                                BackUpItem.referral_number = ItemToBackup.referral_number;
                                BackUpItem.start_action_date = ItemToBackup.start_action_date;
                                BackUpItem.start_date = ItemToBackup.start_date;
                                BackUpItem.taskoutcome_id = ItemToBackup.taskoutcome_id;
                                BackUpItem.task_id = ItemToBackup.task_id;
                                BackUpItem.task_note = ItemToBackup.task_note;
                                BackUpItem.tpa_id = ItemToBackup.tpa_id;
                                BackUpItem.um_auto_approved_diagnosis_task_id = ItemToBackup.um_auto_approved_diagnosis_task_id;
                                BackUpItem.user_verified = ItemToBackup.user_verified;

                                db.DbmsMergedUmAutoApprovedDiagnosisTask.Add(BackUpItem);
                                int BackedUpResults = db.SaveChanges();

                                if (!BackedUp)
                                {
                                    if (BackedUpResults > 0)
                                    {
                                        BackedUp = true;
                                    }
                                }
                            }
                        }
                        else
                        {
                            BackedUp = true;
                        }
                    }
                    else
                    {
                        BackedUp = true;
                    }
                }

                return BackedUp;
            }
            catch (Exception ex)
            {
                return BackedUp;
            }
        }

        private bool BackupUtilizationReviewNoteTasks(Guid IncorrectMemberId)
        {
            bool BackedUp = false;

            try
            {
                List<UtilizationReviewNoteTask> IncorrectItem = new List<UtilizationReviewNoteTask>();

                using (var db = new ICMS2DbContext())
                {
                    IncorrectItem = (from incitems in db.DbmsUtilizationReviewNoteTask
                                     where incitems.member_id == IncorrectMemberId
                                     select incitems).ToList();

                    if (IncorrectItem != null)
                    {
                        if (IncorrectItem.Count > 0)
                        {
                            foreach (UtilizationReviewNoteTask ItemToBackup in IncorrectItem)
                            {
                                MergedUtilizationReviewNoteTask BackUpItem = new MergedUtilizationReviewNoteTask();
                                BackUpItem.actual_end_action_date = ItemToBackup.actual_end_action_date;
                                BackUpItem.actual_start_action_date = ItemToBackup.actual_start_action_date;
                                BackUpItem.assigned_to_system_user_id = ItemToBackup.assigned_to_system_user_id;
                                BackUpItem.auth_end_date = ItemToBackup.auth_end_date;
                                BackUpItem.auth_start_date = ItemToBackup.auth_start_date;
                                BackUpItem.completed = ItemToBackup.completed;
                                BackUpItem.completed_by_system_user_id = ItemToBackup.completed_by_system_user_id;
                                BackUpItem.completed_date = ItemToBackup.completed_date;
                                BackUpItem.date_entered = ItemToBackup.date_entered;
                                BackUpItem.date_verified = ItemToBackup.date_verified;
                                BackUpItem.disabled = ItemToBackup.disabled;
                                BackUpItem.employer_id = ItemToBackup.employer_id;
                                BackUpItem.end_action_date = ItemToBackup.end_action_date;
                                BackUpItem.entered_by_system_user_id = ItemToBackup.entered_by_system_user_id;
                                BackUpItem.line_number = ItemToBackup.line_number;
                                BackUpItem.member_id = ItemToBackup.member_id;
                                BackUpItem.member_name = ItemToBackup.member_name;
                                BackUpItem.record_date = ItemToBackup.record_date;
                                BackUpItem.referral_number = ItemToBackup.referral_number;
                                BackUpItem.start_action_date = ItemToBackup.start_action_date;
                                BackUpItem.taskoutcome_id = ItemToBackup.taskoutcome_id;
                                BackUpItem.task_id = ItemToBackup.task_id;
                                BackUpItem.task_note = ItemToBackup.task_note;
                                BackUpItem.tpa_id = ItemToBackup.tpa_id;
                                BackUpItem.user_verified = ItemToBackup.user_verified;
                                BackUpItem.utilization_review_note_task_id = ItemToBackup.utilization_review_note_task_id;

                                db.DbmsMergedUtilizationReviewNoteTask.Add(BackUpItem);
                                int BackedUpResults = db.SaveChanges();

                                if (!BackedUp)
                                {
                                    if (BackedUpResults > 0)
                                    {
                                        BackedUp = true;
                                    }
                                }
                            }
                        }
                        else
                        {
                            BackedUp = true;
                        }
                    }
                    else
                    {
                        BackedUp = true;
                    }
                }

                return BackedUp;
            }
            catch (Exception ex)
            {
                return BackedUp;
            }
        }

        private bool BackupWcBillingWorktables(Guid IncorrectMemberId)
        {
            bool BackedUp = false;

            try
            {
                List<WcBillingWorktable> IncorrectItem = new List<WcBillingWorktable>();

                using (var db = new IcmsDataStagingDbContext())
                {
                    IncorrectItem = (from incitems in db.DbmsWcBillingWorktable
                                     where incitems.member_id == IncorrectMemberId
                                     select incitems).ToList();

                    if (IncorrectItem != null)
                    {
                        if (IncorrectItem.Count > 0)
                        {
                            foreach (WcBillingWorktable ItemToBackup in IncorrectItem)
                            {
                                MergedWcBillingWorktable BackUpItem = new MergedWcBillingWorktable();
                                BackUpItem.auth_start_date = ItemToBackup.auth_start_date;
                                BackUpItem.comments = ItemToBackup.comments;
                                BackUpItem.creation_date = ItemToBackup.creation_date;
                                BackUpItem.date_updated = ItemToBackup.date_updated;
                                BackUpItem.disable_flag = ItemToBackup.disable_flag;
                                BackUpItem.employer_name = ItemToBackup.employer_name;
                                BackUpItem.invoice_id = ItemToBackup.invoice_id;
                                BackUpItem.member_dob = ItemToBackup.member_dob;
                                BackUpItem.member_first_name = ItemToBackup.member_first_name;
                                BackUpItem.member_id = ItemToBackup.member_id;
                                BackUpItem.member_last_name = ItemToBackup.member_last_name;
                                BackUpItem.member_name = ItemToBackup.member_name;
                                BackUpItem.member_ssn = ItemToBackup.member_ssn;
                                BackUpItem.notes = ItemToBackup.notes;
                                BackUpItem.note_entered_by = ItemToBackup.note_entered_by;
                                BackUpItem.print_wc = ItemToBackup.print_wc;
                                BackUpItem.record_date = ItemToBackup.record_date;
                                BackUpItem.referral_number = ItemToBackup.referral_number;
                                BackUpItem.referral_type = ItemToBackup.referral_type;
                                BackUpItem.search_end_date = ItemToBackup.search_end_date;
                                BackUpItem.search_start_date = ItemToBackup.search_start_date;
                                BackUpItem.time_code = ItemToBackup.time_code;
                                BackUpItem.time_length = ItemToBackup.time_length;
                                BackUpItem.tpa_name = ItemToBackup.tpa_name;
                                BackUpItem.user_created = ItemToBackup.user_created;
                                BackUpItem.user_updated = ItemToBackup.user_updated;
                                BackUpItem.wc_rate = ItemToBackup.wc_rate;
                                BackUpItem.wc_record_id = ItemToBackup.wc_record_id;

                                db.DbmsMergedWcBillingWorktable.Add(BackUpItem);
                                int BackedUpResults = db.SaveChanges();

                                if (!BackedUp)
                                {
                                    if (BackedUpResults > 0)
                                    {
                                        BackedUp = true;
                                    }
                                }
                            }
                        }
                        else
                        {
                            BackedUp = true;
                        }
                    }
                    else
                    {
                        BackedUp = true;
                    }
                }

                return BackedUp;
            }
            catch (Exception ex)
            {
                return BackedUp;
            }
        }

        private bool BackupWebClientNoteTasks(Guid IncorrectMemberId)
        {
            bool BackedUp = false;

            try
            {
                List<WebClientNoteTask> IncorrectItem = new List<WebClientNoteTask>();

                using (var db = new ICMS2DbContext())
                {
                    IncorrectItem = (from incitems in db.DbmsWebClientNoteTask
                                     where incitems.member_id == IncorrectMemberId
                                     select incitems).ToList();

                    if (IncorrectItem != null)
                    {
                        if (IncorrectItem.Count > 0)
                        {
                            foreach (WebClientNoteTask ItemToBackup in IncorrectItem)
                            {
                                MergedWebClientNoteTask BackUpItem = new MergedWebClientNoteTask();
                                BackUpItem.actual_end_action_date = ItemToBackup.actual_end_action_date;
                                BackUpItem.actual_start_action_date = ItemToBackup.actual_start_action_date;
                                BackUpItem.assigned_to_system_user_id = ItemToBackup.assigned_to_system_user_id;
                                BackUpItem.completed = ItemToBackup.completed;
                                BackUpItem.completed_by_system_user_id = ItemToBackup.completed_by_system_user_id;
                                BackUpItem.completed_date = ItemToBackup.completed_date;
                                BackUpItem.date_entered = ItemToBackup.date_entered;
                                BackUpItem.date_verified = ItemToBackup.date_verified;
                                BackUpItem.disabled = ItemToBackup.disabled;
                                BackUpItem.end_action_date = ItemToBackup.end_action_date;
                                BackUpItem.entered_by_system_user_id = ItemToBackup.entered_by_system_user_id;
                                BackUpItem.member_id = ItemToBackup.member_id;
                                BackUpItem.record_date = ItemToBackup.record_date;
                                BackUpItem.start_action_date = ItemToBackup.start_action_date;
                                BackUpItem.taskoutcome_id = ItemToBackup.taskoutcome_id;
                                BackUpItem.task_id = ItemToBackup.task_id;
                                BackUpItem.task_note = ItemToBackup.task_note;
                                BackUpItem.user_verified = ItemToBackup.user_verified;
                                BackUpItem.web_client_note_id = ItemToBackup.web_client_note_id;

                                db.DbmsMergedWebClientNoteTask.Add(BackUpItem);
                                int BackedUpResults = db.SaveChanges();

                                if (!BackedUp)
                                {
                                    if (BackedUpResults > 0)
                                    {
                                        BackedUp = true;
                                    }
                                }
                            }
                        }
                        else
                        {
                            BackedUp = true;
                        }
                    }
                    else
                    {
                        BackedUp = true;
                    }
                }

                return BackedUp;
            }
            catch (Exception ex)
            {
                return BackedUp;
            }
        }

        private bool BackupWebOnlinePrecertTasks(Guid IncorrectMemberId)
        {
            bool BackedUp = false;

            try
            {
                List<WebOnlinePrecertTask> IncorrectItem = new List<WebOnlinePrecertTask>();

                using (var db = new ICMS2DbContext())
                {
                    IncorrectItem = (from incitems in db.DbmsWebOnlinePrecertTask
                                     where incitems.member_id == IncorrectMemberId
                                     select incitems).ToList();

                    if (IncorrectItem != null)
                    {
                        if (IncorrectItem.Count > 0)
                        {
                            foreach (WebOnlinePrecertTask ItemToBackup in IncorrectItem)
                            {
                                MergedWebOnlinePrecertTask BackUpItem = new MergedWebOnlinePrecertTask();
                                BackUpItem.actual_end_action_date = ItemToBackup.actual_end_action_date;
                                BackUpItem.actual_start_action_date = ItemToBackup.actual_start_action_date;
                                BackUpItem.assigned_to_system_user_id = ItemToBackup.assigned_to_system_user_id;
                                BackUpItem.completed = ItemToBackup.completed;
                                BackUpItem.completed_by_system_user_id = ItemToBackup.completed_by_system_user_id;
                                BackUpItem.completed_date = ItemToBackup.completed_date;
                                BackUpItem.date_entered = ItemToBackup.date_entered;
                                BackUpItem.date_verified = ItemToBackup.date_verified;
                                BackUpItem.disabled = ItemToBackup.disabled;
                                BackUpItem.end_action_date = ItemToBackup.end_action_date;
                                BackUpItem.entered_by_system_user_id = ItemToBackup.entered_by_system_user_id;
                                BackUpItem.member_id = ItemToBackup.member_id;
                                BackUpItem.record_date = ItemToBackup.record_date;
                                BackUpItem.referral_number = ItemToBackup.referral_number;
                                BackUpItem.start_action_date = ItemToBackup.start_action_date;
                                BackUpItem.taskoutcome_id = ItemToBackup.taskoutcome_id;
                                BackUpItem.task_id = ItemToBackup.task_id;
                                BackUpItem.task_note = ItemToBackup.task_note;
                                BackUpItem.user_verified = ItemToBackup.user_verified;
                                BackUpItem.web_online_precert_id = ItemToBackup.web_online_precert_id;

                                db.DbmsMergedWebOnlinePrecertTask.Add(BackUpItem);
                                int BackedUpResults = db.SaveChanges();

                                if (!BackedUp)
                                {
                                    if (BackedUpResults > 0)
                                    {
                                        BackedUp = true;
                                    }
                                }
                            }
                        }
                        else
                        {
                            BackedUp = true;
                        }
                    }
                    else
                    {
                        BackedUp = true;
                    }
                }

                return BackedUp;
            }
            catch (Exception ex)
            {
                return BackedUp;
            }
        }








        private bool MergeIncorrectMember(Guid CorrectMemberId, Guid IncorrectMemberId, Guid MergingUserId)
        {
            bool Merged = false;

            try
            {
                bool ReferralCodesMerged = MergeReferralCodes(CorrectMemberId, IncorrectMemberId);
                bool ReferralInterQualMerged = MergeReferralInterQualData(CorrectMemberId, IncorrectMemberId);
                bool ReferralLettersMerged = MergeReferralLetters(CorrectMemberId, IncorrectMemberId);
                bool ReferralsMerged = MergeReferrals(CorrectMemberId, IncorrectMemberId);
                bool ReferralMissingReferToMerged = MergeReferralMissingReferTo(CorrectMemberId, IncorrectMemberId);
                bool ReferralWorkflowsMerged = MergeReferralWorkflow(CorrectMemberId, IncorrectMemberId);

                bool MemberAddressDmAlternatesMerged = MergeMemberAddressDmAlternate(CorrectMemberId, IncorrectMemberId);
                bool MemberAddressesMerged = MergeMemberAddresses(CorrectMemberId, IncorrectMemberId);
                bool MemberCareCoordinationCallSavingsMerged = MergeMemberCareCoordinationCallSavingsSavings(CorrectMemberId, IncorrectMemberId);
                bool MemberClaimDiagnosisMerged = MergeMemberClaimDiagnosis(CorrectMemberId, IncorrectMemberId);
                bool MemberConditionAcuitiesMerged = MergeMemberConditionAcuities(CorrectMemberId, IncorrectMemberId);
                bool MemberCustomerServiceAlertsMerged = MergeMemberCustomerServiceAlerts(CorrectMemberId, IncorrectMemberId);
                bool MemberFaxesMerged = MergeMemberFaxes(CorrectMemberId, IncorrectMemberId);
                bool MemberHealthPlanReferencesMerged = MergeMemberHealthPlanReferences(CorrectMemberId, IncorrectMemberId);
                bool MemberLabsMerged = MergeMemberLabs(CorrectMemberId, IncorrectMemberId);
                bool MemberLcmFollowupNotesMerged = MergeMemberLcmFollowupNotes(CorrectMemberId, IncorrectMemberId);
                bool MemberMdReviewReferencesMerged = MergeMemberMdReviewReference(CorrectMemberId, IncorrectMemberId);
                bool MemberMedAllergiesMerged = MergeMemberMedAllergies(CorrectMemberId, IncorrectMemberId);
                bool MemberMedsMerged = MergeMemberMeds(CorrectMemberId, IncorrectMemberId);
                bool MemberMedsHighDollarTasksMerged = MergeMemberMedsHighDollarTasks(CorrectMemberId, IncorrectMemberId);
                bool MemberMedsHistoriesMerged = MergeMemberMedsHistories(CorrectMemberId, IncorrectMemberId);
                bool MemberMedsPharmacyFeedsMerged = MergeMemberMedsPharmacyFeeds(CorrectMemberId, IncorrectMemberId);
                bool MemberNoteAttachmentMerged = MergeMemberNoteAttachments(CorrectMemberId, IncorrectMemberId);
                bool MemberNotesMerged = MergeMemberNotes(CorrectMemberId, IncorrectMemberId);
                bool MemberNotesSummariesMerged = MergeMemberNotesSummaries(CorrectMemberId, IncorrectMemberId);
                bool MemberPcpsMerged = MergeMemberPcps(CorrectMemberId, IncorrectMemberId);
                bool MemberPhonesMerged = MergMemberPhones(CorrectMemberId, IncorrectMemberId);
                bool MemberPicturesMerged = MergeMemberPictures(CorrectMemberId, IncorrectMemberId);
                bool MemberProfilePicturesMerged = MergeMemberProfilePictures(CorrectMemberId, IncorrectMemberId);
                bool MemberProgramsMerged = MergeMemberPrograms(CorrectMemberId, IncorrectMemberId);
                bool MemberQualityCareNotesMerged = MergeMemberQualityCareNotes(CorrectMemberId, IncorrectMemberId);
                bool MemberReferralMedicinesMerged = MergeMemberReferralMedicines(CorrectMemberId, IncorrectMemberId);
                bool MemberReferralQocsMerged = MergeMemberReferralQocs(CorrectMemberId, IncorrectMemberId);
                bool MemberReferralUpdatesWorkflowsMerged = MergeMemberReferralUpdatesWorkflow(CorrectMemberId, IncorrectMemberId);
                bool MemberRelativeDiseaseHistoriesMerged = MergeMemberRelativeDiseaseHistories(CorrectMemberId, IncorrectMemberId);
                bool MemberRenalTasksMerged = MergeMemberRenalTasks(CorrectMemberId, IncorrectMemberId);
                bool MemberReturnedLettersMerged = MergeMemberReturnedLetters(CorrectMemberId, IncorrectMemberId);
                bool MemberSignatureFilesMerged = MergeMemberSignatureFiles(CorrectMemberId, IncorrectMemberId);
                bool MemberStratLevelMerged = MergeMemberStratLevel(CorrectMemberId, IncorrectMemberId);
                bool MemberTasksMerged = MergeMemberTasks(CorrectMemberId, IncorrectMemberId);
                bool MemberToolProgramStatusesMerged = MergeMemberToolProgramStaus(CorrectMemberId, IncorrectMemberId);
                bool MemberUpdateReferencesMerged = MergeMemberUpdateReferences(CorrectMemberId, IncorrectMemberId);
                bool MemberVitalsMerged = MergeMemberVitals(CorrectMemberId, IncorrectMemberId);

                bool UtilizationDayNotesToMerge = MergeUtilizationDayNotes(CorrectMemberId, IncorrectMemberId);
                bool UtilizationDaysMerged = MergeUtilizationDays(CorrectMemberId, IncorrectMemberId);
                bool UtilizationDischargeNotesMerged = MergeUtilizationDischargeNotes(CorrectMemberId, IncorrectMemberId);
                bool UtilizationReviewsMerged = MergeUtilizationReviews(CorrectMemberId, IncorrectMemberId);
                bool UtilizationSavingsMerged = MergeUtilizationSavings(CorrectMemberId, IncorrectMemberId);

                bool AccountsReceivablePaymentsMerged = MergeAcountsReceivablePayments(CorrectMemberId, IncorrectMemberId);
                bool AdmissionCareplanCountsMerged = MergeAdmissionCareplanCounts(CorrectMemberId, IncorrectMemberId);
                bool AdmissionsMerged = MergeAdmissions(CorrectMemberId, IncorrectMemberId);
                bool AuthorizationUpdatesMerged = MergeAuthorizationUpdates(CorrectMemberId, IncorrectMemberId);
                bool BillingUpdateHistoryLogsMerged = MergeBillingUpdateHistoryLog(CorrectMemberId, IncorrectMemberId);
                bool BillingBackupsMerged = MergeBillingBackups(CorrectMemberId, IncorrectMemberId);
                bool CareCoordinationCallsMerged = MergeMemberCareCoordinationCalls(CorrectMemberId, IncorrectMemberId);
                bool CarePlanNotesAttachmentsMerged = MergeCarePlanNotesAttachments(CorrectMemberId, IncorrectMemberId);
                bool CaseOwnersMerged = MergeCaseOwners(CorrectMemberId, IncorrectMemberId);
                bool ClinicalRequestHistoriesMerged = MergeClinicalRequestHistories(CorrectMemberId, IncorrectMemberId);
                bool ClinicalRequestProvidersMerged = MergeClinicalRequestProviders(CorrectMemberId, IncorrectMemberId);
                bool CrBillingWorktablesMerged = MergeCrBillingWorktables(CorrectMemberId, IncorrectMemberId);
                bool CmMemberNotesMerged = MergeCmMemberNotes(CorrectMemberId, IncorrectMemberId);
                bool ClinicalReviewBillsMerged = MergeClinicalReviewBills(CorrectMemberId, IncorrectMemberId);
                bool CodeRemovalItemsMerged = MergeCodeRemovalItems(CorrectMemberId, IncorrectMemberId);
                bool DentalVisitsMerged = MergeDentalVisits(CorrectMemberId, IncorrectMemberId);
                bool DepartmentBedVacanciesMerged = MergeDepartmentBedVacancies(CorrectMemberId, IncorrectMemberId);
                bool DependentMemberUpdateReferencesMerged = MergeDependentMemberUpdateReferences(CorrectMemberId, IncorrectMemberId);
                bool DiseaseManagementNotesAttachmentsMerged = MergeDiseaseManagementNotesAttachments(CorrectMemberId, IncorrectMemberId);
                bool DmMemberSavingsMerged = MergeDmMemberSavings(CorrectMemberId, IncorrectMemberId);
                bool EmailsOutboundsMerged = MergeEmailOutbounds(CorrectMemberId, IncorrectMemberId);
                bool EpisodesOfCareMerged = MergeEpisodesOfCares(CorrectMemberId, IncorrectMemberId);
                bool InboundFaxReferralRemovalsMerged = MergeInboundFaxReferralRemovals(CorrectMemberId, IncorrectMemberId);
                bool InboundVoicemailsMerged = MergeInboundVoicemails(CorrectMemberId, IncorrectMemberId);
                bool LcmBillingWorktablesMerged = MergeLcmBillingWorktables(CorrectMemberId, IncorrectMemberId);
                bool LcmInfoMerged = MergeLcmInfo(CorrectMemberId, IncorrectMemberId);
                bool LcmReportNeededForBillingTasksMerged = MergeLcmReportNeededForBillingTasks(CorrectMemberId, IncorrectMemberId);
                bool LcmReportQaNotesMerged = MergeLcmReportQaNotes(CorrectMemberId, IncorrectMemberId);
                bool LcmReportQaTasksMerged = MergeLcmReportQaTasks(CorrectMemberId, IncorrectMemberId);
                bool LcmReportQaNotesTaskReferencesMerged = MergeLcmReportQaNotesTaskReferences(CorrectMemberId, IncorrectMemberId);
                bool LcnReportFaxesMerged = MergeLcnReportFaxes(CorrectMemberId, IncorrectMemberId);
                bool LetterReportFaxesMerged = MergeLetterReportFaxes(CorrectMemberId, IncorrectMemberId);
                bool MdReviewDeterminationsMerged = MergeMdReviewDeterminations(CorrectMemberId, IncorrectMemberId);
                bool MdReviewFollowupsMerged = MergeMdReviewFollowups(CorrectMemberId, IncorrectMemberId);
                bool MdReviewQuestionsMerged = MergeMdReviewQuestions(CorrectMemberId, IncorrectMemberId);
                bool MdReviewRequestsMerged = MergeMdReviewRequests(CorrectMemberId, IncorrectMemberId);
                bool MonthlyLcmManagementQasMerged = MergeMonthlyLcmManagementQas(CorrectMemberId, IncorrectMemberId);
                bool MonthlyUtilizationManagementsMerged = MergeMonthlyUtilizationManagements(CorrectMemberId, IncorrectMemberId);
                bool StdBillingWorktablesMerged = MergeStdBillingWorktables(CorrectMemberId, IncorrectMemberId);
                bool SuspendCaseToTaskReferencesMerged = MergeSuspendCaseToTaskReferences(CorrectMemberId, IncorrectMemberId);
                bool SuspendedNotesMerged = MergeSuspendedNotes(CorrectMemberId, IncorrectMemberId);
                bool SuspendedNotesOverrideMerged = MergeSuspendedNotesOverrides(CorrectMemberId, IncorrectMemberId);
                bool TelephoneNotesAttachmentsMerged = MergeTelephoneNotesAttachments(CorrectMemberId, IncorrectMemberId);
                bool TransitionalCareReferencesMerged = MergeTransitionalCareReferences(CorrectMemberId, IncorrectMemberId);
                bool UmAssignedToTasksMerged = MergeUmAssignedToTasks(CorrectMemberId, IncorrectMemberId);
                bool UmAssignedToTaskTouchedReferencesMerged = MergeUmAssignedToTaskTouchedReferences(CorrectMemberId, IncorrectMemberId);
                bool UmAutoApprovedDiagnosisTasksMerged = MergeUmAutoApprovedDiagnosisTasks(CorrectMemberId, IncorrectMemberId);
                bool UtilizationReviewNoteTasksMerged = MergeUtilizationReviewNoteTasks(CorrectMemberId, IncorrectMemberId);
                bool WcBillingWorktablesMerged = MergeWcBillingWorktables(CorrectMemberId, IncorrectMemberId);
                bool WebClientNoteTasksMerged = MergeWebClientNoteTasks(CorrectMemberId, IncorrectMemberId);
                bool WebOnlinePrecertTasksMerged = MergeWebOnlinePrecertTasks(CorrectMemberId, IncorrectMemberId);


                if (ReferralsMerged && ReferralCodesMerged && ReferralWorkflowsMerged && ReferralInterQualMerged &&
                    ReferralLettersMerged && MemberFaxesMerged && UtilizationDaysMerged && MemberNoteAttachmentMerged &&
                    LcmInfoMerged && MemberMdReviewReferencesMerged && MemberAddressDmAlternatesMerged &&
                    MemberMedAllergiesMerged && MemberQualityCareNotesMerged && ReferralMissingReferToMerged &&
                    UtilizationSavingsMerged && UtilizationReviewsMerged && MemberNotesMerged &&
                    UtilizationDayNotesToMerge && MemberAddressesMerged && MemberPhonesMerged && MemberVitalsMerged &&
                    MemberLabsMerged && AdmissionsMerged && MemberToolProgramStatusesMerged && MemberStratLevelMerged &&
                    MemberTasksMerged && MemberHealthPlanReferencesMerged && MemberCustomerServiceAlertsMerged &&
                    CaseOwnersMerged && ClinicalReviewBillsMerged && EmailsOutboundsMerged && EpisodesOfCareMerged &&
                    LcmReportNeededForBillingTasksMerged && LcmReportQaNotesTaskReferencesMerged && LcmReportQaTasksMerged &&
                    LcnReportFaxesMerged && MdReviewDeterminationsMerged && MdReviewRequestsMerged && MemberMedsPharmacyFeedsMerged &&
                    MemberPcpsMerged && MemberNotesSummariesMerged && AccountsReceivablePaymentsMerged && BillingUpdateHistoryLogsMerged &&
                    CarePlanNotesAttachmentsMerged && ClinicalRequestHistoriesMerged && ClinicalRequestProvidersMerged &&
                    CmMemberNotesMerged && CodeRemovalItemsMerged && DependentMemberUpdateReferencesMerged &&
                    DiseaseManagementNotesAttachmentsMerged && DmMemberSavingsMerged && LcmReportQaNotesMerged &&
                    LetterReportFaxesMerged && MdReviewFollowupsMerged && MdReviewQuestionsMerged && CareCoordinationCallsMerged &&
                    MemberCareCoordinationCallSavingsMerged && MemberClaimDiagnosisMerged && MemberConditionAcuitiesMerged &&
                    MemberLcmFollowupNotesMerged && MemberMedsMerged && MemberMedsHighDollarTasksMerged && MemberMedsHistoriesMerged &&
                    MemberPicturesMerged && MemberProfilePicturesMerged && MemberProgramsMerged && MemberRelativeDiseaseHistoriesMerged &&
                    MemberRenalTasksMerged && MemberReturnedLettersMerged && MemberSignatureFilesMerged && MemberUpdateReferencesMerged &&
                    MonthlyLcmManagementQasMerged && MonthlyUtilizationManagementsMerged && AdmissionCareplanCountsMerged &&
                    AuthorizationUpdatesMerged && DentalVisitsMerged && DepartmentBedVacanciesMerged &&
                    InboundFaxReferralRemovalsMerged && InboundVoicemailsMerged && MemberReferralMedicinesMerged &&
                    MemberReferralQocsMerged && MemberReferralUpdatesWorkflowsMerged && UtilizationDischargeNotesMerged &&
                    SuspendCaseToTaskReferencesMerged && SuspendedNotesMerged && SuspendedNotesOverrideMerged &&
                    TelephoneNotesAttachmentsMerged && TransitionalCareReferencesMerged && UmAssignedToTasksMerged &&
                    UmAssignedToTaskTouchedReferencesMerged && UmAutoApprovedDiagnosisTasksMerged && UtilizationReviewNoteTasksMerged &&
                    WebClientNoteTasksMerged && WebOnlinePrecertTasksMerged && BillingBackupsMerged && CrBillingWorktablesMerged &&
                    LcmBillingWorktablesMerged && StdBillingWorktablesMerged && WcBillingWorktablesMerged)
                {
                    if (AddMergedMemberReference(CorrectMemberId, IncorrectMemberId, MergingUserId))
                    {
                        if (RemoveIncorrectMemberEnrollment(IncorrectMemberId))
                        {
                            if (RemoveIncorrectMember(IncorrectMemberId))
                            {
                                Merged = true;
                            }
                            else
                            {

                            }
                        }
                        else
                        {

                        }
                    }
                    else
                    {

                    }
                }

                return Merged;
            }
            catch(Exception ex)
            {
                return Merged;
            }
        }



        private bool MergeReferrals(Guid CorrectMemberId, Guid IncorrectMember)
        {
            bool Merged = false;

            try
            {
                Guid IncorrectId = IncorrectMember;
                List<rMemberReferral> IncorrectReferrals = new List<rMemberReferral>();

                using (var db = new ICMS2DbContext())
                {
                    IncorrectReferrals = (from incmemrefs in db.DbmsMemberReferrals
                                          where incmemrefs.member_id == IncorrectId
                                          select incmemrefs).ToList();

                    if (IncorrectReferrals != null)
                    {
                        if (IncorrectReferrals.Count > 0)
                        {
                            foreach(rMemberReferral ReferralToMerge in IncorrectReferrals)
                            {
                                rMemberReferral AddItem = new rMemberReferral();

                                if (SetCorrectReferrals(CorrectMemberId, ref AddItem, ReferralToMerge))
                                {
                                    rMemberReferral DeleteItem = ReferralToMerge;

                                    db.DbmsMemberReferrals.Attach(ReferralToMerge);
                                    db.DbmsMemberReferrals.Remove(ReferralToMerge);

                                    int IncorrectItemDeleted = db.SaveChanges();

                                    if (IncorrectItemDeleted > 0)
                                    {
                                        db.DbmsMemberReferrals.Add(AddItem);
                                        int CorrectItemAdded = db.SaveChanges();

                                        if (!Merged)
                                        {
                                            if (CorrectItemAdded > 0)
                                            {
                                                Merged = true;
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        else
                        {
                            Merged = true;
                        }
                    }
                    else
                    {
                        Merged = true;
                    }
                }

                return Merged;

            }
            catch(Exception ex)
            {
                return Merged;
            }
        }

        private bool SetCorrectReferrals(Guid CorrectMemberId, ref rMemberReferral CorrectReferral, rMemberReferral IncorrectReferral)
        {
            bool ItemSet = false;

            try
            {
                if (CorrectMemberId != null)
                {
                    if (!CorrectMemberId.Equals(Guid.Empty))
                    {
                        CorrectReferral.member_id = CorrectMemberId;

                        CorrectReferral.auth_end_date = IncorrectReferral.auth_end_date;
                        CorrectReferral.auth_number = IncorrectReferral.auth_number;
                        CorrectReferral.auth_provider_type = IncorrectReferral.auth_provider_type;
                        CorrectReferral.auth_service_category_type = IncorrectReferral.auth_service_category_type;
                        CorrectReferral.auth_start_date = IncorrectReferral.auth_start_date;
                        CorrectReferral.auto_status_verified = IncorrectReferral.auto_status_verified;
                        CorrectReferral.bed_days_admit_date = IncorrectReferral.bed_days_admit_date;
                        CorrectReferral.bed_days_discharge_date = IncorrectReferral.bed_days_discharge_date;
                        CorrectReferral.bed_days_guideline_days = IncorrectReferral.bed_days_guideline_days;
                        CorrectReferral.claim_number = IncorrectReferral.claim_number;
                        CorrectReferral.context_id = IncorrectReferral.context_id;
                        CorrectReferral.cpt_preservice_nonurgent = IncorrectReferral.cpt_preservice_nonurgent;
                        CorrectReferral.cpt_preservice_nonurgent_date = IncorrectReferral.cpt_preservice_nonurgent_date;
                        CorrectReferral.cpt_preservice_nonurgent_user_id = IncorrectReferral.cpt_preservice_nonurgent_user_id;
                        CorrectReferral.cpt_preservice_urgent = IncorrectReferral.cpt_preservice_urgent;
                        CorrectReferral.cpt_preservice_urgent_date = IncorrectReferral.cpt_preservice_urgent_date;
                        CorrectReferral.cpt_preservice_urgent_user_id = IncorrectReferral.cpt_preservice_urgent_user_id;
                        CorrectReferral.created_date = IncorrectReferral.created_date;
                        CorrectReferral.created_user_id = IncorrectReferral.created_user_id;
                        CorrectReferral.decision_id = IncorrectReferral.decision_id;
                        CorrectReferral.discharged = IncorrectReferral.discharged;
                        CorrectReferral.discharge_assessment_creation_date = IncorrectReferral.discharge_assessment_creation_date;
                        CorrectReferral.discharge_assessment_creation_user_id = IncorrectReferral.discharge_assessment_creation_user_id;
                        CorrectReferral.discharge_department_id = IncorrectReferral.discharge_department_id;
                        CorrectReferral.discharge_facility_type = IncorrectReferral.discharge_facility_type;
                        CorrectReferral.discharge_plan_required = IncorrectReferral.discharge_plan_required;
                        CorrectReferral.discharge_updated_date = IncorrectReferral.discharge_updated_date;
                        CorrectReferral.discharge_updated_user_id = IncorrectReferral.discharge_updated_user_id;
                        CorrectReferral.external_pacca = IncorrectReferral.external_pacca;
                        CorrectReferral.external_review_overturned = IncorrectReferral.external_review_overturned;
                        CorrectReferral.external_review_upheld = IncorrectReferral.external_review_upheld;
                        CorrectReferral.facility_address_id = IncorrectReferral.facility_address_id;
                        CorrectReferral.facility_by_address_id = IncorrectReferral.facility_by_address_id;
                        CorrectReferral.facility_in_network = IncorrectReferral.facility_in_network;
                        CorrectReferral.forced_authorization_type = IncorrectReferral.forced_authorization_type;
                        CorrectReferral.force_authorization_type = IncorrectReferral.force_authorization_type;
                        CorrectReferral.ibnr_pay_until_date = IncorrectReferral.ibnr_pay_until_date;
                        CorrectReferral.info_received_date = IncorrectReferral.info_received_date;
                        CorrectReferral.info_requested_date = IncorrectReferral.info_requested_date;
                        CorrectReferral.last_update_date = IncorrectReferral.last_update_date;
                        CorrectReferral.last_update_user_id = IncorrectReferral.last_update_user_id;
                        CorrectReferral.level_1 = IncorrectReferral.level_1;
                        CorrectReferral.level_1_overturned = IncorrectReferral.level_1_overturned;
                        CorrectReferral.level_1_upheld = IncorrectReferral.level_1_upheld;
                        CorrectReferral.level_2 = IncorrectReferral.level_2;
                        CorrectReferral.level_2_overturned = IncorrectReferral.level_2_overturned;
                        CorrectReferral.level_2_upheld = IncorrectReferral.level_2_upheld;
                        CorrectReferral.no_cpt_needed = IncorrectReferral.no_cpt_needed;
                        CorrectReferral.no_cpt_needed_update_date = IncorrectReferral.no_cpt_needed_update_date;
                        CorrectReferral.no_cpt_needed_user_id = IncorrectReferral.no_cpt_needed_user_id;
                        CorrectReferral.po_number = IncorrectReferral.po_number;
                        CorrectReferral.priority_id = IncorrectReferral.priority_id;
                        CorrectReferral.reason_id = IncorrectReferral.reason_id;
                        CorrectReferral.received_date = IncorrectReferral.received_date;
                        CorrectReferral.reconsideration = IncorrectReferral.reconsideration;
                        CorrectReferral.referral_case_owner = IncorrectReferral.referral_case_owner;
                        CorrectReferral.referral_category = IncorrectReferral.referral_category;
                        CorrectReferral.referral_lock_date = IncorrectReferral.referral_lock_date;
                        CorrectReferral.referral_lock_system_user_id = IncorrectReferral.referral_lock_system_user_id;
                        CorrectReferral.referral_number = IncorrectReferral.referral_number;
                        CorrectReferral.referral_qa = IncorrectReferral.referral_qa;
                        CorrectReferral.referral_qa_user_id = IncorrectReferral.referral_qa_user_id;
                        CorrectReferral.referred_by_department_id = IncorrectReferral.referred_by_department_id;
                        CorrectReferral.referred_by_facility_in_network = IncorrectReferral.referred_by_facility_in_network;
                        CorrectReferral.referred_in_network = IncorrectReferral.referred_in_network;
                        CorrectReferral.referred_provider_address_id = IncorrectReferral.referred_provider_address_id;
                        CorrectReferral.referred_to_department_id = IncorrectReferral.referred_to_department_id;
                        CorrectReferral.referred_to_locationpos_id = IncorrectReferral.referred_to_locationpos_id;
                        CorrectReferral.referred_to_pcp_id = IncorrectReferral.referred_to_pcp_id;
                        CorrectReferral.referred_to_vendor_id = IncorrectReferral.referred_to_vendor_id;
                        CorrectReferral.referring_in_network = IncorrectReferral.referring_in_network;
                        CorrectReferral.referring_locationpos_id = IncorrectReferral.referring_locationpos_id;
                        CorrectReferral.referring_pcp_id = IncorrectReferral.referring_pcp_id;
                        CorrectReferral.referring_provider_address_id = IncorrectReferral.referring_provider_address_id;
                        CorrectReferral.revenue_code = IncorrectReferral.revenue_code;
                        CorrectReferral.review_request_id = IncorrectReferral.review_request_id;
                        CorrectReferral.sent_in_auth_file = IncorrectReferral.sent_in_auth_file;
                        CorrectReferral.sent_in_auth_file_date = IncorrectReferral.sent_in_auth_file_date;
                        CorrectReferral.sent_in_auth_file_update_date = IncorrectReferral.sent_in_auth_file_update_date;
                        CorrectReferral.std_billed = IncorrectReferral.std_billed;
                        CorrectReferral.std_billed_date = IncorrectReferral.std_billed_date;
                        CorrectReferral.std_office_location = IncorrectReferral.std_office_location;
                        CorrectReferral.system_role_r_category_groups_id = IncorrectReferral.system_role_r_category_groups_id;
                        CorrectReferral.system_role_r_clinical_service_types_id = IncorrectReferral.system_role_r_clinical_service_types_id;
                        CorrectReferral.type_id = IncorrectReferral.type_id;
                        CorrectReferral.vendor_address_id = IncorrectReferral.vendor_address_id;
                        CorrectReferral.vendor_in_network = IncorrectReferral.vendor_in_network;

                        ItemSet = true;
                    }
                }

                return ItemSet;

            }
            catch(Exception ex)
            {
                return ItemSet;
            }
        }


        private bool MergeReferralCodes(Guid CorrectMemberId, Guid IncorrectMember)
        {
            bool Merged = false;

            try
            {
                bool CptsMerged = false;
                bool IcdsMerged = false;
                bool HcpcsMerged = false;

                Guid IncorrectId = IncorrectMember;
                List<rMemberReferralCpts> IncorrectCptCodes = new List<rMemberReferralCpts>();
                List<rMemberReferralDiags> IncorrectIcdCodes = new List<rMemberReferralDiags>();
                List<rMemberReferralHcpcs> IncorrectHcpcsCodes = new List<rMemberReferralHcpcs>();

                using (var db = new ICMS2DbContext())
                {
                    //merge Referral CPT codes
                    IncorrectCptCodes = (from inccpts in db.DbmsMemberReferralCpts
                                         where inccpts.member_id == IncorrectId
                                         select inccpts).ToList();

                    if (IncorrectCptCodes != null)
                    {
                        if (IncorrectCptCodes.Count > 0)
                        {
                            foreach (rMemberReferralCpts CptToMerge in IncorrectCptCodes)
                            {
                                CptToMerge.member_id = CorrectMemberId;

                                db.Entry(CptToMerge).State = EntityState.Modified;
                                int UpdateReturnValue = db.SaveChanges();

                                if (!CptsMerged)
                                {
                                    if (UpdateReturnValue > 0)
                                    {
                                        CptsMerged = true;
                                    }
                                }
                            }
                        }
                        else
                        {
                            CptsMerged = true;
                        }
                    }
                    else
                    {
                        CptsMerged = true;
                    }
                }


                using (var dbicd = new ICMS2DbContext())
                {
                    //merge Referral ICD codes
                    IncorrectIcdCodes = (from incicd in dbicd.DbmsMemberReferralDiags
                                         where incicd.member_id == IncorrectId
                                         select incicd).ToList();

                    if (IncorrectIcdCodes != null)
                    {
                        if (IncorrectIcdCodes.Count > 0)
                        {
                            foreach (rMemberReferralDiags IcdToMerge in IncorrectIcdCodes)
                            {
                                IcdToMerge.member_id = CorrectMemberId;

                                dbicd.Entry(IcdToMerge).State = EntityState.Modified;
                                int UpdateReturnValue = dbicd.SaveChanges();

                                if (!IcdsMerged)
                                {
                                    if (UpdateReturnValue > 0)
                                    {
                                        IcdsMerged = true;
                                    }
                                }
                            }
                        }
                        else
                        {
                            IcdsMerged = true;
                        }
                    }
                    else
                    {
                        IcdsMerged = true;
                    }
                }


                using (var dbhcpcs = new ICMS2DbContext())
                {
                    //merge Referral HCPCS codes
                    IncorrectHcpcsCodes = (from inchcpcs in dbhcpcs.DbmsMemberReferralHcpcs
                                           where inchcpcs.member_id == IncorrectId
                                           select inchcpcs).ToList();

                    if (IncorrectHcpcsCodes != null)
                    {
                        if (IncorrectHcpcsCodes.Count > 0)
                        {
                            foreach (rMemberReferralHcpcs HcpcsToMerge in IncorrectHcpcsCodes)
                            {
                                HcpcsToMerge.member_id = CorrectMemberId;

                                dbhcpcs.Entry(HcpcsToMerge).State = EntityState.Modified;
                                int UpdateReturnValue = dbhcpcs.SaveChanges();
                                
                                if (!HcpcsMerged)
                                {
                                    if (UpdateReturnValue > 0)
                                    {
                                        HcpcsMerged = true;
                                    }
                                }
                            }
                        }
                        else
                        {
                            HcpcsMerged = true;
                        }
                    }
                    else
                    {
                        HcpcsMerged = true;
                    }
                }


                if (CptsMerged && IcdsMerged && HcpcsMerged)
                {
                    Merged = true;
                }

                return Merged;

            }
            catch (Exception ex)
            {
                return Merged;
            }
        }

        private bool MergeReferralWorkflow(Guid CorrectMemberId, Guid IncorrectMember)
        {
            bool Merged = false;

            try
            {
                Guid IncorrectId = IncorrectMember;
                List<rMemberReferralWorkflow> IncorrectWorkflows = new List<rMemberReferralWorkflow>();

                using (var db = new ICMS2DbContext())
                {
                    IncorrectWorkflows = (from incworkflw in db.DbmsMemberReferralWorkflows
                                          where incworkflw.member_id == IncorrectId
                                          select incworkflw).ToList();

                    if (IncorrectWorkflows != null)
                    {
                        if (IncorrectWorkflows.Count > 0)
                        {
                            foreach (rMemberReferralWorkflow WorkflowsToMerge in IncorrectWorkflows)
                            {
                                WorkflowsToMerge.member_id = CorrectMemberId;

                                db.Entry(WorkflowsToMerge).State = EntityState.Modified;
                                int UpdateReturnValue = db.SaveChanges();

                                if (!Merged)
                                {
                                    if (UpdateReturnValue > 0)
                                    {
                                        Merged = true;
                                    }
                                }
                            }
                        }
                        else
                        {
                            Merged = true;
                        }
                    }
                    else
                    {
                        Merged = true;
                    }
                }

                return Merged;

            }
            catch (Exception ex)
            {
                return Merged;
            }
        }

        private bool MergeReferralInterQualData(Guid CorrectMemberId, Guid IncorrectMember)
        {
            bool Merged = false;

            try
            {
                Guid IncorrectId = IncorrectMember;
                List<rMemberReferralInterqualReference> IncorrectInterquals = new List<rMemberReferralInterqualReference>();

                using (var db = new ICMS2DbContext())
                {
                    IncorrectInterquals = (from incinterqual in db.DbmsMemberReferralInterqualReference
                                          where incinterqual.member_id == IncorrectId
                                          select incinterqual).ToList();

                    if (IncorrectInterquals != null)
                    {
                        if (IncorrectInterquals.Count > 0)
                        {
                            foreach (rMemberReferralInterqualReference InterQualToMerge in IncorrectInterquals)
                            {
                                InterQualToMerge.member_id = CorrectMemberId;

                                db.Entry(InterQualToMerge).State = EntityState.Modified;
                                int UpdateReturnValue = db.SaveChanges();

                                if (!Merged)
                                {
                                    if (UpdateReturnValue > 0)
                                    {
                                        Merged = true;
                                    }
                                }
                            }
                        }
                        else
                        {
                            Merged = true;
                        }
                    }
                    else
                    {
                        Merged = true;
                    }
                }

                return Merged;

            }
            catch (Exception ex)
            {
                return Merged;
            }
        }

        private bool MergeReferralLetters(Guid CorrectMemberId, Guid IncorrectMember)
        {
            bool Merged = false;

            try
            {
                Guid IncorrectId = IncorrectMember;
                List<rMemberReferralLetters> IncorrectUtilDays = new List<rMemberReferralLetters>();

                using (var db = new ICMS2DbContext())
                {
                    IncorrectUtilDays = (from incutildays in db.DbmsMemberReferralLetters
                                           where incutildays.member_id == IncorrectId
                                           select incutildays).ToList();

                    if (IncorrectUtilDays != null)
                    {
                        if (IncorrectUtilDays.Count > 0)
                        {
                            foreach (rMemberReferralLetters UtilDayToMerge in IncorrectUtilDays)
                            {
                                UtilDayToMerge.member_id = CorrectMemberId;

                                db.Entry(UtilDayToMerge).State = EntityState.Modified;
                                int UpdateReturnValue = db.SaveChanges();

                                if (!Merged)
                                {
                                    if (UpdateReturnValue > 0)
                                    {
                                        Merged = true;
                                    }
                                }
                            }
                        }
                        else
                        {
                            Merged = true;
                        }
                    }
                    else
                    {
                        Merged = true;
                    }
                }

                return Merged;

            }
            catch (Exception ex)
            {
                return Merged;
            }
        }

        private bool MergeMemberFaxes(Guid CorrectMemberId, Guid IncorrectMember)
        {
            bool Merged = false;

            try
            {
                Guid IncorrectId = IncorrectMember;
                List<rInboundFax> IncorrectUtilDays = new List<rInboundFax>();

                using (var db = new ICMS2DbContext())
                {
                    IncorrectUtilDays = (from incutildays in db.DbmsInboundFax
                                        where incutildays.member_id == IncorrectId
                                        select incutildays).ToList();

                    if (IncorrectUtilDays != null)
                    {
                        if (IncorrectUtilDays.Count > 0)
                        {
                            foreach (rInboundFax UtilDayToMerge in IncorrectUtilDays)
                            {
                                UtilDayToMerge.member_id = CorrectMemberId;

                                db.Entry(UtilDayToMerge).State = EntityState.Modified;
                                int UpdateReturnValue = db.SaveChanges();

                                if (!Merged)
                                {
                                    if (UpdateReturnValue > 0)
                                    {
                                        Merged = true;
                                    }
                                }
                            }
                        }
                        else
                        {
                            Merged = true;
                        }
                    }
                    else
                    {
                        Merged = true;
                    }
                }

                return Merged;

            }
            catch (Exception ex)
            {
                return Merged;
            }
        }


        private bool MergeUtilizationDays(Guid CorrectMemberId, Guid IncorrectMember)
        {
            bool Merged = false;

            try
            {
                Guid IncorrectId = IncorrectMember;
                List<rUtilizationDays> IncorrectUtilDays = new List<rUtilizationDays>();

                using (var db = new ICMS2DbContext())
                {
                    IncorrectUtilDays = (from incutildays in db.DbmsUtilizationDays
                                      where incutildays.member_id == IncorrectId
                                      select incutildays).ToList();

                    if (IncorrectUtilDays != null)
                    {
                        if (IncorrectUtilDays.Count > 0)
                        {
                            foreach (rUtilizationDays UtilDayToMerge in IncorrectUtilDays)
                            {
                                rUtilizationDays AddItem = new rUtilizationDays();

                                if (SetCorrectUtilizationDays(CorrectMemberId, ref AddItem, UtilDayToMerge))
                                {
                                    rUtilizationDays DeleteItem = UtilDayToMerge;

                                    db.DbmsUtilizationDays.Attach(UtilDayToMerge);
                                    db.DbmsUtilizationDays.Remove(UtilDayToMerge);

                                    int IncorrectItemDeleted = db.SaveChanges();

                                    if (IncorrectItemDeleted > 0)
                                    {
                                        db.DbmsUtilizationDays.Add(AddItem);
                                        int CorrectItemAdded = db.SaveChanges();

                                        if (!Merged)
                                        {
                                            if (CorrectItemAdded > 0)
                                            {
                                                Merged = true;
                                            }
                                        }
                                    }
                                }

                                //UtilDayToMerge.member_id = CorrectMemberId;

                                //db.Entry(UtilDayToMerge).State = EntityState.Modified;
                                //int UpdateReturnValue = db.SaveChanges();

                                //if (!Merged)
                                //{
                                //    if (UpdateReturnValue > 0)
                                //    {
                                //        Merged = true;
                                //    }
                                //}
                            }
                        }
                        else
                        {
                            Merged = true;
                        }
                    }
                    else
                    {
                        Merged = true;
                    }
                }

                return Merged;

            }
            catch (Exception ex)
            {
                return Merged;
            }
        }

        private bool SetCorrectUtilizationDays(Guid CorrectMemberId, ref rUtilizationDays CorrectUtil, rUtilizationDays IncorrectUtil)
        {
            bool ItemSet = false;

            try
            {
                if (CorrectMemberId != null)
                {
                    if (!CorrectMemberId.Equals(Guid.Empty))
                    {
                        CorrectUtil.member_id = CorrectMemberId;

                        CorrectUtil.DateUpdated = IncorrectUtil.DateUpdated;
                        CorrectUtil.Date_Created = IncorrectUtil.Date_Created;
                        CorrectUtil.denial_reason_id = IncorrectUtil.denial_reason_id;
                        CorrectUtil.end_date = IncorrectUtil.end_date;
                        CorrectUtil.ICM_Units = IncorrectUtil.ICM_Units;
                        CorrectUtil.line_number = IncorrectUtil.line_number;
                        CorrectUtil.next_review_date = IncorrectUtil.next_review_date;
                        CorrectUtil.number_of_days = IncorrectUtil.number_of_days;
                        CorrectUtil.PatCaseActID = IncorrectUtil.PatCaseActID;
                        CorrectUtil.referral_number = IncorrectUtil.referral_number;
                        CorrectUtil.referral_type = IncorrectUtil.referral_type;
                        CorrectUtil.removed = IncorrectUtil.removed;
                        CorrectUtil.removed_date = IncorrectUtil.removed_date;
                        CorrectUtil.removed_user_id = IncorrectUtil.removed_user_id;
                        CorrectUtil.sands_referral_status_code_id = IncorrectUtil.sands_referral_status_code_id;
                        CorrectUtil.start_date = IncorrectUtil.start_date;
                        CorrectUtil.std_billed = IncorrectUtil.std_billed;
                        CorrectUtil.std_billed_date = IncorrectUtil.std_billed_date;
                        CorrectUtil.surgery_flag = IncorrectUtil.surgery_flag;
                        CorrectUtil.surgery_on_first_day_flag = IncorrectUtil.surgery_on_first_day_flag;
                        CorrectUtil.type_id = IncorrectUtil.type_id;
                        CorrectUtil.util_decision_id = IncorrectUtil.util_decision_id;
                        CorrectUtil.visits_authorized_end_date = IncorrectUtil.visits_authorized_end_date;
                        CorrectUtil.visits_authorized_start_date = IncorrectUtil.visits_authorized_start_date;
                        CorrectUtil.visits_num_periods_authorized = IncorrectUtil.visits_num_periods_authorized;
                        CorrectUtil.visits_num_periods_requested = IncorrectUtil.visits_num_periods_requested;
                        CorrectUtil.visits_num_per_period_authorized = IncorrectUtil.visits_num_per_period_authorized;
                        CorrectUtil.visits_num_per_period_requested = IncorrectUtil.visits_num_per_period_requested;
                        CorrectUtil.visits_period_authorized = IncorrectUtil.visits_period_authorized;
                        CorrectUtil.visits_period_requested = IncorrectUtil.visits_period_requested;
                        CorrectUtil.visits_recurring_flag = IncorrectUtil.visits_recurring_flag;

                        ItemSet = true;
                    }
                }

                return ItemSet;

            }
            catch (Exception ex)
            {
                return ItemSet;
            }
        }


        private bool MergeUtilizationAttachments(Guid CorrectMemberId, Guid IncorrectMember)
        {
            bool Merged = false;

            try
            {
                Guid IncorrectId = IncorrectMember;
                List<UmNotesAttachment> IncorrectUmAttachments = new List<UmNotesAttachment>();

                using (var db = new ICMS2DbContext())
                {
                    IncorrectUmAttachments = (from incumntattach in db.DbmsUmNotesAttachment
                                         where incumntattach.member_id == IncorrectId
                                         select incumntattach).ToList();

                    if (IncorrectUmAttachments != null)
                    {
                        if (IncorrectUmAttachments.Count > 0)
                        {
                            foreach (UmNotesAttachment UmAttachmentToMerge in IncorrectUmAttachments)
                            {
                                UmNotesAttachment AddItem = new UmNotesAttachment();

                                if (SetCorrectUtilizationAttachments(CorrectMemberId, ref AddItem, UmAttachmentToMerge))
                                {
                                    UmNotesAttachment DeleteItem = UmAttachmentToMerge;

                                    db.DbmsUmNotesAttachment.Attach(UmAttachmentToMerge);
                                    db.DbmsUmNotesAttachment.Remove(UmAttachmentToMerge);

                                    int IncorrectItemDeleted = db.SaveChanges();

                                    if (IncorrectItemDeleted > 0)
                                    {
                                        db.DbmsUmNotesAttachment.Add(AddItem);
                                        int CorrectItemAdded = db.SaveChanges();

                                        if (!Merged)
                                        {
                                            if (CorrectItemAdded > 0)
                                            {
                                                Merged = true;
                                            }
                                        }
                                    }
                                }

                                //    UmAttachmentToMerge.member_id = CorrectMemberId;

                                //    db.Entry(UmAttachmentToMerge).State = EntityState.Modified;
                                //    int UpdateReturnValue = db.SaveChanges();

                                //    if (!Merged)
                                //    {
                                //        if (UpdateReturnValue > 0)
                                //        {
                                //            Merged = true;
                                //        }
                                //    }
                                //}
                            }
                        }
                        else
                        {
                            Merged = true;
                        }
                    }
                    else
                    {
                        Merged = true;
                    }
                }

                return Merged;

            }
            catch (Exception ex)
            {
                return Merged;
            }
        }

        private bool SetCorrectUtilizationAttachments(Guid CorrectMemberId, ref UmNotesAttachment CorrectAttachment, UmNotesAttachment IncorrectAttachment)
        {
            bool ItemSet = false;

            try
            {
                if (CorrectMemberId != null)
                {
                    if (!CorrectMemberId.Equals(Guid.Empty))
                    {
                        CorrectAttachment.member_id = CorrectMemberId;

                        CorrectAttachment.creation_user_id = IncorrectAttachment.creation_user_id;
                        CorrectAttachment.file_blob = IncorrectAttachment.file_blob;
                        CorrectAttachment.file_identifier = IncorrectAttachment.file_identifier;
                        CorrectAttachment.record_date = IncorrectAttachment.record_date;
                        CorrectAttachment.referral_number = IncorrectAttachment.referral_number;
                        CorrectAttachment.voicemail_attachment = IncorrectAttachment.voicemail_attachment;

                        ItemSet = true;
                    }
                }

                return ItemSet;

            }
            catch (Exception ex)
            {
                return ItemSet;
            }
        }


        private bool MergeMemberNoteAttachments(Guid CorrectMemberId, Guid IncorrectMember)
        {
            bool Merged = false;

            try
            {
                Guid IncorrectId = IncorrectMember;
                List<MemberNotesAttachment> IncorrectMemNoteAttachments = new List<MemberNotesAttachment>();

                using (var db = new ICMS2DbContext())
                {
                    IncorrectMemNoteAttachments = (from incmemnoteattach in db.DbmsMemberNotesAttachment
                                         where incmemnoteattach.member_id == IncorrectId
                                         select incmemnoteattach).ToList();

                    if (IncorrectMemNoteAttachments != null)
                    {
                        if (IncorrectMemNoteAttachments.Count > 0)
                        {
                            foreach (MemberNotesAttachment MemNoteAttachmentToMerge in IncorrectMemNoteAttachments)
                            {
                                MemberNotesAttachment AddItem = new MemberNotesAttachment();

                                if (SetCorrectMemberNoteAttachments(CorrectMemberId, ref AddItem, MemNoteAttachmentToMerge))
                                {
                                    MemberNotesAttachment DeleteItem = MemNoteAttachmentToMerge;

                                    db.DbmsMemberNotesAttachment.Attach(MemNoteAttachmentToMerge);
                                    db.DbmsMemberNotesAttachment.Remove(MemNoteAttachmentToMerge);

                                    int IncorrectItemDeleted = db.SaveChanges();

                                    if (IncorrectItemDeleted > 0)
                                    {
                                        db.DbmsMemberNotesAttachment.Add(AddItem);
                                        int CorrectItemAdded = db.SaveChanges();

                                        if (!Merged)
                                        {
                                            if (CorrectItemAdded > 0)
                                            {
                                                Merged = true;
                                            }
                                        }
                                    }
                                }

                                //MemNoteAttachmentToMerge.member_id = CorrectMemberId;

                                //db.Entry(MemNoteAttachmentToMerge).State = EntityState.Modified;
                                //int UpdateReturnValue = db.SaveChanges();

                                //if (!Merged)
                                //{
                                //    if (UpdateReturnValue > 0)
                                //    {
                                //        Merged = true;
                                //    }
                                //}
                            }
                        }
                        else
                        {
                            Merged = true;
                        }
                    }
                    else
                    {
                        Merged = true;
                    }
                }

                return Merged;

            }
            catch (Exception ex)
            {
                return Merged;
            }
        }

        private bool SetCorrectMemberNoteAttachments(Guid CorrectMemberId, ref MemberNotesAttachment CorrectAttachment, MemberNotesAttachment IncorrectAttachment)
        {
            bool ItemSet = false;

            try
            {
                if (CorrectMemberId != null)
                {
                    if (!CorrectMemberId.Equals(Guid.Empty))
                    {
                        CorrectAttachment.member_id = CorrectMemberId;

                        CorrectAttachment.care_coordination = IncorrectAttachment.care_coordination;
                        CorrectAttachment.creation_user_id = IncorrectAttachment.creation_user_id;
                        CorrectAttachment.entered_via_web = IncorrectAttachment.entered_via_web;
                        CorrectAttachment.file_blob = IncorrectAttachment.file_blob;
                        CorrectAttachment.file_identifier = IncorrectAttachment.file_identifier;
                        CorrectAttachment.internal_patient = IncorrectAttachment.internal_patient;
                        CorrectAttachment.record_date = IncorrectAttachment.record_date;

                        ItemSet = true;
                    }
                }

                return ItemSet;

            }
            catch (Exception ex)
            {
                return ItemSet;
            }
        }


        private bool MergeLcmInfo(Guid CorrectMemberId, Guid IncorrectMember)
        {
            bool Merged = false;

            try
            {
                bool InitRptsMerged = false;
                bool ActivityRptsMerged = false;
                bool SavingsMerged = false;

                Guid IncorrectId = IncorrectMember;
                List<MemberLcmInitial> IncorrectInitRpts = new List<MemberLcmInitial>();
                List<MemberLcmActivity> IncorrectActivityRpts = new List<MemberLcmActivity>();
                List<MemberLcmFollowupSavings> IncorrectSavings = new List<MemberLcmFollowupSavings>();

                using (var db = new ICMS2DbContext())
                {
                    //merge Initial LCM Rpts
                    IncorrectInitRpts = (from incinitrpts in db.DbmsMemberLcmInitial
                                         where incinitrpts.member_id == IncorrectId
                                         select incinitrpts).ToList();

                    if (IncorrectInitRpts != null)
                    {
                        if (IncorrectInitRpts.Count > 0)
                        {
                            foreach (MemberLcmInitial InitRptToMerge in IncorrectInitRpts)
                            {
                                InitRptToMerge.member_id = CorrectMemberId;

                                db.Entry(InitRptToMerge).State = EntityState.Modified;
                                int UpdateReturnValue = db.SaveChanges();

                                if (!InitRptsMerged)
                                {
                                    if (UpdateReturnValue > 0)
                                    {
                                        InitRptsMerged = true;
                                    }
                                }
                            }
                        }
                        else
                        {
                            InitRptsMerged = true;
                        }
                    }
                    else
                    {
                        InitRptsMerged = true;
                    }
                }


                using (var dbactrpt = new ICMS2DbContext())
                {
                    //merge Activity LCM Rpts
                    IncorrectActivityRpts = (from incactivityrpt in dbactrpt.DbmsMemberLcmActivity
                                             where incactivityrpt.member_id == IncorrectId
                                             select incactivityrpt).ToList();

                    if (IncorrectActivityRpts != null)
                    {
                        if (IncorrectActivityRpts.Count > 0)
                        {
                            foreach (MemberLcmActivity ActivityRptToMerge in IncorrectActivityRpts)
                            {
                                ActivityRptToMerge.member_id = CorrectMemberId;

                                dbactrpt.Entry(ActivityRptToMerge).State = EntityState.Modified;
                                int UpdateReturnValue = dbactrpt.SaveChanges();

                                if (!ActivityRptsMerged)
                                {
                                    if (UpdateReturnValue > 0)
                                    {
                                        ActivityRptsMerged = true;
                                    }
                                }
                            }
                        }
                        else
                        {
                            ActivityRptsMerged = true;
                        }
                    }
                    else
                    {
                        ActivityRptsMerged = true;
                    }
                }


                using (var dbsaving = new ICMS2DbContext())
                {
                    //merge LCM Savings
                    IncorrectSavings = (from inclcmsavings in dbsaving.DbmsMemberLcmFollowupSavings
                                           where inclcmsavings.member_id == IncorrectId
                                           select inclcmsavings).ToList();

                    if (IncorrectSavings != null)
                    {
                        if (IncorrectSavings.Count > 0)
                        {
                            foreach (MemberLcmFollowupSavings SavingsToMerge in IncorrectSavings)
                            {
                                SavingsToMerge.member_id = CorrectMemberId;

                                dbsaving.Entry(SavingsToMerge).State = EntityState.Modified;
                                int UpdateReturnValue = dbsaving.SaveChanges();

                                if (!SavingsMerged)
                                {
                                    if (UpdateReturnValue > 0)
                                    {
                                        SavingsMerged = true;
                                    }
                                }
                            }
                        }
                        else
                        {
                            SavingsMerged = true;
                        }
                    }
                    else
                    {
                        SavingsMerged = true;
                    }
                }


                if (InitRptsMerged && ActivityRptsMerged && SavingsMerged)
                {
                    Merged = true;
                }

                return Merged;

            }
            catch (Exception ex)
            {
                return Merged;
            }
        }

        private bool MergeMemberMdReviewReference(Guid CorrectMemberId, Guid IncorrectMember)
        {
            bool Merged = false;

            try
            {
                Guid IncorrectId = IncorrectMember;
                List<MemberMdReviewReference> IncorrectMemMdReviewReferences = new List<MemberMdReviewReference>();

                using (var db = new ICMS2DbContext())
                {
                    IncorrectMemMdReviewReferences = (from incmdrevref in db.DbmsMemberMdReviewReference
                                                   where incmdrevref.member_id == IncorrectId
                                                   select incmdrevref).ToList();

                    if (IncorrectMemMdReviewReferences != null)
                    {
                        if (IncorrectMemMdReviewReferences.Count > 0)
                        {
                            foreach (MemberMdReviewReference MdRevRefToMerge in IncorrectMemMdReviewReferences)
                            {
                                MdRevRefToMerge.member_id = CorrectMemberId;

                                db.Entry(MdRevRefToMerge).State = EntityState.Modified;
                                int UpdateReturnValue = db.SaveChanges();

                                if (!Merged)
                                {
                                    if (UpdateReturnValue > 0)
                                    {
                                        Merged = true;
                                    }
                                }
                            }
                        }
                        else
                        {
                            Merged = true;
                        }
                    }
                    else
                    {
                        Merged = true;
                    }
                }

                return Merged;

            }
            catch (Exception ex)
            {
                return Merged;
            }
        }

        private bool MergeMemberAddressDmAlternate(Guid CorrectMemberId, Guid IncorrectMember)
        {
            bool Merged = false;

            try
            {
                Guid IncorrectId = IncorrectMember;
                List<MemberAddressDmAlternate> IncorrectMemAddDmAlternates = new List<MemberAddressDmAlternate>();

                using (var db = new ICMS2DbContext())
                {
                    IncorrectMemAddDmAlternates = (from incadddmalter in db.DbmsMemberAddressDmAlternate
                                                      where incadddmalter.member_id == IncorrectId
                                                      select incadddmalter).ToList();

                    if (IncorrectMemAddDmAlternates != null)
                    {
                        if (IncorrectMemAddDmAlternates.Count > 0)
                        {
                            foreach (MemberAddressDmAlternate AddressDmAlternateToMerge in IncorrectMemAddDmAlternates)
                            {
                                AddressDmAlternateToMerge.member_id = CorrectMemberId;

                                db.Entry(AddressDmAlternateToMerge).State = EntityState.Modified;
                                int UpdateReturnValue = db.SaveChanges();

                                if (!Merged)
                                {
                                    if (UpdateReturnValue > 0)
                                    {
                                        Merged = true;
                                    }
                                }
                            }
                        }
                        else
                        {
                            Merged = true;
                        }
                    }
                    else
                    {
                        Merged = true;
                    }
                }

                return Merged;

            }
            catch (Exception ex)
            {
                return Merged;
            }
        }

        private bool MergeMemberMedAllergies(Guid CorrectMemberId, Guid IncorrectMember)
        {
            bool Merged = false;

            try
            {
                Guid IncorrectId = IncorrectMember;
                List<MemberMedsAllergies> IncorrectMemMedAllergies = new List<MemberMedsAllergies>();

                using (var db = new ICMS2DbContext())
                {
                    IncorrectMemMedAllergies = (from incmedallergies in db.DbmsMemberMedsAllergies
                                                   where incmedallergies.member_id == IncorrectId
                                                   select incmedallergies).ToList();

                    if (IncorrectMemMedAllergies != null)
                    {
                        if (IncorrectMemMedAllergies.Count > 0)
                        {
                            foreach (MemberMedsAllergies MedAllergyToMerge in IncorrectMemMedAllergies)
                            {
                                MedAllergyToMerge.member_id = CorrectMemberId;

                                db.Entry(MedAllergyToMerge).State = EntityState.Modified;
                                int UpdateReturnValue = db.SaveChanges();

                                if (!Merged)
                                {
                                    if (UpdateReturnValue > 0)
                                    {
                                        Merged = true;
                                    }
                                }
                            }
                        }
                        else
                        {
                            Merged = true;
                        }
                    }
                    else
                    {
                        Merged = true;
                    }
                }

                return Merged;

            }
            catch (Exception ex)
            {
                return Merged;
            }
        }


        private bool MergeMemberQualityCareNotes(Guid CorrectMemberId, Guid IncorrectMember)
        {
            bool Merged = false;

            try
            {
                Guid IncorrectId = IncorrectMember;
                List<rQualityCareNotes> IncorrectQualityCareNotes = new List<rQualityCareNotes>();

                using (var db = new ICMS2DbContext())
                {
                    IncorrectQualityCareNotes = (from incQualtiyNote in db.DbmsQualityCareNotes
                                                where incQualtiyNote.member_id == IncorrectId
                                                select incQualtiyNote).ToList();

                    if (IncorrectQualityCareNotes != null)
                    {
                        if (IncorrectQualityCareNotes.Count > 0)
                        {
                            foreach (rQualityCareNotes QualityCareNoteToMerge in IncorrectQualityCareNotes)
                            {
                                rQualityCareNotes AddItem = new rQualityCareNotes();

                                if (SetCorrectMemberQualityCareNotes(CorrectMemberId, ref AddItem, QualityCareNoteToMerge))
                                {
                                    rQualityCareNotes DeleteItem = QualityCareNoteToMerge;

                                    db.DbmsQualityCareNotes.Attach(QualityCareNoteToMerge);
                                    db.DbmsQualityCareNotes.Remove(QualityCareNoteToMerge);

                                    int IncorrectItemDeleted = db.SaveChanges();

                                    if (IncorrectItemDeleted > 0)
                                    {
                                        db.DbmsQualityCareNotes.Add(AddItem);
                                        int CorrectItemAdded = db.SaveChanges();

                                        if (!Merged)
                                        {
                                            if (CorrectItemAdded > 0)
                                            {
                                                Merged = true;
                                            }
                                        }
                                    }
                                }

                                //QualityCareNoteToMerge.member_id = CorrectMemberId;

                                //db.Entry(QualityCareNoteToMerge).State = EntityState.Modified;
                                //int UpdateReturnValue = db.SaveChanges();

                                //if (!Merged)
                                //{
                                //    if (UpdateReturnValue > 0)
                                //    {
                                //        Merged = true;
                                //    }
                                //}
                            }
                        }
                        else
                        {
                            Merged = true;
                        }
                    }
                    else
                    {
                        Merged = true;
                    }
                }

                return Merged;

            }
            catch (Exception ex)
            {
                return Merged;
            }
        }

        private bool SetCorrectMemberQualityCareNotes(Guid CorrectMemberId, ref rQualityCareNotes CorrectNote, rQualityCareNotes IncorrectNote)
        {
            bool ItemSet = false;

            try
            {
                if (CorrectMemberId != null)
                {
                    if (!CorrectMemberId.Equals(Guid.Empty))
                    {
                        CorrectNote.member_id = CorrectMemberId;

                        CorrectNote.evaluation_text = IncorrectNote.evaluation_text;
                        CorrectNote.qoc_reason_id = IncorrectNote.qoc_reason_id;
                        CorrectNote.quality_care_type_id = IncorrectNote.quality_care_type_id;
                        CorrectNote.record_date = IncorrectNote.record_date;
                        CorrectNote.record_seq_num = IncorrectNote.record_seq_num;
                        CorrectNote.referral_number = IncorrectNote.referral_number;
                        CorrectNote.system_user_id = IncorrectNote.system_user_id;

                        ItemSet = true;
                    }
                }

                return ItemSet;

            }
            catch (Exception ex)
            {
                return ItemSet;
            }
        }


        private bool MergeReferralMissingReferTo(Guid CorrectMemberId, Guid IncorrectMember)
        {
            bool Merged = false;

            try
            {
                Guid IncorrectId = IncorrectMember;
                List<rReferralMissingReferTo> IncorrectMissingReferTos = new List<rReferralMissingReferTo>();

                using (var db = new ICMS2DbContext())
                {
                    IncorrectMissingReferTos = (from incmissrefto in db.DbmsrReferralMissingReferTo
                                                 where incmissrefto.member_id == IncorrectId
                                                 select incmissrefto).ToList();

                    if (IncorrectMissingReferTos != null)
                    {
                        if (IncorrectMissingReferTos.Count > 0)
                        {
                            foreach (rReferralMissingReferTo MissingReferToMerge in IncorrectMissingReferTos)
                            {
                                MissingReferToMerge.member_id = CorrectMemberId;

                                db.Entry(MissingReferToMerge).State = EntityState.Modified;
                                int UpdateReturnValue = db.SaveChanges();

                                if (!Merged)
                                {
                                    if (UpdateReturnValue > 0)
                                    {
                                        Merged = true;
                                    }
                                }
                            }
                        }
                        else
                        {
                            Merged = true;
                        }
                    }
                    else
                    {
                        Merged = true;
                    }
                }

                return Merged;

            }
            catch (Exception ex)
            {
                return Merged;
            }
        }

        private bool MergeUtilizationSavings(Guid CorrectMemberId, Guid IncorrectMember)
        {
            bool Merged = false;

            try
            {
                Guid IncorrectId = IncorrectMember;
                List<rUtilizationSavings> IncorrectUtilSavings = new List<rUtilizationSavings>();

                using (var db = new ICMS2DbContext())
                {
                    IncorrectUtilSavings = (from incutilsav in db.DbmsUtilizationSavings
                                                where incutilsav.member_id == IncorrectId
                                                select incutilsav).ToList();

                    if (IncorrectUtilSavings != null)
                    {
                        if (IncorrectUtilSavings.Count > 0)
                        {
                            foreach (rUtilizationSavings UtilSavingsToMerge in IncorrectUtilSavings)
                            {
                                UtilSavingsToMerge.member_id = CorrectMemberId;

                                db.Entry(UtilSavingsToMerge).State = EntityState.Modified;
                                int UpdateReturnValue = db.SaveChanges();

                                if (!Merged)
                                {
                                    if (UpdateReturnValue > 0)
                                    {
                                        Merged = true;
                                    }
                                }
                            }
                        }
                        else
                        {
                            Merged = true;
                        }
                    }
                    else
                    {
                        Merged = true;
                    }
                }

                return Merged;

            }
            catch (Exception ex)
            {
                return Merged;
            }
        }

        private bool MergeUtilizationReviews(Guid CorrectMemberId, Guid IncorrectMember)
        {
            bool Merged = false;

            try
            {
                Guid IncorrectId = IncorrectMember;
                List<rUtilizationReviews> IncorrectUtilReviews = new List<rUtilizationReviews>();

                using (var db = new ICMS2DbContext())
                {
                    IncorrectUtilReviews = (from incutilrev in db.DbmsUtilizationReviews
                                            where incutilrev.member_id == IncorrectId
                                            select incutilrev).ToList();

                    if (IncorrectUtilReviews != null)
                    {
                        if (IncorrectUtilReviews.Count > 0)
                        {
                            foreach (rUtilizationReviews UtilReviewToMerge in IncorrectUtilReviews)
                            {
                                UtilReviewToMerge.member_id = CorrectMemberId;

                                db.Entry(UtilReviewToMerge).State = EntityState.Modified;
                                int UpdateReturnValue = db.SaveChanges();

                                if (!Merged)
                                {
                                    if (UpdateReturnValue > 0)
                                    {
                                        Merged = true;
                                    }
                                }
                            }
                        }
                        else
                        {
                            Merged = true;
                        }
                    }
                    else
                    {
                        Merged = true;
                    }
                }

                return Merged;

            }
            catch (Exception ex)
            {
                return Merged;
            }
        }


        private bool MergeMemberNotes(Guid CorrectMemberId, Guid IncorrectMember)
        {
            bool Merged = false;

            try
            {
                Guid IncorrectId = IncorrectMember;
                List<MemberNotes> IncorrectMemberNotes = new List<MemberNotes>();

                using (var db = new ICMS2DbContext())
                {
                    IncorrectMemberNotes = (from incmemnotes in db.DbmsMemberNotes
                                            where incmemnotes.member_id == IncorrectId
                                            select incmemnotes).ToList();

                    if (IncorrectMemberNotes != null)
                    {
                        if (IncorrectMemberNotes.Count > 0)
                        {
                            foreach (MemberNotes MemberNoteToMerge in IncorrectMemberNotes)
                            {
                                MemberNotes AddItem = new MemberNotes();

                                if (SetCorrectMemberNotes(CorrectMemberId, ref AddItem, MemberNoteToMerge))
                                {
                                    MemberNotes DeleteItem = MemberNoteToMerge;

                                    db.DbmsMemberNotes.Attach(MemberNoteToMerge);
                                    db.DbmsMemberNotes.Remove(MemberNoteToMerge);

                                    int IncorrectItemDeleted = db.SaveChanges();

                                    if (IncorrectItemDeleted > 0)
                                    {
                                        db.DbmsMemberNotes.Add(AddItem);
                                        int CorrectItemAdded = db.SaveChanges();

                                        if (!Merged)
                                        {
                                            if (CorrectItemAdded > 0)
                                            {
                                                Merged = true;
                                            }
                                        }
                                    }
                                }

                                //MemberNoteToMerge.member_id = CorrectMemberId;

                                //db.Entry(MemberNoteToMerge).State = EntityState.Modified;
                                //int UpdateReturnValue = db.SaveChanges();

                                //if (!Merged)
                                //{
                                //    if (UpdateReturnValue > 0)
                                //    {
                                //        Merged = true;
                                //    }
                                //}
                            }
                        }
                        else
                        {
                            Merged = true;
                        }
                    }
                    else
                    {
                        Merged = true;
                    }
                }

                return Merged;

            }
            catch (Exception ex)
            {
                return Merged;
            }
        }

        private bool SetCorrectMemberNotes(Guid CorrectMemberId, ref MemberNotes CorrectNote, MemberNotes IncorrectNote)
        {
            bool ItemSet = false;

            try
            {
                if (CorrectMemberId != null)
                {
                    if (!CorrectMemberId.Equals(Guid.Empty))
                    {
                        CorrectNote.member_id = CorrectMemberId;

                        CorrectNote.adhoc = IncorrectNote.adhoc;
                        CorrectNote.billing_id = IncorrectNote.billing_id;
                        CorrectNote.care_coordination = IncorrectNote.care_coordination;
                        CorrectNote.care_plan_note = IncorrectNote.care_plan_note;
                        CorrectNote.date_lcm_activity_report_generated = IncorrectNote.date_lcm_activity_report_generated;
                        CorrectNote.date_lcm_report_generated = IncorrectNote.date_lcm_report_generated;
                        CorrectNote.employer = IncorrectNote.employer;
                        CorrectNote.end_time = IncorrectNote.end_time;
                        CorrectNote.entered_via_web = IncorrectNote.entered_via_web;
                        CorrectNote.evaluation_text = IncorrectNote.evaluation_text;
                        CorrectNote.internal_patient = IncorrectNote.internal_patient;
                        CorrectNote.lab = IncorrectNote.lab;
                        CorrectNote.lcm_activity_followup_id = IncorrectNote.lcm_activity_followup_id;
                        CorrectNote.lcm_activity_report = IncorrectNote.lcm_activity_report;
                        CorrectNote.lcm_followup_id = IncorrectNote.lcm_followup_id;
                        CorrectNote.lcn = IncorrectNote.lcn;
                        CorrectNote.lcn_case_number = IncorrectNote.lcn_case_number;
                        CorrectNote.member_call = IncorrectNote.member_call;
                        CorrectNote.note_billed = IncorrectNote.note_billed;
                        CorrectNote.note_billed_marked_date = IncorrectNote.note_billed_marked_date;
                        CorrectNote.note_sent_in_file = IncorrectNote.note_sent_in_file;
                        CorrectNote.note_sent_in_file_date = IncorrectNote.note_sent_in_file_date;
                        CorrectNote.override_date = IncorrectNote.override_date;
                        CorrectNote.radiology = IncorrectNote.radiology;
                        CorrectNote.record_date = IncorrectNote.record_date;
                        CorrectNote.record_seq_num = IncorrectNote.record_seq_num;
                        CorrectNote.RN_notes = IncorrectNote.RN_notes;
                        CorrectNote.std_note = IncorrectNote.std_note;
                        CorrectNote.telephone = IncorrectNote.telephone;
                        CorrectNote.updated_date = IncorrectNote.updated_date;
                        CorrectNote.updated_user_id = IncorrectNote.updated_user_id;
                        CorrectNote.user_updated = IncorrectNote.user_updated;
                        CorrectNote.wc_note = IncorrectNote.wc_note;
                        CorrectNote.web_client_note = IncorrectNote.web_client_note;

                        ItemSet = true;
                    }
                }

                return ItemSet;

            }
            catch (Exception ex)
            {
                return ItemSet;
            }
        }


        private bool MergeUtilizationDayNotes(Guid CorrectMemberId, Guid IncorrectMember)
        {
            bool Merged = false;

            try
            {
                Guid IncorrectId = IncorrectMember;
                List<rUtilizationDayNotes> IncorrectUtilDayNotes = new List<rUtilizationDayNotes>();

                using (var db = new ICMS2DbContext())
                {
                    IncorrectUtilDayNotes = (from incUtilDayNotes in db.DbmsUtilizationDayNotes
                                            where incUtilDayNotes.member_id == IncorrectId
                                            select incUtilDayNotes).ToList();

                    if (IncorrectUtilDayNotes != null)
                    {
                        if (IncorrectUtilDayNotes.Count > 0)
                        {
                            foreach (rUtilizationDayNotes UtilNoteToMerge in IncorrectUtilDayNotes)
                            {
                                rUtilizationDayNotes AddItem = new rUtilizationDayNotes();

                                if (SetCorrectUtilizationDayNotes(CorrectMemberId, ref AddItem, UtilNoteToMerge))
                                {
                                    rUtilizationDayNotes DeleteItem = UtilNoteToMerge;

                                    db.DbmsUtilizationDayNotes.Attach(UtilNoteToMerge);
                                    db.DbmsUtilizationDayNotes.Remove(UtilNoteToMerge);

                                    int IncorrectItemDeleted = db.SaveChanges();

                                    if (IncorrectItemDeleted > 0)
                                    {
                                        db.DbmsUtilizationDayNotes.Add(AddItem);
                                        int CorrectItemAdded = db.SaveChanges();

                                        if (!Merged)
                                        {
                                            if (CorrectItemAdded > 0)
                                            {
                                                Merged = true;
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        else
                        {
                            Merged = true;
                        }
                    }
                    else
                    {
                        Merged = true;
                    }
                }

                return Merged;

            }
            catch (Exception ex)
            {
                return Merged;
            }
        }

        private bool SetCorrectUtilizationDayNotes(Guid CorrectMemberId, ref rUtilizationDayNotes CorrectNote, rUtilizationDayNotes IncorrectNote)
        {
            bool ItemSet = false;

            try
            {
                if (CorrectMemberId != null)
                {
                    if (!CorrectMemberId.Equals(Guid.Empty))
                    {
                        CorrectNote.member_id = CorrectMemberId;

                        CorrectNote.referral_number = IncorrectNote.referral_number;
                        CorrectNote.referral_type = IncorrectNote.referral_type;
                        CorrectNote.line_number = IncorrectNote.line_number;
                        CorrectNote.record_seq_num = IncorrectNote.record_seq_num;
                        CorrectNote.record_date = IncorrectNote.record_date;
                        CorrectNote.system_user_id = IncorrectNote.system_user_id;
                        CorrectNote.evaluation_text = IncorrectNote.evaluation_text;
                        CorrectNote.onletter = IncorrectNote.onletter;
                        CorrectNote.RN_notes = IncorrectNote.RN_notes;
                        CorrectNote.billing_id = IncorrectNote.billing_id;
                        CorrectNote.note_billed = IncorrectNote.note_billed;
                        CorrectNote.note_billed_marked_date = IncorrectNote.note_billed_marked_date;
                        CorrectNote.benefit_disclaimer = IncorrectNote.benefit_disclaimer;
                        CorrectNote.date_lcm_report_generated = IncorrectNote.date_lcm_report_generated;
                        CorrectNote.lcn_case_number = IncorrectNote.lcn_case_number;
                        CorrectNote.lcm_followup_id = IncorrectNote.lcm_followup_id;
                        CorrectNote.updated_user_id = IncorrectNote.updated_user_id;
                        CorrectNote.updated_date = IncorrectNote.updated_date;
                        CorrectNote.date_lcm_activity_report_generated = IncorrectNote.date_lcm_activity_report_generated;
                        CorrectNote.lcm_activity_followup_id = IncorrectNote.lcm_activity_followup_id;

                        ItemSet = true;
                    }
                }

                return ItemSet;

            }
            catch (Exception ex)
            {
                return ItemSet;
            }
        }


        private bool MergeMemberAddresses(Guid CorrectMemberId, Guid IncorrectMember)
        {
            bool Merged = false;

            try
            {
                Guid IncorrectId = IncorrectMember;
                List<MemberAddress> IncorrectMemberAddresses = new List<MemberAddress>();

                using (var db = new ICMS2DbContext())
                {
                    IncorrectMemberAddresses = (from incmemadd in db.DbmsMemberAddresses
                                             where incmemadd.member_id == IncorrectId
                                             select incmemadd).ToList();

                    if (IncorrectMemberAddresses != null)
                    {
                        if (IncorrectMemberAddresses.Count > 0)
                        {

                            MemberAddress CorrectMemberAddress = GetCorrectMergeMemberAddress(CorrectMemberId);

                            foreach (MemberAddress MemberAddressToMerge in IncorrectMemberAddresses)
                            {
                                if (CorrectAddressDoesNotMatchIncorrectAddress(CorrectMemberAddress, MemberAddressToMerge))
                                {
                                    MemberAddressToMerge.member_id = CorrectMemberId;
                                    MemberAddressToMerge.is_alternate = true;

                                    db.Entry(MemberAddressToMerge).State = EntityState.Modified;
                                    int UpdateReturnValue = db.SaveChanges();

                                    if (!Merged)
                                    {
                                        if (UpdateReturnValue > 0)
                                        {
                                            Merged = true;
                                        }
                                    }
                                }
                                else
                                {
                                    MemberAddress DeleteAddress = MemberAddressToMerge;
                                    DeleteIncorrectMemberAddress(DeleteAddress);

                                    Merged = true;
                                }
                            }
                        }
                        else
                        {
                            Merged = true;
                        }
                    }
                    else
                    {
                        Merged = true;
                    }
                }

                return Merged;

            }
            catch (Exception ex)
            {
                return Merged;
            }
        }

        private MemberAddress GetCorrectMergeMemberAddress(Guid CorrectMemberId)
        {
            MemberAddress AddressToReturn = new MemberAddress();

            try
            {
                using (var db = new ICMS2DbContext())
                {
                    AddressToReturn = (from memadd in db.DbmsMemberAddresses
                                       where memadd.member_id == CorrectMemberId
                                       && memadd.address_type_id == 1
                                       && (memadd.is_alternate == null || memadd.is_alternate == false)
                                       orderby memadd.member_address_id descending
                                       select memadd).FirstOrDefault();
                }

                return AddressToReturn;

            }
            catch(Exception ex)
            {
                return AddressToReturn;
            }
        }

        private bool CorrectAddressDoesNotMatchIncorrectAddress(MemberAddress CorrectMemberAddress, MemberAddress IncorrectMemberAddress)
        {
            bool DoesNotMatch = true;
            bool Continue = false;

            try
            {
                if (CorrectMemberAddress.address_line1 != null && IncorrectMemberAddress.address_line1 != null)
                {
                    if (!string.IsNullOrEmpty(CorrectMemberAddress.address_line1) && !string.IsNullOrEmpty(IncorrectMemberAddress.address_line1))
                    {
                        if (CorrectMemberAddress.address_line1.ToLower().Equals(IncorrectMemberAddress.address_line1.ToLower()))
                        {
                            Continue = true;
                        }
                    }
                    else if (string.IsNullOrEmpty(CorrectMemberAddress.address_line1) && string.IsNullOrEmpty(IncorrectMemberAddress.address_line1))
                    {
                        Continue = true;
                    }
                    else if (string.IsNullOrEmpty(CorrectMemberAddress.address_line1) && IncorrectMemberAddress.address_line1 == null)
                    {
                        Continue = true;
                    }
                    else if (CorrectMemberAddress.address_line1 == null && string.IsNullOrEmpty(IncorrectMemberAddress.address_line1))
                    {
                        Continue = true;
                    }
                }


                if (Continue)
                {
                    Continue = false;

                    if (CorrectMemberAddress.address_line2 != null && IncorrectMemberAddress.address_line2 != null)
                    {
                        if (!string.IsNullOrEmpty(CorrectMemberAddress.address_line2) && !string.IsNullOrEmpty(IncorrectMemberAddress.address_line2))
                        {
                            if (CorrectMemberAddress.address_line2.ToLower().Equals(IncorrectMemberAddress.address_line2.ToLower()))
                            {
                                Continue = true;
                            }
                        }
                        else if (string.IsNullOrEmpty(CorrectMemberAddress.address_line2) && string.IsNullOrEmpty(IncorrectMemberAddress.address_line2))
                        {
                            Continue = true;
                        }
                    }
                    else if (CorrectMemberAddress.address_line2 == null && IncorrectMemberAddress.address_line2 == null)
                    {
                        Continue = true;
                    }
                    else if (string.IsNullOrEmpty(CorrectMemberAddress.address_line2) && IncorrectMemberAddress.address_line2 == null)
                    {
                        Continue = true;
                    }
                    else if (CorrectMemberAddress.address_line2 == null && string.IsNullOrEmpty(IncorrectMemberAddress.address_line2))
                    {
                        Continue = true;
                    }
                }


                if (Continue)
                {
                    Continue = false;

                    if (CorrectMemberAddress.apartment_number != null && IncorrectMemberAddress.apartment_number != null)
                    {
                        if (!string.IsNullOrEmpty(CorrectMemberAddress.apartment_number) && !string.IsNullOrEmpty(IncorrectMemberAddress.apartment_number))
                        {
                            if (CorrectMemberAddress.apartment_number.ToLower().Equals(IncorrectMemberAddress.apartment_number.ToLower()))
                            {
                                Continue = true;
                            }
                        }
                        else if (string.IsNullOrEmpty(CorrectMemberAddress.apartment_number) && string.IsNullOrEmpty(IncorrectMemberAddress.apartment_number))
                        {
                            Continue = true;
                        }
                    }
                    else if (CorrectMemberAddress.apartment_number == null && IncorrectMemberAddress.apartment_number == null)
                    {
                        Continue = true;
                    }
                    else if (string.IsNullOrEmpty(CorrectMemberAddress.apartment_number) && IncorrectMemberAddress.apartment_number == null)
                    {
                        Continue = true;
                    }
                    else if (CorrectMemberAddress.apartment_number == null && string.IsNullOrEmpty(IncorrectMemberAddress.apartment_number))
                    {
                        Continue = true;
                    }
                }


                if (Continue)
                {
                    Continue = false;

                    if (CorrectMemberAddress.city != null && IncorrectMemberAddress.city != null)
                    {
                        if (!string.IsNullOrEmpty(CorrectMemberAddress.city) && !string.IsNullOrEmpty(IncorrectMemberAddress.city))
                        {
                            if (CorrectMemberAddress.city.ToLower().Equals(IncorrectMemberAddress.city.ToLower()))
                            {
                                Continue = true;
                            }
                        }
                        else if (string.IsNullOrEmpty(CorrectMemberAddress.city) && string.IsNullOrEmpty(IncorrectMemberAddress.city))
                        {
                            Continue = true;
                        }
                    }
                    else if (CorrectMemberAddress.city == null && IncorrectMemberAddress.city == null)
                    {
                        Continue = true;
                    }
                    else if (string.IsNullOrEmpty(CorrectMemberAddress.city) && IncorrectMemberAddress.city == null)
                    {
                        Continue = true;
                    }
                    else if (CorrectMemberAddress.city == null && string.IsNullOrEmpty(IncorrectMemberAddress.city))
                    {
                        Continue = true;
                    }
                }


                if (Continue)
                {
                    Continue = false;

                    if (CorrectMemberAddress.zip_code != null && IncorrectMemberAddress.zip_code != null)
                    {
                        if (!string.IsNullOrEmpty(CorrectMemberAddress.zip_code) && !string.IsNullOrEmpty(IncorrectMemberAddress.zip_code))
                        {
                            if (CorrectMemberAddress.zip_code.Equals(IncorrectMemberAddress.zip_code))
                            {
                                Continue = true;
                            }
                        }
                        else if (string.IsNullOrEmpty(CorrectMemberAddress.zip_code) && string.IsNullOrEmpty(IncorrectMemberAddress.zip_code))
                        {
                            Continue = true;
                        }
                    }
                    else if (CorrectMemberAddress.zip_code == null && IncorrectMemberAddress.zip_code == null)
                    {
                        Continue = true;
                    }
                    else if (string.IsNullOrEmpty(CorrectMemberAddress.zip_code) && IncorrectMemberAddress.zip_code == null)
                    {
                        Continue = true;
                    }
                    else if (CorrectMemberAddress.zip_code == null && string.IsNullOrEmpty(IncorrectMemberAddress.zip_code))
                    {
                        Continue = true;
                    }
                }


                if (Continue)
                {
                    DoesNotMatch = false;
                }

                return DoesNotMatch;

            }
            catch(Exception ex)
            {
                return DoesNotMatch;
            }
        }

        private void DeleteIncorrectMemberAddress(MemberAddress DeleteAddress)
        {
            try
            {
                using (var db = new ICMS2DbContext())
                {
                    db.DbmsMemberAddresses.Attach(DeleteAddress);
                    db.DbmsMemberAddresses.Remove(DeleteAddress);
                    db.SaveChanges();
                }
            }
            catch(Exception ex)
            {

            }
        }

        private bool MergMemberPhones(Guid CorrectMemberId, Guid IncorrectMember)
        {
            bool Merged = false;

            try
            {
                Guid IncorrectId = IncorrectMember;
                List<MemberPhone> IncorrectMemberPhones = new List<MemberPhone>();

                using (var db = new ICMS2DbContext())
                {
                    IncorrectMemberPhones = (from incmemphone in db.DbmsMemberPhone
                                             where incmemphone.member_id == IncorrectId
                                             select incmemphone).ToList();

                    if (IncorrectMemberPhones != null)
                    {
                        if (IncorrectMemberPhones.Count > 0)
                        {

                            MemberPhone CorrectMemberPhone = GetCorrectMergeMemberPhone(CorrectMemberId);

                            if (CorrectMemberPhone == null)
                            {
                                MemberPhone CorrectEmptyPhoneToDelete = new MemberPhone();

                                CorrectEmptyPhoneToDelete = (from memadd in db.DbmsMemberPhone
                                                            where memadd.member_id == CorrectMemberId
                                                            && memadd.phone_type_id == 2
                                                            && memadd.phone_number != null
                                                            orderby memadd.member_phone_id descending
                                                            select memadd).FirstOrDefault();

                                MemberPhone DeleteCorrectEmptyPhone = CorrectEmptyPhoneToDelete;
                                DeleteIncorrectMemberPhone(DeleteCorrectEmptyPhone);



                                MemberPhone NewestIncorrectPhone = new MemberPhone();

                                NewestIncorrectPhone = (from incmemphone in db.DbmsMemberPhone
                                                         where incmemphone.member_id == IncorrectId
                                                         && incmemphone.phone_type_id == 2
                                                         && (incmemphone.phone_number != "" && incmemphone.phone_number != null)
                                                         orderby incmemphone.member_phone_id descending
                                                         select incmemphone).FirstOrDefault();


                                if (NewestIncorrectPhone != null)
                                {
                                    NewestIncorrectPhone.member_id = CorrectMemberId;

                                    db.Entry(NewestIncorrectPhone).State = EntityState.Modified;
                                    int UpdateReturnValue = db.SaveChanges();

                                    if (!Merged)
                                    {
                                        if (UpdateReturnValue > 0)
                                        {
                                            Merged = true;
                                        }
                                    }
                                }
                                else
                                {
                                    foreach (MemberPhone MemberPhoneToMerge in IncorrectMemberPhones)
                                    {
                                        if (!string.IsNullOrEmpty(MemberPhoneToMerge.phone_number))
                                        {
                                            MemberPhoneToMerge.member_id = CorrectMemberId;

                                            db.Entry(MemberPhoneToMerge).State = EntityState.Modified;
                                            int UpdateReturnValue = db.SaveChanges();

                                            if (!Merged)
                                            {
                                                if (UpdateReturnValue > 0)
                                                {
                                                    Merged = true;
                                                }
                                            }
                                        }
                                        else
                                        {
                                            MemberPhone DeletePhone = MemberPhoneToMerge;
                                            DeleteIncorrectMemberPhone(DeletePhone);

                                            Merged = true;
                                        }
                                    }
                                }
                            }
                            else
                            {
                                foreach (MemberPhone MemberPhoneToMerge in IncorrectMemberPhones)
                                {
                                    if (CorrectPhoneDoesNotMatchIncorrectPhone(CorrectMemberPhone, MemberPhoneToMerge))
                                    {
                                        if (string.IsNullOrEmpty(CorrectMemberPhone.phone_number))
                                        {
                                            MemberPhone DeletePhone = CorrectMemberPhone;
                                            DeleteIncorrectMemberPhone(DeletePhone);

                                            MemberPhoneToMerge.member_id = CorrectMemberId;

                                            db.Entry(MemberPhoneToMerge).State = EntityState.Modified;
                                            int UpdateReturnValue = db.SaveChanges();

                                            if (!Merged)
                                            {
                                                if (UpdateReturnValue > 0)
                                                {
                                                    Merged = true;
                                                }
                                            }
                                        }
                                        else
                                        {
                                            MemberPhone DeletePhone = MemberPhoneToMerge;
                                            DeleteIncorrectMemberPhone(DeletePhone);

                                            Merged = true;
                                        }
                                    }
                                    else
                                    {
                                        if (MemberPhoneToMerge.phone_type_id == 2)
                                        {
                                            MemberPhone DeletePhone = MemberPhoneToMerge;
                                            DeleteIncorrectMemberPhone(DeletePhone);
                                        }
                                        else if (MemberPhoneToMerge.phone_number == null)
                                        {
                                            MemberPhone DeletePhone = MemberPhoneToMerge;
                                            DeleteIncorrectMemberPhone(DeletePhone);
                                        }
                                        else if (string.IsNullOrEmpty(MemberPhoneToMerge.phone_number))
                                        {
                                            MemberPhone DeletePhone = MemberPhoneToMerge;
                                            DeleteIncorrectMemberPhone(DeletePhone);
                                        }

                                        Merged = true;
                                    }
                                }
                            }
                        }
                        else
                        {
                            Merged = true;
                        }
                    }
                    else
                    {
                        Merged = true;
                    }
                }

                return Merged;

            }
            catch (Exception ex)
            {
                return Merged;
            }
        }

        private MemberPhone GetCorrectMergeMemberPhone(Guid CorrectMemberId)
        {
            MemberPhone PhoneToReturn = new MemberPhone();

            try
            {
                using (var db = new ICMS2DbContext())
                {
                    PhoneToReturn = (from memadd in db.DbmsMemberPhone
                                       where memadd.member_id == CorrectMemberId
                                       && memadd.phone_type_id  == 2
                                       && memadd.phone_number != null 
                                       orderby memadd.member_phone_id descending
                                       select memadd).FirstOrDefault();
                }

                return PhoneToReturn;

            }
            catch (Exception ex)
            {
                return PhoneToReturn;
            }
        }

        private bool CorrectPhoneDoesNotMatchIncorrectPhone(MemberPhone CorrectMemberPhone, MemberPhone IncorrectMemberPhone)
        {
            bool DoesNotMatch = true;
            bool Continue = false;

            try
            {
                if (CorrectMemberPhone.phone_type_id > 0 && IncorrectMemberPhone.phone_type_id > 0)
                {
                    if (CorrectMemberPhone.phone_type_id.Equals(IncorrectMemberPhone.phone_type_id))
                    {
                        Continue = true;
                    }
                }


                if (Continue)
                {
                    Continue = false;

                    if (CorrectMemberPhone.phone_number != null && IncorrectMemberPhone.phone_number != null)
                    {
                        if (!string.IsNullOrEmpty(CorrectMemberPhone.phone_number) &&
                            !string.IsNullOrEmpty(IncorrectMemberPhone.phone_number))
                        {
                            if (CorrectMemberPhone.phone_number.Equals(IncorrectMemberPhone.phone_number))
                            {
                                Continue = true;
                            }
                        }
                        else if (IncorrectMemberPhone.phone_number == null)
                        {
                            Continue = true;
                        }
                        else if (string.IsNullOrEmpty(IncorrectMemberPhone.phone_number))
                        {
                            Continue = true;
                        }
                    }
                    else if (CorrectMemberPhone.phone_number == null && IncorrectMemberPhone.phone_number == null)
                    {
                        Continue = true;
                    }
                    else if (string.IsNullOrEmpty(CorrectMemberPhone.phone_number) && IncorrectMemberPhone.phone_number == null)
                    {
                        Continue = true;
                    }
                    else if (CorrectMemberPhone.phone_number == null && string.IsNullOrEmpty(IncorrectMemberPhone.phone_number))
                    {
                        Continue = true;
                    }
                }


                if (Continue)
                {
                    DoesNotMatch = false;
                }

                return DoesNotMatch;

            }
            catch (Exception ex)
            {
                return DoesNotMatch;
            }
        }

        private void DeleteIncorrectMemberPhone(MemberPhone DeletePhone)
        {
            try
            {
                using (var db = new ICMS2DbContext())
                {
                    db.DbmsMemberPhone.Attach(DeletePhone);
                    db.DbmsMemberPhone.Remove(DeletePhone);
                    db.SaveChanges();
                }
            }
            catch (Exception ex)
            {

            }
        }

        private bool MergeMemberVitals(Guid CorrectMemberId, Guid IncorrectMember)
        {
            bool Merged = false;

            try
            {
                Guid IncorrectId = IncorrectMember;
                List<MemberVitals> IncorrectMemberVitals = new List<MemberVitals>();

                using (var db = new ICMS2DbContext())
                {
                    IncorrectMemberVitals = (from incmemvitals in db.DbmsMemberVitals
                                             where incmemvitals.member_id == IncorrectId
                                             select incmemvitals).ToList();

                    if (IncorrectMemberVitals != null)
                    {
                        if (IncorrectMemberVitals.Count > 0)
                        {
                            foreach (MemberVitals MemberVitalsToMerge in IncorrectMemberVitals)
                            {
                                MemberVitalsToMerge.member_id = CorrectMemberId;

                                db.Entry(MemberVitalsToMerge).State = EntityState.Modified;
                                int UpdateReturnValue = db.SaveChanges();

                                if (!Merged)
                                {
                                    if (UpdateReturnValue > 0)
                                    {
                                        Merged = true;
                                    }
                                }
                            }
                        }
                        else
                        {
                            Merged = true;
                        }
                    }
                    else
                    {
                        Merged = true;
                    }
                }

                return Merged;

            }
            catch (Exception ex)
            {
                return Merged;
            }
        }

        private bool MergeMemberLabs(Guid CorrectMemberId, Guid IncorrectMember)
        {
            bool Merged = false;

            try
            {
                Guid IncorrectId = IncorrectMember;
                List<MemberLab> IncorrectMemberLabs = new List<MemberLab>();

                using (var db = new ICMS2DbContext())
                {
                    IncorrectMemberLabs = (from incmemlabs in db.DbmsMemberLab
                                             where incmemlabs.member_id == IncorrectId
                                             select incmemlabs).ToList();

                    if (IncorrectMemberLabs != null)
                    {
                        if (IncorrectMemberLabs.Count > 0)
                        {
                            foreach (MemberLab MemberLabsToMerge in IncorrectMemberLabs)
                            {
                                MemberLabsToMerge.member_id = CorrectMemberId;

                                db.Entry(MemberLabsToMerge).State = EntityState.Modified;
                                int UpdateReturnValue = db.SaveChanges();

                                if (!Merged)
                                {
                                    if (UpdateReturnValue > 0)
                                    {
                                        Merged = true;
                                    }
                                }
                            }
                        }
                        else
                        {
                            Merged = true;
                        }
                    }
                    else
                    {
                        Merged = true;
                    }
                }

                return Merged;

            }
            catch (Exception ex)
            {
                return Merged;
            }
        }

        private bool MergeAdmissions(Guid CorrectMemberId, Guid IncorrectMember)
        {
            bool Merged = false;

            try
            {
                Guid IncorrectId = IncorrectMember;
                List<Admission> IncorrectAddmissions = new List<Admission>();

                using (var db = new ICMS2DbContext())
                {
                    IncorrectAddmissions = (from incadmission in db.DbmsAdmission
                                           where incadmission.member_id == IncorrectId
                                           select incadmission).ToList();

                    if (IncorrectAddmissions != null)
                    {
                        if (IncorrectAddmissions.Count > 0)
                        {
                            foreach (Admission AddmissionsToMerge in IncorrectAddmissions)
                            {
                                AddmissionsToMerge.member_id = CorrectMemberId;

                                db.Entry(AddmissionsToMerge).State = EntityState.Modified;
                                int UpdateReturnValue = db.SaveChanges();

                                if (!Merged)
                                {
                                    if (UpdateReturnValue > 0)
                                    {
                                        Merged = true;
                                    }
                                }
                            }
                        }
                        else
                        {
                            Merged = true;
                        }
                    }
                    else
                    {
                        Merged = true;
                    }
                }

                return Merged;

            }
            catch (Exception ex)
            {
                return Merged;
            }
        }


        private bool MergeMemberToolProgramStaus(Guid CorrectMemberId, Guid IncorrectMember)
        {
            bool Merged = false;

            try
            {
                Guid IncorrectId = IncorrectMember;
                List<MemberToolProgramStatus> IncorrectMemberToolProgramStatuses = new List<MemberToolProgramStatus>();

                using (var db = new ICMS2DbContext())
                {
                    IncorrectMemberToolProgramStatuses = (from incmemtoolprogstatus in db.DbmsMemberToolProgramStatus
                                            where incmemtoolprogstatus.member_id == IncorrectId
                                            select incmemtoolprogstatus).ToList();

                    if (IncorrectMemberToolProgramStatuses != null)
                    {
                        if (IncorrectMemberToolProgramStatuses.Count > 0)
                        {
                            foreach (MemberToolProgramStatus ToolProgramStatusToMerge in IncorrectMemberToolProgramStatuses)
                            {
                                MemberToolProgramStatus AddItem = new MemberToolProgramStatus();

                                if (SetCorrectMemberToolProgramStatus(CorrectMemberId, ref AddItem, ToolProgramStatusToMerge))
                                {
                                    MemberToolProgramStatus DeleteItem = ToolProgramStatusToMerge;

                                    db.DbmsMemberToolProgramStatus.Attach(ToolProgramStatusToMerge);
                                    db.DbmsMemberToolProgramStatus.Remove(ToolProgramStatusToMerge);

                                    int IncorrectItemDeleted = db.SaveChanges();

                                    if (IncorrectItemDeleted > 0)
                                    {
                                        db.DbmsMemberToolProgramStatus.Add(AddItem);
                                        int CorrectItemAdded = db.SaveChanges();

                                        if (!Merged)
                                        {
                                            if (CorrectItemAdded > 0)
                                            {
                                                Merged = true;
                                            }
                                        }
                                    }
                                }

                                //ToolProgramStatusToMerge.member_id = CorrectMemberId;

                                //db.Entry(ToolProgramStatusToMerge).State = EntityState.Modified;
                                //int UpdateReturnValue = db.SaveChanges();

                                //if (!Merged)
                                //{
                                //    if (UpdateReturnValue > 0)
                                //    {
                                //        Merged = true;
                                //    }
                                //}
                            }
                        }
                        else
                        {
                            Merged = true;
                        }
                    }
                    else
                    {
                        Merged = true;
                    }
                }

                return Merged;

            }
            catch (Exception ex)
            {
                return Merged;
            }
        }
        
        private bool SetCorrectMemberToolProgramStatus(Guid CorrectMemberId, ref MemberToolProgramStatus CorrectNote, MemberToolProgramStatus IncorrectNote)
        {
            bool ItemSet = false;

            try
            {
                if (CorrectMemberId != null)
                {
                    if (!CorrectMemberId.Equals(Guid.Empty))
                    {
                        CorrectNote.member_id = CorrectMemberId;

                        CorrectNote.active_flag = IncorrectNote.active_flag;
                        CorrectNote.date_updated = IncorrectNote.date_updated;
                        CorrectNote.disenroll_reason_id = IncorrectNote.disenroll_reason_id;
                        CorrectNote.effective_date = IncorrectNote.effective_date;
                        CorrectNote.member_tool_program_inactive_reason_id = IncorrectNote.member_tool_program_inactive_reason_id;
                        CorrectNote.program_disenroll_date = IncorrectNote.program_disenroll_date;
                        CorrectNote.program_effective_date = IncorrectNote.program_effective_date;
                        CorrectNote.tool_id = IncorrectNote.tool_id;
                        CorrectNote.user_updated = IncorrectNote.user_updated;

                        ItemSet = true;
                    }
                }

                return ItemSet;

            }
            catch (Exception ex)
            {
                return ItemSet;
            }
        }


        private bool MergeMemberStratLevel(Guid CorrectMemberId, Guid IncorrectMember)
        {
            bool Merged = false;

            try
            {
                Guid IncorrectId = IncorrectMember;
                List<MemberStratLevel> IncorrectMemberStratLevel = new List<MemberStratLevel>();

                using (var db = new ICMS2DbContext())
                {
                    IncorrectMemberStratLevel = (from incmemstratlevel in db.DbmsMemberStratLevel
                                                          where incmemstratlevel.member_id == IncorrectId
                                                          select incmemstratlevel).ToList();

                    if (IncorrectMemberStratLevel != null)
                    {
                        if (IncorrectMemberStratLevel.Count > 0)
                        {
                            foreach (MemberStratLevel MemberStratLevelToMerge in IncorrectMemberStratLevel)
                            {
                                MemberStratLevelToMerge.member_id = CorrectMemberId;

                                db.Entry(MemberStratLevelToMerge).State = EntityState.Modified;
                                int UpdateReturnValue = db.SaveChanges();

                                if (!Merged)
                                {
                                    if (UpdateReturnValue > 0)
                                    {
                                        Merged = true;
                                    }
                                }
                            }
                        }
                        else
                        {
                            Merged = true;
                        }
                    }
                    else
                    {
                        Merged = true;
                    }
                }

                return Merged;

            }
            catch (Exception ex)
            {
                return Merged;
            }
        }

        private bool MergeMemberTasks(Guid CorrectMemberId, Guid IncorrectMember)
        {
            bool Merged = false;

            try
            {
                Guid IncorrectId = IncorrectMember;
                List<MemberTask> IncorrectMemberTasks = new List<MemberTask>();

                using (var db = new ICMS2DbContext())
                {
                    IncorrectMemberTasks = (from incmemtask in db.DbmsMemberTask
                                                 where incmemtask.member_id == IncorrectId
                                                 select incmemtask).ToList();

                    if (IncorrectMemberTasks != null)
                    {
                        if (IncorrectMemberTasks.Count > 0)
                        {
                            foreach (MemberTask MemberTaskToMerge in IncorrectMemberTasks)
                            {
                                MemberTaskToMerge.member_id = CorrectMemberId;

                                db.Entry(MemberTaskToMerge).State = EntityState.Modified;
                                int UpdateReturnValue = db.SaveChanges();

                                if (!Merged)
                                {
                                    if (UpdateReturnValue > 0)
                                    {
                                        Merged = true;
                                    }
                                }
                            }
                        }
                        else
                        {
                            Merged = true;
                        }
                    }
                    else
                    {
                        Merged = true;
                    }
                }

                return Merged;

            }
            catch (Exception ex)
            {
                return Merged;
            }
        }


        private bool MergeMemberHealthPlanReferences(Guid CorrectMemberId, Guid IncorrectMember)
        {
            bool Merged = false;

            try
            {
                Guid IncorrectId = IncorrectMember;
                List<MemberHealthPlanReference> IncorrectMemHealthPlanRefs = new List<MemberHealthPlanReference>();

                using (var db = new ICMS2DbContext())
                {
                    IncorrectMemHealthPlanRefs = (from incmemhealthplnref in db.DbmsMemberHealthPlanReference
                                            where incmemhealthplnref.member_id == IncorrectId
                                            select incmemhealthplnref).ToList();

                    if (IncorrectMemHealthPlanRefs != null)
                    {
                        if (IncorrectMemHealthPlanRefs.Count > 0)
                        {
                            foreach (MemberHealthPlanReference MemberHealthPlanRefToMerge in IncorrectMemHealthPlanRefs)
                            {
                                MemberHealthPlanReference AddItem = new MemberHealthPlanReference();

                                if (SetCorrectMemberHealthPlanReferences(CorrectMemberId, ref AddItem, MemberHealthPlanRefToMerge))
                                {
                                    MemberHealthPlanReference DeleteItem = MemberHealthPlanRefToMerge;

                                    db.DbmsMemberHealthPlanReference.Attach(MemberHealthPlanRefToMerge);
                                    db.DbmsMemberHealthPlanReference.Remove(MemberHealthPlanRefToMerge);

                                    int IncorrectItemDeleted = db.SaveChanges();

                                    if (IncorrectItemDeleted > 0)
                                    {
                                        db.DbmsMemberHealthPlanReference.Add(AddItem);
                                        int CorrectItemAdded = db.SaveChanges();

                                        if (!Merged)
                                        {
                                            if (CorrectItemAdded > 0)
                                            {
                                                Merged = true;
                                            }
                                        }
                                    }
                                }

                                //MemberHealthPlanRefToMerge.member_id = CorrectMemberId;

                                //db.Entry(MemberHealthPlanRefToMerge).State = EntityState.Modified;
                                //int UpdateReturnValue = db.SaveChanges();

                                //if (!Merged)
                                //{
                                //    if (UpdateReturnValue > 0)
                                //    {
                                //        Merged = true;
                                //    }
                                //}
                            }
                        }
                        else
                        {
                            Merged = true;
                        }
                    }
                    else
                    {
                        Merged = true;
                    }
                }

                return Merged;

            }
            catch (Exception ex)
            {
                return Merged;
            }
        }

        private bool SetCorrectMemberHealthPlanReferences(Guid CorrectMemberId, ref MemberHealthPlanReference CorrectItem, MemberHealthPlanReference IncorrectItem)
        {
            bool ItemSet = false;

            try
            {
                if (CorrectMemberId != null)
                {
                    if (!CorrectMemberId.Equals(Guid.Empty))
                    {
                        CorrectItem.member_id = CorrectMemberId;

                        CorrectItem.alternate_id = IncorrectItem.alternate_id;
                        CorrectItem.auto_assigned_indicator = IncorrectItem.auto_assigned_indicator;
                        CorrectItem.benefit_package_date = IncorrectItem.benefit_package_date;
                        CorrectItem.benefit_package_indicator = IncorrectItem.benefit_package_indicator;
                        CorrectItem.capitation_category = IncorrectItem.capitation_category;
                        CorrectItem.case_number = IncorrectItem.case_number;
                        CorrectItem.case_worker_number = IncorrectItem.case_worker_number;
                        CorrectItem.cm_program = IncorrectItem.cm_program;
                        CorrectItem.cobra = IncorrectItem.cobra;
                        CorrectItem.commercial = IncorrectItem.commercial;
                        CorrectItem.created_user_id = IncorrectItem.created_user_id;
                        CorrectItem.creation_date = IncorrectItem.creation_date;
                        CorrectItem.delivery_system = IncorrectItem.delivery_system;
                        CorrectItem.enterprise = IncorrectItem.enterprise;
                        CorrectItem.entry_id = IncorrectItem.entry_id;
                        CorrectItem.first_steps_end_date = IncorrectItem.first_steps_end_date;
                        CorrectItem.first_steps_start_date = IncorrectItem.first_steps_start_date;
                        CorrectItem.group_id = IncorrectItem.group_id;
                        CorrectItem.group_location = IncorrectItem.group_location;
                        CorrectItem.hip_end_date = IncorrectItem.hip_end_date;
                        CorrectItem.hip_start_date = IncorrectItem.hip_start_date;
                        CorrectItem.id_number = IncorrectItem.id_number;
                        CorrectItem.is_sands_shpg = IncorrectItem.is_sands_shpg;
                        CorrectItem.last_update_date = IncorrectItem.last_update_date;
                        CorrectItem.location_code = IncorrectItem.location_code;
                        CorrectItem.mco_id_number = IncorrectItem.mco_id_number;
                        CorrectItem.mco_region_id = IncorrectItem.mco_region_id;
                        CorrectItem.mdwise_hhw = IncorrectItem.mdwise_hhw;
                        CorrectItem.mdwise_hip = IncorrectItem.mdwise_hip;
                        CorrectItem.medicaid_eligibility = IncorrectItem.medicaid_eligibility;
                        CorrectItem.mrn = IncorrectItem.mrn;
                        CorrectItem.network = IncorrectItem.network;
                        CorrectItem.patient_acuity = IncorrectItem.patient_acuity;
                        CorrectItem.patient_status = IncorrectItem.patient_status;
                        CorrectItem.plan_description = IncorrectItem.plan_description;
                        CorrectItem.plan_id = IncorrectItem.plan_id;
                        CorrectItem.pmp_end_date = IncorrectItem.pmp_end_date;
                        CorrectItem.pmp_group_number = IncorrectItem.pmp_group_number;
                        CorrectItem.pmp_start_date = IncorrectItem.pmp_start_date;
                        CorrectItem.pre_existing_eff_date = IncorrectItem.pre_existing_eff_date;
                        CorrectItem.pre_existing_term_date = IncorrectItem.pre_existing_term_date;
                        CorrectItem.primary_medical_provider_number = IncorrectItem.primary_medical_provider_number;
                        CorrectItem.primary_number = IncorrectItem.primary_number;
                        CorrectItem.recipient_id_number = IncorrectItem.recipient_id_number;
                        CorrectItem.right_choice = IncorrectItem.right_choice;
                        CorrectItem.secondary_number = IncorrectItem.secondary_number;
                        CorrectItem.tpa_name = IncorrectItem.tpa_name;
                        CorrectItem.update_user_id = IncorrectItem.update_user_id;
                        CorrectItem.user_entry_id = IncorrectItem.user_entry_id;
                        CorrectItem.wishard_advantage = IncorrectItem.wishard_advantage;
                        CorrectItem.wishard_health_plan = IncorrectItem.wishard_health_plan;

                        ItemSet = true;
                    }
                }

                return ItemSet;

            }
            catch (Exception ex)
            {
                return ItemSet;
            }
        }


        private bool MergeMemberCustomerServiceAlerts(Guid CorrectMemberId, Guid IncorrectMember)
        {
            bool Merged = false;

            try
            {
                Guid IncorrectId = IncorrectMember;
                List<MemberCustomerServiceAlert> IncorrectMemberCustomerServiceAlerts = new List<MemberCustomerServiceAlert>();

                using (var db = new ICMS2DbContext())
                {
                    IncorrectMemberCustomerServiceAlerts = (from incmemcustservalerts in db.DbmsMemberCustomerServiceAlert
                                                  where incmemcustservalerts.member_id == IncorrectId
                                                  select incmemcustservalerts).ToList();

                    if (IncorrectMemberCustomerServiceAlerts != null)
                    {
                        if (IncorrectMemberCustomerServiceAlerts.Count > 0)
                        {
                            foreach (MemberCustomerServiceAlert MemberCustomerServiceAlertToMerge in IncorrectMemberCustomerServiceAlerts)
                            {
                                MemberCustomerServiceAlertToMerge.member_id = CorrectMemberId;

                                db.Entry(MemberCustomerServiceAlertToMerge).State = EntityState.Modified;
                                int UpdateReturnValue = db.SaveChanges();

                                if (!Merged)
                                {
                                    if (UpdateReturnValue > 0)
                                    {
                                        Merged = true;
                                    }
                                }
                            }
                        }
                        else
                        {
                            Merged = true;
                        }
                    }
                    else
                    {
                        Merged = true;
                    }
                }

                return Merged;

            }
            catch (Exception ex)
            {
                return Merged;
            }
        }


        private bool MergeCaseOwners(Guid CorrectMemberId, Guid IncorrectMember)
        {
            bool Merged = false;

            try
            {
                Guid IncorrectId = IncorrectMember;
                List<CaseOwner> IncorrectCaseOwners = new List<CaseOwner>();

                using (var db = new ICMS2DbContext())
                {
                    IncorrectCaseOwners = (from inccaseowner in db.DbmsCaseOwner
                                                            where inccaseowner.member_id == IncorrectId
                                                            select inccaseowner).ToList();

                    if (IncorrectCaseOwners != null)
                    {
                        if (IncorrectCaseOwners.Count > 0)
                        {
                            foreach (CaseOwner CaseOwnerToMerge in IncorrectCaseOwners)
                            {
                                CaseOwner AddItem = new CaseOwner();

                                if (SetCorrectCaseOwners(CorrectMemberId, ref AddItem, CaseOwnerToMerge))
                                {
                                    CaseOwner DeleteItem = CaseOwnerToMerge;

                                    db.DbmsCaseOwner.Attach(CaseOwnerToMerge);
                                    db.DbmsCaseOwner.Remove(CaseOwnerToMerge);

                                    int IncorrectItemDeleted = db.SaveChanges();

                                    if (IncorrectItemDeleted > 0)
                                    {
                                        db.DbmsCaseOwner.Add(AddItem);
                                        int CorrectItemAdded = db.SaveChanges();

                                        if (!Merged)
                                        {
                                            if (CorrectItemAdded > 0)
                                            {
                                                Merged = true;
                                            }
                                        }
                                    }
                                }

                                //CaseOwnerToMerge.member_id = CorrectMemberId;

                                //db.Entry(CaseOwnerToMerge).State = EntityState.Modified;
                                //int UpdateReturnValue = db.SaveChanges();

                                //if (!Merged)
                                //{
                                //    if (UpdateReturnValue > 0)
                                //    {
                                //        Merged = true;
                                //    }
                                //}
                            }
                        }
                        else
                        {
                            Merged = true;
                        }
                    }
                    else
                    {
                        Merged = true;
                    }
                }

                return Merged;

            }
            catch (Exception ex)
            {
                return Merged;
            }
        }

        private bool SetCorrectCaseOwners(Guid CorrectMemberId, ref CaseOwner CorrectNote, CaseOwner IncorrectNote)
        {
            bool ItemSet = false;

            try
            {
                if (CorrectMemberId != null)
                {
                    if (!CorrectMemberId.Equals(Guid.Empty))
                    {
                        CorrectNote.member_id = CorrectMemberId;

                        CorrectNote.assigned_date = IncorrectNote.assigned_date;
                        CorrectNote.case_type_code = IncorrectNote.case_type_code;
                        CorrectNote.discharge_date = IncorrectNote.discharge_date;
                        CorrectNote.system_user_id = IncorrectNote.system_user_id;
                        CorrectNote.transfer_date = IncorrectNote.transfer_date;
                        CorrectNote.transfer_to = IncorrectNote.transfer_to;

                        ItemSet = true;
                    }
                }

                return ItemSet;

            }
            catch (Exception ex)
            {
                return ItemSet;
            }
        }


        private bool MergeClinicalReviewBills(Guid CorrectMemberId, Guid IncorrectMember)
        {
            bool Merged = false;

            try
            {
                Guid IncorrectId = IncorrectMember;
                List<ClinicalReviewBills> IncorrectClinicalReviewBills = new List<ClinicalReviewBills>();

                using (var db = new ICMS2DbContext())
                {
                    IncorrectClinicalReviewBills = (from incclincrevbill in db.DbmsClinicalReviewBills
                                           where incclincrevbill.member_id == IncorrectId
                                           select incclincrevbill).ToList();

                    if (IncorrectClinicalReviewBills != null)
                    {
                        if (IncorrectClinicalReviewBills.Count > 0)
                        {
                            foreach (ClinicalReviewBills ClinicalReviewBillToMerge in IncorrectClinicalReviewBills)
                            {
                                ClinicalReviewBillToMerge.member_id = CorrectMemberId;

                                db.Entry(ClinicalReviewBillToMerge).State = EntityState.Modified;
                                int UpdateReturnValue = db.SaveChanges();

                                if (!Merged)
                                {
                                    if (UpdateReturnValue > 0)
                                    {
                                        Merged = true;
                                    }
                                }
                            }
                        }
                        else
                        {
                            Merged = true;
                        }
                    }
                    else
                    {
                        Merged = true;
                    }
                }

                return Merged;

            }
            catch (Exception ex)
            {
                return Merged;
            }
        }

        private bool MergeEmailOutbounds(Guid CorrectMemberId, Guid IncorrectMember)
        {
            bool Merged = false;

            try
            {
                Guid IncorrectId = IncorrectMember;
                List<EmailsOutbound> IncorrectEmailsOutbounds = new List<EmailsOutbound>();

                using (var db = new ICMS2DbContext())
                {
                    IncorrectEmailsOutbounds = (from incemailoutbound in db.DbmsEmailsOutbound
                                                    where incemailoutbound.member_id == IncorrectId
                                                    select incemailoutbound).ToList();

                    if (IncorrectEmailsOutbounds != null)
                    {
                        if (IncorrectEmailsOutbounds.Count > 0)
                        {
                            foreach (EmailsOutbound EmailOutboundToMerge in IncorrectEmailsOutbounds)
                            {
                                EmailOutboundToMerge.member_id = CorrectMemberId;

                                db.Entry(EmailOutboundToMerge).State = EntityState.Modified;
                                int UpdateReturnValue = db.SaveChanges();

                                if (!Merged)
                                {
                                    if (UpdateReturnValue > 0)
                                    {
                                        Merged = true;
                                    }
                                }
                            }
                        }
                        else
                        {
                            Merged = true;
                        }
                    }
                    else
                    {
                        Merged = true;
                    }
                }

                return Merged;

            }
            catch (Exception ex)
            {
                return Merged;
            }
        }

        private bool MergeEpisodesOfCares(Guid CorrectMemberId, Guid IncorrectMember)
        {
            bool Merged = false;

            try
            {
                Guid IncorrectId = IncorrectMember;
                List<EpisodesOfCare> IncorrectEpisodesOfCares = new List<EpisodesOfCare>();

                using (var db = new ICMS2DbContext())
                {
                    IncorrectEpisodesOfCares = (from incepisodesofcare in db.DbmsEpisodesOfCare
                                                where incepisodesofcare.member_id == IncorrectId
                                                select incepisodesofcare).ToList();

                    if (IncorrectEpisodesOfCares != null)
                    {
                        if (IncorrectEpisodesOfCares.Count > 0)
                        {
                            foreach (EpisodesOfCare EpisodeOfCareToMerge in IncorrectEpisodesOfCares)
                            {
                                EpisodeOfCareToMerge.member_id = CorrectMemberId;

                                db.Entry(EpisodeOfCareToMerge).State = EntityState.Modified;
                                int UpdateReturnValue = db.SaveChanges();

                                if (!Merged)
                                {
                                    if (UpdateReturnValue > 0)
                                    {
                                        Merged = true;
                                    }
                                }
                            }
                        }
                        else
                        {
                            Merged = true;
                        }
                    }
                    else
                    {
                        Merged = true;
                    }
                }

                return Merged;

            }
            catch (Exception ex)
            {
                return Merged;
            }
        }

        private bool MergeLcmReportNeededForBillingTasks(Guid CorrectMemberId, Guid IncorrectMember)
        {
            bool Merged = false;

            try
            {
                Guid IncorrectId = IncorrectMember;
                List<LcmReportNeededForBillingTask> IncorrectLcmReportNeededForBillingTasks = new List<LcmReportNeededForBillingTask>();

                using (var db = new ICMS2DbContext())
                {
                    IncorrectLcmReportNeededForBillingTasks = (from inclcmrptneedforbillingtask in db.DbmsLcmReportNeededForBillingTask
                                                where inclcmrptneedforbillingtask.member_id == IncorrectId
                                                select inclcmrptneedforbillingtask).ToList();

                    if (IncorrectLcmReportNeededForBillingTasks != null)
                    {
                        if (IncorrectLcmReportNeededForBillingTasks.Count > 0)
                        {
                            foreach (LcmReportNeededForBillingTask LcmReportNeededForBillingTaskToMerge in IncorrectLcmReportNeededForBillingTasks)
                            {
                                LcmReportNeededForBillingTaskToMerge.member_id = CorrectMemberId;

                                db.Entry(LcmReportNeededForBillingTaskToMerge).State = EntityState.Modified;
                                int UpdateReturnValue = db.SaveChanges();

                                if (!Merged)
                                {
                                    if (UpdateReturnValue > 0)
                                    {
                                        Merged = true;
                                    }
                                }
                            }
                        }
                        else
                        {
                            Merged = true;
                        }
                    }
                    else
                    {
                        Merged = true;
                    }
                }

                return Merged;

            }
            catch (Exception ex)
            {
                return Merged;
            }
        }

        private bool MergeLcmReportQaNotesTaskReferences(Guid CorrectMemberId, Guid IncorrectMember)
        {
            bool Merged = false;

            try
            {
                Guid IncorrectId = IncorrectMember;
                List<LcmReportQaNotesTaskReference> IncorrectLcmReportQaNotesTaskReferences = new List<LcmReportQaNotesTaskReference>();

                using (var db = new ICMS2DbContext())
                {
                    IncorrectLcmReportQaNotesTaskReferences = (from inclcmrptqanttaskref in db.DbmsLcmReportQaNotesTaskReference
                                                               where inclcmrptqanttaskref.member_id == IncorrectId
                                                               select inclcmrptqanttaskref).ToList();

                    if (IncorrectLcmReportQaNotesTaskReferences != null)
                    {
                        if (IncorrectLcmReportQaNotesTaskReferences.Count > 0)
                        {
                            foreach (LcmReportQaNotesTaskReference LcmReportQaNotesTaskReferencesToMerge in IncorrectLcmReportQaNotesTaskReferences)
                            {
                                LcmReportQaNotesTaskReferencesToMerge.member_id = CorrectMemberId;

                                db.Entry(LcmReportQaNotesTaskReferencesToMerge).State = EntityState.Modified;
                                int UpdateReturnValue = db.SaveChanges();

                                if (!Merged)
                                {
                                    if (UpdateReturnValue > 0)
                                    {
                                        Merged = true;
                                    }
                                }
                            }
                        }
                        else
                        {
                            Merged = true;
                        }
                    }
                    else
                    {
                        Merged = true;
                    }
                }

                return Merged;

            }
            catch (Exception ex)
            {
                return Merged;
            }
        }

        private bool MergeLcmReportQaTasks(Guid CorrectMemberId, Guid IncorrectMember)
        {
            bool Merged = false;

            try
            {
                Guid IncorrectId = IncorrectMember;
                List<LcmReportQaTasks> IncorrectLcmReportQaTasks = new List<LcmReportQaTasks>();

                using (var db = new ICMS2DbContext())
                {
                    IncorrectLcmReportQaTasks = (from inclcmrptqatasks in db.DbmsLcmReportQaTasks
                                                               where inclcmrptqatasks.member_id == IncorrectId
                                                               select inclcmrptqatasks).ToList();

                    if (IncorrectLcmReportQaTasks != null)
                    {
                        if (IncorrectLcmReportQaTasks.Count > 0)
                        {
                            foreach (LcmReportQaTasks LcmReportQaTaskToMerge in IncorrectLcmReportQaTasks)
                            {
                                LcmReportQaTaskToMerge.member_id = CorrectMemberId;

                                db.Entry(LcmReportQaTaskToMerge).State = EntityState.Modified;
                                int UpdateReturnValue = db.SaveChanges();

                                if (!Merged)
                                {
                                    if (UpdateReturnValue > 0)
                                    {
                                        Merged = true;
                                    }
                                }
                            }
                        }
                        else
                        {
                            Merged = true;
                        }
                    }
                    else
                    {
                        Merged = true;
                    }
                }

                return Merged;

            }
            catch (Exception ex)
            {
                return Merged;
            }
        }


        private bool MergeLcnReportFaxes(Guid CorrectMemberId, Guid IncorrectMember)
        {
            bool Merged = false;

            try
            {
                Guid IncorrectId = IncorrectMember;
                List<LcnReportFax> IncorrectLcnReportFaxes = new List<LcnReportFax>();

                using (var db = new ICMS2DbContext())
                {
                    IncorrectLcnReportFaxes = (from inclcnrptfax in db.DbmsLcnReportFax
                                                 where inclcnrptfax.member_id == IncorrectId
                                                 select inclcnrptfax).ToList();

                    if (IncorrectLcnReportFaxes != null)
                    {
                        if (IncorrectLcnReportFaxes.Count > 0)
                        {
                            foreach (LcnReportFax LcnReportFaxToMerge in IncorrectLcnReportFaxes)
                            {
                                LcnReportFax AddItem = new LcnReportFax();

                                if (SetCorrectLcnReportFaxes(CorrectMemberId, ref AddItem, LcnReportFaxToMerge))
                                {
                                    LcnReportFax DeleteItem = LcnReportFaxToMerge;

                                    db.DbmsLcnReportFax.Attach(LcnReportFaxToMerge);
                                    db.DbmsLcnReportFax.Remove(LcnReportFaxToMerge);

                                    int IncorrectItemDeleted = db.SaveChanges();

                                    if (IncorrectItemDeleted > 0)
                                    {
                                        db.DbmsLcnReportFax.Add(AddItem);
                                        int CorrectItemAdded = db.SaveChanges();

                                        if (!Merged)
                                        {
                                            if (CorrectItemAdded > 0)
                                            {
                                                Merged = true;
                                            }
                                        }
                                    }
                                }

                                //LcnReportFaxToMerge.member_id = CorrectMemberId;

                                //db.Entry(LcnReportFaxToMerge).State = EntityState.Modified;
                                //int UpdateReturnValue = db.SaveChanges();

                                //if (!Merged)
                                //{
                                //    if (UpdateReturnValue > 0)
                                //    {
                                //        Merged = true;
                                //    }
                                //}
                            }
                        }
                        else
                        {
                            Merged = true;
                        }
                    }
                    else
                    {
                        Merged = true;
                    }
                }

                return Merged;

            }
            catch (Exception ex)
            {
                return Merged;
            }
        }

        private bool SetCorrectLcnReportFaxes(Guid CorrectMemberId, ref LcnReportFax CorrectItem, LcnReportFax IncorrectItem)
        {
            bool ItemSet = false;

            try
            {
                if (CorrectMemberId != null)
                {
                    if (!CorrectMemberId.Equals(Guid.Empty))
                    {
                        //using (var db = new ICMS2DbContext())
                        //{
                        //    int MaxId = (from lcnrptfax in db.DbmsLcnReportFax
                        //                 where lcnrptfax.lcn_report_fax_id > 0
                        //                 orderby lcnrptfax.lcn_report_fax_id descending
                        //                 select lcnrptfax.lcn_report_fax_id).FirstOrDefault();


                        //    if (MaxId > 0)
                        //    {
                        //        MaxId = MaxId + 1;

                                CorrectItem.member_id = CorrectMemberId;
                                CorrectItem.creation_date = IncorrectItem.creation_date;
                                CorrectItem.fax_handle = IncorrectItem.fax_handle;
                                CorrectItem.file_blob = IncorrectItem.file_blob;
                                CorrectItem.file_identifier = IncorrectItem.file_identifier;
                                CorrectItem.lcm_activity_followup_id = IncorrectItem.lcm_activity_followup_id;
                                CorrectItem.lcm_followup_id = IncorrectItem.lcm_followup_id;
                                CorrectItem.lcn_case_number = IncorrectItem.lcn_case_number;
                                //CorrectItem.lcn_report_fax_id = MaxId;
                                CorrectItem.referral_number = IncorrectItem.referral_number;
                                CorrectItem.reinsurer_fax_number_used = IncorrectItem.reinsurer_fax_number_used;
                                CorrectItem.reinsurer_id = IncorrectItem.reinsurer_id;
                                CorrectItem.tpa_fax_number_used = IncorrectItem.tpa_fax_number_used;
                                CorrectItem.tpa_id = IncorrectItem.tpa_id;
                                CorrectItem.user_id = IncorrectItem.user_id;

                                ItemSet = true;
                        //    }
                        //}
                    }
                }

                return ItemSet;

            }
            catch (Exception ex)
            {
                return ItemSet;
            }
        }


        private bool MergeMdReviewDeterminations(Guid CorrectMemberId, Guid IncorrectMember)
        {
            bool Merged = false;

            try
            {
                Guid IncorrectId = IncorrectMember;
                List<MdReviewDetermination> IncorrectMdReviewDeterminations = new List<MdReviewDetermination>();

                using (var db = new ICMS2DbContext())
                {
                    IncorrectMdReviewDeterminations = (from incmdrevdeter in db.DbmsMdReviewDetermination
                                               where incmdrevdeter.member_id == IncorrectId
                                               select incmdrevdeter).ToList();

                    if (IncorrectMdReviewDeterminations != null)
                    {
                        if (IncorrectMdReviewDeterminations.Count > 0)
                        {
                            foreach (MdReviewDetermination MdReviewDeterminationToMerge in IncorrectMdReviewDeterminations)
                            {
                                MdReviewDeterminationToMerge.member_id = CorrectMemberId;

                                db.Entry(MdReviewDeterminationToMerge).State = EntityState.Modified;
                                int UpdateReturnValue = db.SaveChanges();

                                if (!Merged)
                                {
                                    if (UpdateReturnValue > 0)
                                    {
                                        Merged = true;
                                    }
                                }
                            }
                        }
                        else
                        {
                            Merged = true;
                        }
                    }
                    else
                    {
                        Merged = true;
                    }
                }

                return Merged;

            }
            catch (Exception ex)
            {
                return Merged;
            }
        }


        private bool MergeMdReviewRequests(Guid CorrectMemberId, Guid IncorrectMember)
        {
            bool Merged = false;

            try
            {
                Guid IncorrectId = IncorrectMember;
                List<MdReviewRequest> IncorrectMdReviewRequests = new List<MdReviewRequest>();

                using (var db = new ICMS2DbContext())
                {
                    IncorrectMdReviewRequests = (from incmdrevreq in db.DbmsMdReviewRequest
                                                       where incmdrevreq.member_id == IncorrectId
                                                       select incmdrevreq).ToList();

                    if (IncorrectMdReviewRequests != null)
                    {
                        if (IncorrectMdReviewRequests.Count > 0)
                        {
                            foreach (MdReviewRequest MdReviewRequestToMerge in IncorrectMdReviewRequests)
                            {
                                MdReviewRequest AddItem = new MdReviewRequest();

                                if (SetCorrectMdReviewRequests(CorrectMemberId, ref AddItem, MdReviewRequestToMerge))
                                {
                                    MdReviewRequest DeleteItem = MdReviewRequestToMerge;

                                    db.DbmsMdReviewRequest.Attach(MdReviewRequestToMerge);
                                    db.DbmsMdReviewRequest.Remove(MdReviewRequestToMerge);

                                    int IncorrectItemDeleted = db.SaveChanges();

                                    if (IncorrectItemDeleted > 0)
                                    {
                                        db.DbmsMdReviewRequest.Add(AddItem);
                                        int CorrectItemAdded = db.SaveChanges();

                                        if (!Merged)
                                        {
                                            if (CorrectItemAdded > 0)
                                            {
                                                Merged = true;
                                            }
                                        }
                                    }
                                }

                                //MdReviewRequestToMerge.member_id = CorrectMemberId;

                                //db.Entry(MdReviewRequestToMerge).State = EntityState.Modified;
                                //int UpdateReturnValue = db.SaveChanges();

                                //if (!Merged)
                                //{
                                //    if (UpdateReturnValue > 0)
                                //    {
                                //        Merged = true;
                                //    }
                                //}
                            }
                        }
                        else
                        {
                            Merged = true;
                        }
                    }
                    else
                    {
                        Merged = true;
                    }
                }

                return Merged;

            }
            catch (Exception ex)
            {
                return Merged;
            }
        }

        private bool SetCorrectMdReviewRequests(Guid CorrectMemberId, ref MdReviewRequest CorrectItem, MdReviewRequest IncorrectItem)
        {
            bool ItemSet = false;

            try
            {
                if (CorrectMemberId != null)
                {
                    if (!CorrectMemberId.Equals(Guid.Empty))
                    {
                        CorrectItem.member_id = CorrectMemberId;

                        CorrectItem.actual_end_action_date = IncorrectItem.actual_end_action_date;
                        CorrectItem.actual_start_action_date = IncorrectItem.actual_start_action_date;
                        CorrectItem.assigned_to_system_user_id = IncorrectItem.assigned_to_system_user_id;
                        CorrectItem.cm_request = IncorrectItem.cm_request;
                        CorrectItem.cm_request_date = IncorrectItem.cm_request_date;
                        CorrectItem.completed = IncorrectItem.completed;
                        CorrectItem.completed_by_system_user_id = IncorrectItem.completed_by_system_user_id;
                        CorrectItem.completed_date = IncorrectItem.completed_date;
                        CorrectItem.creation_date = IncorrectItem.creation_date;
                        CorrectItem.date_entered = IncorrectItem.date_entered;
                        CorrectItem.disabled = IncorrectItem.disabled;
                        CorrectItem.end_action_date = IncorrectItem.end_action_date;
                        CorrectItem.entered_by_system_user_id = IncorrectItem.entered_by_system_user_id;
                        CorrectItem.md_review_appeal_note = IncorrectItem.md_review_appeal_note;
                        CorrectItem.md_review_request_id = IncorrectItem.md_review_request_id;
                        CorrectItem.record_date = IncorrectItem.record_date;
                        CorrectItem.referral_number = IncorrectItem.referral_number;
                        CorrectItem.start_action_date = IncorrectItem.start_action_date;
                        CorrectItem.taskoutcome_id = IncorrectItem.taskoutcome_id;
                        CorrectItem.task_id = IncorrectItem.task_id;
                        CorrectItem.task_note = IncorrectItem.task_note;

                        ItemSet = true;
                    }
                }

                return ItemSet;

            }
            catch (Exception ex)
            {
                return ItemSet;
            }
        }


        private bool MergeMemberMedsPharmacyFeeds(Guid CorrectMemberId, Guid IncorrectMember)
        {
            bool Merged = false;

            try
            {
                Guid IncorrectId = IncorrectMember;
                List<MemberMedsPharmacyFeed> IncorrectMemberMedsPharmacyFeeds = new List<MemberMedsPharmacyFeed>();

                using (var db = new ICMS2DbContext())
                {
                    IncorrectMemberMedsPharmacyFeeds = (from incmemmedpharfeed in db.DbmsMemberMedsPharmacyFeed
                                                 where incmemmedpharfeed.member_id == IncorrectId
                                                 select incmemmedpharfeed).ToList();

                    if (IncorrectMemberMedsPharmacyFeeds != null)
                    {
                        if (IncorrectMemberMedsPharmacyFeeds.Count > 0)
                        {
                            foreach (MemberMedsPharmacyFeed MemberMedsPharmacyFeedToMerge in IncorrectMemberMedsPharmacyFeeds)
                            {
                                MemberMedsPharmacyFeedToMerge.member_id = CorrectMemberId;

                                db.Entry(MemberMedsPharmacyFeedToMerge).State = EntityState.Modified;
                                int UpdateReturnValue = db.SaveChanges();

                                if (!Merged)
                                {
                                    if (UpdateReturnValue > 0)
                                    {
                                        Merged = true;
                                    }
                                }
                            }
                        }
                        else
                        {
                            Merged = true;
                        }
                    }
                    else
                    {
                        Merged = true;
                    }
                }

                return Merged;

            }
            catch (Exception ex)
            {
                return Merged;
            }
        }


        private bool MergeMemberPcps(Guid CorrectMemberId, Guid IncorrectMember)
        {
            bool Merged = false;

            try
            {
                Guid IncorrectId = IncorrectMember;
                List<MemberPcp> IncorrectMemberPcps = new List<MemberPcp>();

                using (var db = new ICMS2DbContext())
                {
                    IncorrectMemberPcps = (from incmempcp in db.DbmsMemberPcp
                                                        where incmempcp.member_id == IncorrectId
                                                        select incmempcp).ToList();

                    if (IncorrectMemberPcps != null)
                    {
                        if (IncorrectMemberPcps.Count > 0)
                        {
                            foreach (MemberPcp MemberPcpToMerge in IncorrectMemberPcps)
                            {
                                MemberPcp AddItem = new MemberPcp();

                                if (SetCorrectMemberPcps(CorrectMemberId, ref AddItem, MemberPcpToMerge))
                                {
                                    MemberPcp DeleteItem = MemberPcpToMerge;

                                    db.DbmsMemberPcp.Attach(MemberPcpToMerge);
                                    db.DbmsMemberPcp.Remove(MemberPcpToMerge);

                                    int IncorrectItemDeleted = db.SaveChanges();

                                    if (IncorrectItemDeleted > 0)
                                    {
                                        db.DbmsMemberPcp.Add(AddItem);
                                        int CorrectItemAdded = db.SaveChanges();

                                        if (!Merged)
                                        {
                                            if (CorrectItemAdded > 0)
                                            {
                                                Merged = true;
                                            }
                                        }
                                    }
                                }

                                //MemberPcpToMerge.member_id = CorrectMemberId;

                                //db.Entry(MemberPcpToMerge).State = EntityState.Modified;
                                //int UpdateReturnValue = db.SaveChanges();

                                //if (!Merged)
                                //{
                                //    if (UpdateReturnValue > 0)
                                //    {
                                //        Merged = true;
                                //    }
                                //}
                            }
                        }
                        else
                        {
                            Merged = true;
                        }
                    }
                    else
                    {
                        Merged = true;
                    }
                }

                return Merged;

            }
            catch (Exception ex)
            {
                return Merged;
            }
        }

        private bool SetCorrectMemberPcps(Guid CorrectMemberId, ref MemberPcp CorrectItem, MemberPcp IncorrectItem)
        {
            bool ItemSet = false;

            try
            {
                if (CorrectMemberId != null)
                {
                    if (!CorrectMemberId.Equals(Guid.Empty))
                    {
                        CorrectItem.member_id = CorrectMemberId;

                        CorrectItem.pcp_eff_date = IncorrectItem.pcp_eff_date;
                        CorrectItem.pcp_id = IncorrectItem.pcp_id;
                        CorrectItem.pcp_term_date = IncorrectItem.pcp_term_date;

                        ItemSet = true;
                    }
                }

                return ItemSet;

            }
            catch (Exception ex)
            {
                return ItemSet;
            }
        }


        private bool MergeMemberNotesSummaries(Guid CorrectMemberId, Guid IncorrectMember)
        {
            bool Merged = false;

            try
            {
                Guid IncorrectId = IncorrectMember;
                List<MemberNotesSummary> IncorrectMemberNotesSummaries = new List<MemberNotesSummary>();

                using (var db = new ICMS2DbContext())
                {
                    IncorrectMemberNotesSummaries = (from incmemnotesum in db.DbmsMemberNotesSummary
                                           where incmemnotesum.member_id == IncorrectId
                                           select incmemnotesum).ToList();

                    if (IncorrectMemberNotesSummaries != null)
                    {
                        if (IncorrectMemberNotesSummaries.Count > 0)
                        {
                            foreach (MemberNotesSummary MemberNoteSummaryToMerge in IncorrectMemberNotesSummaries)
                            {
                                MemberNoteSummaryToMerge.member_id = CorrectMemberId;

                                db.Entry(MemberNoteSummaryToMerge).State = EntityState.Modified;
                                int UpdateReturnValue = db.SaveChanges();

                                if (!Merged)
                                {
                                    if (UpdateReturnValue > 0)
                                    {
                                        Merged = true;
                                    }
                                }
                            }
                        }
                        else
                        {
                            Merged = true;
                        }
                    }
                    else
                    {
                        Merged = true;
                    }
                }

                return Merged;

            }
            catch (Exception ex)
            {
                return Merged;
            }
        }

        private bool MergeAcountsReceivablePayments(Guid CorrectMemberId, Guid IncorrectMember)
        {
            bool Merged = false;

            try
            {
                Guid IncorrectId = IncorrectMember;
                List<AccountsReceivablePayments> IncorrectAccountReceivablePayments = new List<AccountsReceivablePayments>();

                using (var db = new ICMS2DbContext())
                {
                    IncorrectAccountReceivablePayments = (from incaccrecpay in db.DbmsAccountsReceivablePayments
                                                     where incaccrecpay.member_id == IncorrectId
                                                     select incaccrecpay).ToList();

                    if (IncorrectAccountReceivablePayments != null)
                    {
                        if (IncorrectAccountReceivablePayments.Count > 0)
                        {
                            foreach (AccountsReceivablePayments AccountsReceivablePaymentToMerge in IncorrectAccountReceivablePayments)
                            {
                                AccountsReceivablePaymentToMerge.member_id = CorrectMemberId;

                                db.Entry(AccountsReceivablePaymentToMerge).State = EntityState.Modified;
                                int UpdateReturnValue = db.SaveChanges();

                                if (!Merged)
                                {
                                    if (UpdateReturnValue > 0)
                                    {
                                        Merged = true;
                                    }
                                }
                            }
                        }
                        else
                        {
                            Merged = true;
                        }
                    }
                    else
                    {
                        Merged = true;
                    }
                }

                return Merged;

            }
            catch (Exception ex)
            {
                return Merged;
            }
        }

        private bool MergeBillingUpdateHistoryLog(Guid CorrectMemberId, Guid IncorrectMember)
        {
            bool Merged = false;

            try
            {
                Guid IncorrectId = IncorrectMember;
                List<BillingUpdateHistoryLog> IncorrectBillingUpdateHistoryLogs = new List<BillingUpdateHistoryLog>();

                using (var db = new ICMS2DbContext())
                {
                    IncorrectBillingUpdateHistoryLogs = (from incbillupthistlog in db.DbmsBillingUpdateHistoryLog
                                                          where incbillupthistlog.member_id == IncorrectId
                                                          select incbillupthistlog).ToList();

                    if (IncorrectBillingUpdateHistoryLogs != null)
                    {
                        if (IncorrectBillingUpdateHistoryLogs.Count > 0)
                        {
                            foreach (BillingUpdateHistoryLog BillingUpdateHistoryLogToMerge in IncorrectBillingUpdateHistoryLogs)
                            {
                                BillingUpdateHistoryLogToMerge.member_id = CorrectMemberId;

                                db.Entry(BillingUpdateHistoryLogToMerge).State = EntityState.Modified;
                                int UpdateReturnValue = db.SaveChanges();

                                if (!Merged)
                                {
                                    if (UpdateReturnValue > 0)
                                    {
                                        Merged = true;
                                    }
                                }
                            }
                        }
                        else
                        {
                            Merged = true;
                        }
                    }
                    else
                    {
                        Merged = true;
                    }
                }

                return Merged;

            }
            catch (Exception ex)
            {
                return Merged;
            }
        }


        private bool MergeCarePlanNotesAttachments(Guid CorrectMemberId, Guid IncorrectMember)
        {
            bool Merged = false;

            try
            {
                Guid IncorrectId = IncorrectMember;
                List<CarePlanNotesAttachment> IncorrectCarePlanNotesAttachments = new List<CarePlanNotesAttachment>();

                using (var db = new ICMS2DbContext())
                {
                    IncorrectCarePlanNotesAttachments = (from inccareplnnotattach in db.DbmsCarePlanNotesAttachment
                                                         where inccareplnnotattach.member_id == IncorrectId
                                                         select inccareplnnotattach).ToList();

                    if (IncorrectCarePlanNotesAttachments != null)
                    {
                        if (IncorrectCarePlanNotesAttachments.Count > 0)
                        {
                            foreach (CarePlanNotesAttachment CarePlanNotesAttachmentToMerge in IncorrectCarePlanNotesAttachments)
                            {
                                CarePlanNotesAttachment AddItem = new CarePlanNotesAttachment();

                                if (SetCorrectCarePlanNotesAttachments(CorrectMemberId, ref AddItem, CarePlanNotesAttachmentToMerge))
                                {
                                    CarePlanNotesAttachment DeleteItem = CarePlanNotesAttachmentToMerge;

                                    db.DbmsCarePlanNotesAttachment.Attach(CarePlanNotesAttachmentToMerge);
                                    db.DbmsCarePlanNotesAttachment.Remove(CarePlanNotesAttachmentToMerge);

                                    int IncorrectItemDeleted = db.SaveChanges();

                                    if (IncorrectItemDeleted > 0)
                                    {
                                        db.DbmsCarePlanNotesAttachment.Add(AddItem);
                                        int CorrectItemAdded = db.SaveChanges();

                                        if (!Merged)
                                        {
                                            if (CorrectItemAdded > 0)
                                            {
                                                Merged = true;
                                            }
                                        }
                                    }
                                }

                                //CarePlanNotesAttachmentToMerge.member_id = CorrectMemberId;

                                //db.Entry(CarePlanNotesAttachmentToMerge).State = EntityState.Modified;
                                //int UpdateReturnValue = db.SaveChanges();

                                //if (!Merged)
                                //{
                                //    if (UpdateReturnValue > 0)
                                //    {
                                //        Merged = true;
                                //    }
                                //}
                            }
                        }
                        else
                        {
                            Merged = true;
                        }
                    }
                    else
                    {
                        Merged = true;
                    }
                }

                return Merged;

            }
            catch (Exception ex)
            {
                return Merged;
            }
        }
        
        private bool SetCorrectCarePlanNotesAttachments(Guid CorrectMemberId, ref CarePlanNotesAttachment CorrectItem, CarePlanNotesAttachment IncorrectItem)
        {
            bool ItemSet = false;

            try
            {
                if (CorrectMemberId != null)
                {
                    if (!CorrectMemberId.Equals(Guid.Empty))
                    {
                        CorrectItem.member_id = CorrectMemberId;

                        CorrectItem.creation_user_id = IncorrectItem.creation_user_id;
                        CorrectItem.file_blob = IncorrectItem.file_blob;
                        CorrectItem.file_identifier = IncorrectItem.file_identifier;
                        CorrectItem.internal_patient = IncorrectItem.internal_patient;
                        CorrectItem.record_date = IncorrectItem.record_date;

                        ItemSet = true;
                    }
                }

                return ItemSet;

            }
            catch (Exception ex)
            {
                return ItemSet;
            }
        }


        private bool MergeClinicalRequestHistories(Guid CorrectMemberId, Guid IncorrectMember)
        {
            bool Merged = false;

            try
            {
                Guid IncorrectId = IncorrectMember;
                List<ClinicalRequestHistory> IncorrectClinicalNoteHistories = new List<ClinicalRequestHistory>();

                using (var db = new ICMS2DbContext())
                {
                    IncorrectClinicalNoteHistories = (from incclincreqhist in db.DbmsClinicalRequestHistory
                                                         where incclincreqhist.member_id == IncorrectId
                                                         select incclincreqhist).ToList();

                    if (IncorrectClinicalNoteHistories != null)
                    {
                        if (IncorrectClinicalNoteHistories.Count > 0)
                        {
                            foreach (ClinicalRequestHistory ClinicalRequestHistoryToMerge in IncorrectClinicalNoteHistories)
                            {
                                ClinicalRequestHistoryToMerge.member_id = CorrectMemberId;

                                db.Entry(ClinicalRequestHistoryToMerge).State = EntityState.Modified;
                                int UpdateReturnValue = db.SaveChanges();

                                if (!Merged)
                                {
                                    if (UpdateReturnValue > 0)
                                    {
                                        Merged = true;
                                    }
                                }
                            }
                        }
                        else
                        {
                            Merged = true;
                        }
                    }
                    else
                    {
                        Merged = true;
                    }
                }

                return Merged;

            }
            catch (Exception ex)
            {
                return Merged;
            }
        }

        private bool MergeClinicalRequestProviders(Guid CorrectMemberId, Guid IncorrectMember)
        {
            bool Merged = false;

            try
            {
                Guid IncorrectId = IncorrectMember;
                List<ClinicalRequestProviders> IncorrectClinicalRequestProviders = new List<ClinicalRequestProviders>();

                using (var db = new ICMS2DbContext())
                {
                    IncorrectClinicalRequestProviders = (from inc in db.DbmsClinicalRequestProviders
                                                      where inc.member_id == IncorrectId
                                                      select inc).ToList();

                    if (IncorrectClinicalRequestProviders != null)
                    {
                        if (IncorrectClinicalRequestProviders.Count > 0)
                        {
                            foreach (ClinicalRequestProviders ClinicalRequestProviderToMerge in IncorrectClinicalRequestProviders)
                            {
                                ClinicalRequestProviderToMerge.member_id = CorrectMemberId;

                                db.Entry(ClinicalRequestProviderToMerge).State = EntityState.Modified;
                                int UpdateReturnValue = db.SaveChanges();

                                if (!Merged)
                                {
                                    if (UpdateReturnValue > 0)
                                    {
                                        Merged = true;
                                    }
                                }
                            }
                        }
                        else
                        {
                            Merged = true;
                        }
                    }
                    else
                    {
                        Merged = true;
                    }
                }

                return Merged;

            }
            catch (Exception ex)
            {
                return Merged;
            }
        }


        private bool MergeCmMemberNotes(Guid CorrectMemberId, Guid IncorrectMember)
        {
            bool Merged = false;

            try
            {
                Guid IncorrectId = IncorrectMember;
                List<CmMemberNote> IncorrectData = new List<CmMemberNote>();

                using (var db = new ICMS2DbContext())
                {
                    IncorrectData = (from inc in db.DbmsCmMemberNote
                                                         where inc.member_id == IncorrectId
                                                         select inc).ToList();

                    if (IncorrectData != null)
                    {
                        if (IncorrectData.Count > 0)
                        {
                            foreach (CmMemberNote DataToMerge in IncorrectData)
                            {
                                CmMemberNote AddItem = new CmMemberNote();

                                if (SetCorrectCmMemberNotes(CorrectMemberId, ref AddItem, DataToMerge))
                                {
                                    CmMemberNote DeleteItem = DataToMerge;

                                    db.DbmsCmMemberNote.Attach(DataToMerge);
                                    db.DbmsCmMemberNote.Remove(DataToMerge);

                                    int IncorrectItemDeleted = db.SaveChanges();

                                    if (IncorrectItemDeleted > 0)
                                    {
                                        db.DbmsCmMemberNote.Add(AddItem);
                                        int CorrectItemAdded = db.SaveChanges();

                                        if (!Merged)
                                        {
                                            if (CorrectItemAdded > 0)
                                            {
                                                Merged = true;
                                            }
                                        }
                                    }
                                }

                                //DataToMerge.member_id = CorrectMemberId;

                                //db.Entry(DataToMerge).State = EntityState.Modified;
                                //int UpdateReturnValue = db.SaveChanges();

                                //if (!Merged)
                                //{
                                //    if (UpdateReturnValue > 0)
                                //    {
                                //        Merged = true;
                                //    }
                                //}
                            }
                        }
                        else
                        {
                            Merged = true;
                        }
                    }
                    else
                    {
                        Merged = true;
                    }
                }

                return Merged;

            }
            catch (Exception ex)
            {
                return Merged;
            }
        }

        private bool SetCorrectCmMemberNotes(Guid CorrectMemberId, ref CmMemberNote CorrectItem, CmMemberNote IncorrectItem)
        {
            bool ItemSet = false;

            try
            {
                if (CorrectMemberId != null)
                {
                    if (!CorrectMemberId.Equals(Guid.Empty))
                    {
                        CorrectItem.member_id = CorrectMemberId;

                        CorrectItem.created_user_id = IncorrectItem.created_user_id;
                        CorrectItem.creation_date = IncorrectItem.creation_date;
                        CorrectItem.evaluation_text = IncorrectItem.evaluation_text;
                        CorrectItem.record_date = IncorrectItem.record_date;

                        ItemSet = true;
                    }
                }

                return ItemSet;

            }
            catch (Exception ex)
            {
                return ItemSet;
            }
        }


        private bool MergeCodeRemovalItems(Guid CorrectMemberId, Guid IncorrectMember)
        {
            bool Merged = false;

            try
            {
                Guid IncorrectId = IncorrectMember;
                List<CodeRemovalItems> IncorrectData = new List<CodeRemovalItems>();

                using (var db = new ICMS2DbContext())
                {
                    IncorrectData = (from inc in db.DbmsCodeRemovalItems
                                     where inc.member_id == IncorrectId
                                     select inc).ToList();

                    if (IncorrectData != null)
                    {
                        if (IncorrectData.Count > 0)
                        {
                            foreach (CodeRemovalItems DataToMerge in IncorrectData)
                            {
                                DataToMerge.member_id = CorrectMemberId;

                                db.Entry(DataToMerge).State = EntityState.Modified;
                                int UpdateReturnValue = db.SaveChanges();

                                if (!Merged)
                                {
                                    if (UpdateReturnValue > 0)
                                    {
                                        Merged = true;
                                    }
                                }
                            }
                        }
                        else
                        {
                            Merged = true;
                        }
                    }
                    else
                    {
                        Merged = true;
                    }
                }

                return Merged;

            }
            catch (Exception ex)
            {
                return Merged;
            }
        }

        private bool MergeDependentMemberUpdateReferences(Guid CorrectMemberId, Guid IncorrectMember)
        {
            bool Merged = false;

            try
            {
                Guid IncorrectId = IncorrectMember;
                List<DependentMemberUpdateReference> IncorrectData = new List<DependentMemberUpdateReference>();

                using (var db = new ICMS2DbContext())
                {
                    IncorrectData = (from inc in db.DbmsDependentMemberUpdateReference
                                     where inc.member_id == IncorrectId
                                     select inc).ToList();

                    if (IncorrectData != null)
                    {
                        if (IncorrectData.Count > 0)
                        {
                            foreach (DependentMemberUpdateReference DataToMerge in IncorrectData)
                            {
                                DataToMerge.member_id = CorrectMemberId;

                                db.Entry(DataToMerge).State = EntityState.Modified;
                                int UpdateReturnValue = db.SaveChanges();

                                if (!Merged)
                                {
                                    if (UpdateReturnValue > 0)
                                    {
                                        Merged = true;
                                    }
                                }
                            }
                        }
                        else
                        {
                            Merged = true;
                        }
                    }
                    else
                    {
                        Merged = true;
                    }
                }

                return Merged;

            }
            catch (Exception ex)
            {
                return Merged;
            }
        }


        private bool MergeDiseaseManagementNotesAttachments(Guid CorrectMemberId, Guid IncorrectMember)
        {
            bool Merged = false;

            try
            {
                Guid IncorrectId = IncorrectMember;
                List<DiseaseManagementNotesAttachment> IncorrectData = new List<DiseaseManagementNotesAttachment>();

                using (var db = new ICMS2DbContext())
                {
                    IncorrectData = (from inc in db.DbmsDiseaseManagementNotesAttachment
                                     where inc.member_id == IncorrectId
                                     select inc).ToList();

                    if (IncorrectData != null)
                    {
                        if (IncorrectData.Count > 0)
                        {
                            foreach (DiseaseManagementNotesAttachment DataToMerge in IncorrectData)
                            {
                                DiseaseManagementNotesAttachment AddItem = new DiseaseManagementNotesAttachment();

                                if (SetCorrectDiseaseManagementNotesAttachments(CorrectMemberId, ref AddItem, DataToMerge))
                                {
                                    DiseaseManagementNotesAttachment DeleteItem = DataToMerge;

                                    db.DbmsDiseaseManagementNotesAttachment.Attach(DataToMerge);
                                    db.DbmsDiseaseManagementNotesAttachment.Remove(DataToMerge);

                                    int IncorrectItemDeleted = db.SaveChanges();

                                    if (IncorrectItemDeleted > 0)
                                    {
                                        db.DbmsDiseaseManagementNotesAttachment.Add(AddItem);
                                        int CorrectItemAdded = db.SaveChanges();

                                        if (!Merged)
                                        {
                                            if (CorrectItemAdded > 0)
                                            {
                                                Merged = true;
                                            }
                                        }
                                    }
                                }

                                //DataToMerge.member_id = CorrectMemberId;

                                //db.Entry(DataToMerge).State = EntityState.Modified;
                                //int UpdateReturnValue = db.SaveChanges();

                                //if (!Merged)
                                //{
                                //    if (UpdateReturnValue > 0)
                                //    {
                                //        Merged = true;
                                //    }
                                //}
                            }
                        }
                        else
                        {
                            Merged = true;
                        }
                    }
                    else
                    {
                        Merged = true;
                    }
                }

                return Merged;

            }
            catch (Exception ex)
            {
                return Merged;
            }
        }

        private bool SetCorrectDiseaseManagementNotesAttachments(Guid CorrectMemberId, ref DiseaseManagementNotesAttachment CorrectItem, DiseaseManagementNotesAttachment IncorrectItem)
        {
            bool ItemSet = false;

            try
            {
                if (CorrectMemberId != null)
                {
                    if (!CorrectMemberId.Equals(Guid.Empty))
                    {
                        CorrectItem.member_id = CorrectMemberId;

                        CorrectItem.creation_user_id = IncorrectItem.creation_user_id;
                        CorrectItem.file_blob = IncorrectItem.file_blob;
                        CorrectItem.file_identifier = IncorrectItem.file_identifier;
                        CorrectItem.internal_patient = IncorrectItem.internal_patient;
                        CorrectItem.record_date = IncorrectItem.record_date;

                        ItemSet = true;
                    }
                }

                return ItemSet;

            }
            catch (Exception ex)
            {
                return ItemSet;
            }
        }


        private bool MergeDmMemberSavings(Guid CorrectMemberId, Guid IncorrectMember)
        {
            bool Merged = false;

            try
            {
                Guid IncorrectId = IncorrectMember;
                List<DmMemberSavings> IncorrectData = new List<DmMemberSavings>();

                using (var db = new ICMS2DbContext())
                {
                    IncorrectData = (from inc in db.DbmsDmMemberSavings
                                     where inc.member_id == IncorrectId
                                     select inc).ToList();

                    if (IncorrectData != null)
                    {
                        if (IncorrectData.Count > 0)
                        {
                            foreach (DmMemberSavings DataToMerge in IncorrectData)
                            {
                                DataToMerge.member_id = CorrectMemberId;

                                db.Entry(DataToMerge).State = EntityState.Modified;
                                int UpdateReturnValue = db.SaveChanges();

                                if (!Merged)
                                {
                                    if (UpdateReturnValue > 0)
                                    {
                                        Merged = true;
                                    }
                                }
                            }
                        }
                        else
                        {
                            Merged = true;
                        }
                    }
                    else
                    {
                        Merged = true;
                    }
                }

                return Merged;

            }
            catch (Exception ex)
            {
                return Merged;
            }
        }

        private bool MergeLcmReportQaNotes(Guid CorrectMemberId, Guid IncorrectMember)
        {
            bool Merged = false;

            try
            {
                Guid IncorrectId = IncorrectMember;
                List<LcmReportQaNotes> IncorrectData = new List<LcmReportQaNotes>();

                using (var db = new ICMS2DbContext())
                {
                    IncorrectData = (from inc in db.DbmsLcmReportQaNotes
                                     where inc.member_id == IncorrectId
                                     select inc).ToList();

                    if (IncorrectData != null)
                    {
                        if (IncorrectData.Count > 0)
                        {
                            foreach (LcmReportQaNotes DataToMerge in IncorrectData)
                            {
                                DataToMerge.member_id = CorrectMemberId;

                                db.Entry(DataToMerge).State = EntityState.Modified;
                                int UpdateReturnValue = db.SaveChanges();

                                if (!Merged)
                                {
                                    if (UpdateReturnValue > 0)
                                    {
                                        Merged = true;
                                    }
                                }
                            }
                        }
                        else
                        {
                            Merged = true;
                        }
                    }
                    else
                    {
                        Merged = true;
                    }
                }

                return Merged;

            }
            catch (Exception ex)
            {
                return Merged;
            }
        }


        private bool MergeLetterReportFaxes(Guid CorrectMemberId, Guid IncorrectMember)
        {
            bool Merged = false;

            try
            {
                Guid IncorrectId = IncorrectMember;
                List<LetterReportFax> IncorrectData = new List<LetterReportFax>();

                using (var db = new ICMS2DbContext())
                {
                    IncorrectData = (from inc in db.DbmsLetterReportFax
                                     where inc.member_id == IncorrectId
                                     select inc).ToList();

                    if (IncorrectData != null)
                    {
                        if (IncorrectData.Count > 0)
                        {
                            foreach (LetterReportFax DataToMerge in IncorrectData)
                            {
                                LetterReportFax AddItem = new LetterReportFax();

                                if (SetCorrectLetterReportFaxes(CorrectMemberId, ref AddItem, DataToMerge))
                                {
                                    LetterReportFax DeleteItem = DataToMerge;

                                    db.DbmsLetterReportFax.Attach(DataToMerge);
                                    db.DbmsLetterReportFax.Remove(DataToMerge);

                                    int IncorrectItemDeleted = db.SaveChanges();

                                    if (IncorrectItemDeleted > 0)
                                    {
                                        db.DbmsLetterReportFax.Add(AddItem);
                                        int CorrectItemAdded = db.SaveChanges();

                                        if (!Merged)
                                        {
                                            if (CorrectItemAdded > 0)
                                            {
                                                Merged = true;
                                            }
                                        }
                                    }
                                }

                                //DataToMerge.member_id = CorrectMemberId;

                                //db.Entry(DataToMerge).State = EntityState.Modified;
                                //int UpdateReturnValue = db.SaveChanges();

                                //if (!Merged)
                                //{
                                //    if (UpdateReturnValue > 0)
                                //    {
                                //        Merged = true;
                                //    }
                                //}
                            }
                        }
                        else
                        {
                            Merged = true;
                        }
                    }
                    else
                    {
                        Merged = true;
                    }
                }

                return Merged;

            }
            catch (Exception ex)
            {
                return Merged;
            }
        }

        private bool SetCorrectLetterReportFaxes(Guid CorrectMemberId, ref LetterReportFax CorrectItem, LetterReportFax IncorrectItem)
        {
            bool ItemSet = false;

            try
            {
                if (CorrectMemberId != null)
                {
                    if (!CorrectMemberId.Equals(Guid.Empty))
                    {
                        CorrectItem.member_id = CorrectMemberId;

                        CorrectItem.creation_date = IncorrectItem.creation_date;
                        CorrectItem.employer_id = IncorrectItem.employer_id;
                        CorrectItem.fax_date = IncorrectItem.fax_date;
                        CorrectItem.fax_handle = IncorrectItem.fax_handle;
                        CorrectItem.file_blob = IncorrectItem.file_blob;
                        CorrectItem.file_identifier = IncorrectItem.file_identifier;
                        CorrectItem.letter_report_fax_id = IncorrectItem.letter_report_fax_id;
                        CorrectItem.letter_report_name = IncorrectItem.letter_report_name;
                        CorrectItem.referral_number = IncorrectItem.referral_number;
                        CorrectItem.reinsurer_fax_number_used = IncorrectItem.reinsurer_fax_number_used;
                        CorrectItem.reinsurer_id = IncorrectItem.reinsurer_id;
                        CorrectItem.tpa_fax_number_used = IncorrectItem.tpa_fax_number_used;
                        CorrectItem.tpa_id = IncorrectItem.tpa_id;
                        CorrectItem.user_id = IncorrectItem.user_id;

                        ItemSet = true;
                    }
                }

                return ItemSet;

            }
            catch (Exception ex)
            {
                return ItemSet;
            }
        }


        private bool MergeMdReviewFollowups(Guid CorrectMemberId, Guid IncorrectMember)
        {
            bool Merged = false;

            try
            {
                Guid IncorrectId = IncorrectMember;
                List<MdReviewFollowup> IncorrectData = new List<MdReviewFollowup>();

                using (var db = new ICMS2DbContext())
                {
                    IncorrectData = (from inc in db.DbmsMdReviewFollowup
                                     where inc.member_id == IncorrectId
                                     select inc).ToList();

                    if (IncorrectData != null)
                    {
                        if (IncorrectData.Count > 0)
                        {
                            foreach (MdReviewFollowup DataToMerge in IncorrectData)
                            {
                                MdReviewFollowup AddItem = new MdReviewFollowup();

                                if (SetCorrectMdReviewFollowups(CorrectMemberId, ref AddItem, DataToMerge))
                                {
                                    MdReviewFollowup DeleteItem = DataToMerge;

                                    db.DbmsMdReviewFollowup.Attach(DataToMerge);
                                    db.DbmsMdReviewFollowup.Remove(DataToMerge);

                                    int IncorrectItemDeleted = db.SaveChanges();

                                    if (IncorrectItemDeleted > 0)
                                    {
                                        db.DbmsMdReviewFollowup.Add(AddItem);
                                        int CorrectItemAdded = db.SaveChanges();

                                        if (!Merged)
                                        {
                                            if (CorrectItemAdded > 0)
                                            {
                                                Merged = true;
                                            }
                                        }
                                    }
                                }

                                //DataToMerge.member_id = CorrectMemberId;

                                //db.Entry(DataToMerge).State = EntityState.Modified;
                                //int UpdateReturnValue = db.SaveChanges();

                                //if (!Merged)
                                //{
                                //    if (UpdateReturnValue > 0)
                                //    {
                                //        Merged = true;
                                //    }
                                //}
                            }
                        }
                        else
                        {
                            Merged = true;
                        }
                    }
                    else
                    {
                        Merged = true;
                    }
                }

                return Merged;

            }
            catch (Exception ex)
            {
                return Merged;
            }
        }

        private bool SetCorrectMdReviewFollowups(Guid CorrectMemberId, ref MdReviewFollowup CorrectItem, MdReviewFollowup IncorrectItem)
        {
            bool ItemSet = false;

            try
            {
                if (CorrectMemberId != null)
                {
                    if (!CorrectMemberId.Equals(Guid.Empty))
                    {
                        CorrectItem.member_id = CorrectMemberId;

                        CorrectItem.actual_end_action_date = IncorrectItem.actual_end_action_date;
                        CorrectItem.actual_start_action_date = IncorrectItem.actual_start_action_date;
                        CorrectItem.assigned_to_system_user_id = IncorrectItem.assigned_to_system_user_id;
                        CorrectItem.cm_request = IncorrectItem.cm_request;
                        CorrectItem.cm_request_date = IncorrectItem.cm_request_date;
                        CorrectItem.completed = IncorrectItem.completed;
                        CorrectItem.completed_by_system_user_id = IncorrectItem.completed_by_system_user_id;
                        CorrectItem.completed_date = IncorrectItem.completed_date;
                        CorrectItem.creation_date = IncorrectItem.creation_date;
                        CorrectItem.date_entered = IncorrectItem.date_entered;
                        CorrectItem.disabled = IncorrectItem.disabled;
                        CorrectItem.end_action_date = IncorrectItem.end_action_date;
                        CorrectItem.entered_by_system_user_id = IncorrectItem.entered_by_system_user_id;
                        CorrectItem.md_review_appeal_note = IncorrectItem.md_review_appeal_note;
                        CorrectItem.md_review_followup_id = IncorrectItem.md_review_followup_id;
                        CorrectItem.md_review_request_id = IncorrectItem.md_review_request_id;
                        CorrectItem.record_date = IncorrectItem.record_date;
                        CorrectItem.referral_number = IncorrectItem.referral_number;
                        CorrectItem.start_action_date = IncorrectItem.start_action_date;
                        CorrectItem.taskoutcome_id = IncorrectItem.taskoutcome_id;
                        CorrectItem.task_id = IncorrectItem.task_id;
                        CorrectItem.task_note = IncorrectItem.task_note;

                        ItemSet = true;
                    }
                }

                return ItemSet;

            }
            catch (Exception ex)
            {
                return ItemSet;
            }
        }


        private bool MergeMdReviewQuestions(Guid CorrectMemberId, Guid IncorrectMember)
        {
            bool Merged = false;

            try
            {
                Guid IncorrectId = IncorrectMember;
                List<MdReviewQuestion> IncorrectData = new List<MdReviewQuestion>();

                using (var db = new ICMS2DbContext())
                {
                    IncorrectData = (from inc in db.DbmsMdReviewQuestion
                                     where inc.member_id == IncorrectId
                                     select inc).ToList();

                    if (IncorrectData != null)
                    {
                        if (IncorrectData.Count > 0)
                        {
                            foreach (MdReviewQuestion DataToMerge in IncorrectData)
                            {
                                DataToMerge.member_id = CorrectMemberId;

                                db.Entry(DataToMerge).State = EntityState.Modified;
                                int UpdateReturnValue = db.SaveChanges();

                                if (!Merged)
                                {
                                    if (UpdateReturnValue > 0)
                                    {
                                        Merged = true;
                                    }
                                }
                            }
                        }
                        else
                        {
                            Merged = true;
                        }
                    }
                    else
                    {
                        Merged = true;
                    }
                }

                return Merged;

            }
            catch (Exception ex)
            {
                return Merged;
            }
        }

        private bool MergeMemberCareCoordinationCalls(Guid CorrectMemberId, Guid IncorrectMember)
        {
            bool Merged = false;

            try
            {
                Guid IncorrectId = IncorrectMember;
                List<MemberCareCoordinationCall> IncorrectData = new List<MemberCareCoordinationCall>();

                using (var db = new ICMS2DbContext())
                {
                    IncorrectData = (from inc in db.DbmsMemberCareCoordinationCall
                                     where inc.member_id == IncorrectId
                                     select inc).ToList();

                    if (IncorrectData != null)
                    {
                        if (IncorrectData.Count > 0)
                        {
                            foreach (MemberCareCoordinationCall DataToMerge in IncorrectData)
                            {
                                DataToMerge.member_id = CorrectMemberId;

                                db.Entry(DataToMerge).State = EntityState.Modified;
                                int UpdateReturnValue = db.SaveChanges();

                                if (!Merged)
                                {
                                    if (UpdateReturnValue > 0)
                                    {
                                        Merged = true;
                                    }
                                }
                            }
                        }
                        else
                        {
                            Merged = true;
                        }
                    }
                    else
                    {
                        Merged = true;
                    }
                }

                return Merged;

            }
            catch (Exception ex)
            {
                return Merged;
            }
        }

        private bool MergeMemberCareCoordinationCallSavingsSavings(Guid CorrectMemberId, Guid IncorrectMember)
        {
            bool Merged = false;

            try
            {
                Guid IncorrectId = IncorrectMember;
                List<MemberCareCoordinationCallSavings> IncorrectData = new List<MemberCareCoordinationCallSavings>();

                using (var db = new ICMS2DbContext())
                {
                    IncorrectData = (from inc in db.DbmsMemberCareCoordinationCallSavings
                                     where inc.member_id == IncorrectId
                                     select inc).ToList();

                    if (IncorrectData != null)
                    {
                        if (IncorrectData.Count > 0)
                        {
                            foreach (MemberCareCoordinationCallSavings DataToMerge in IncorrectData)
                            {
                                DataToMerge.member_id = CorrectMemberId;

                                db.Entry(DataToMerge).State = EntityState.Modified;
                                int UpdateReturnValue = db.SaveChanges();

                                if (!Merged)
                                {
                                    if (UpdateReturnValue > 0)
                                    {
                                        Merged = true;
                                    }
                                }
                            }
                        }
                        else
                        {
                            Merged = true;
                        }
                    }
                    else
                    {
                        Merged = true;
                    }
                }

                return Merged;

            }
            catch (Exception ex)
            {
                return Merged;
            }
        }

        private bool MergeMemberClaimDiagnosis(Guid CorrectMemberId, Guid IncorrectMember)
        {
            bool Merged = false;

            try
            {
                Guid IncorrectId = IncorrectMember;
                List<MemberClaimsDiagnosis> IncorrectData = new List<MemberClaimsDiagnosis>();

                using (var db = new ICMS2DbContext())
                {
                    IncorrectData = (from inc in db.DbmsMemberClaimsDiagnosis
                                     where inc.member_id == IncorrectId
                                     select inc).ToList();

                    if (IncorrectData != null)
                    {
                        if (IncorrectData.Count > 0)
                        {
                            foreach (MemberClaimsDiagnosis DataToMerge in IncorrectData)
                            {
                                DataToMerge.member_id = CorrectMemberId;

                                db.Entry(DataToMerge).State = EntityState.Modified;
                                int UpdateReturnValue = db.SaveChanges();

                                if (!Merged)
                                {
                                    if (UpdateReturnValue > 0)
                                    {
                                        Merged = true;
                                    }
                                }
                            }
                        }
                        else
                        {
                            Merged = true;
                        }
                    }
                    else
                    {
                        Merged = true;
                    }
                }

                return Merged;

            }
            catch (Exception ex)
            {
                return Merged;
            }
        }

        private bool MergeMemberConditionAcuities(Guid CorrectMemberId, Guid IncorrectMember)
        {
            bool Merged = false;

            try
            {
                Guid IncorrectId = IncorrectMember;
                List<MemberConditionAcuity> IncorrectData = new List<MemberConditionAcuity>();

                using (var db = new ICMS2DbContext())
                {
                    IncorrectData = (from inc in db.DbmsMemberConditionAcuity
                                     where inc.member_id == IncorrectId
                                     select inc).ToList();

                    if (IncorrectData != null)
                    {
                        if (IncorrectData.Count > 0)
                        {
                            foreach (MemberConditionAcuity DataToMerge in IncorrectData)
                            {
                                DataToMerge.member_id = CorrectMemberId;

                                db.Entry(DataToMerge).State = EntityState.Modified;
                                int UpdateReturnValue = db.SaveChanges();

                                if (!Merged)
                                {
                                    if (UpdateReturnValue > 0)
                                    {
                                        Merged = true;
                                    }
                                }
                            }
                        }
                        else
                        {
                            Merged = true;
                        }
                    }
                    else
                    {
                        Merged = true;
                    }
                }

                return Merged;

            }
            catch (Exception ex)
            {
                return Merged;
            }
        }

        private bool MergeMemberLcmFollowupNotes(Guid CorrectMemberId, Guid IncorrectMember)
        {
            bool Merged = false;

            try
            {
                Guid IncorrectId = IncorrectMember;
                List<MemberLcmFollowupNotes> IncorrectData = new List<MemberLcmFollowupNotes>();

                using (var db = new ICMS2DbContext())
                {
                    IncorrectData = (from inc in db.DbmsMemberLcmFollowupNotes
                                     where inc.member_id == IncorrectId
                                     select inc).ToList();

                    if (IncorrectData != null)
                    {
                        if (IncorrectData.Count > 0)
                        {
                            foreach (MemberLcmFollowupNotes DataToMerge in IncorrectData)
                            {
                                DataToMerge.member_id = CorrectMemberId;

                                db.Entry(DataToMerge).State = EntityState.Modified;
                                int UpdateReturnValue = db.SaveChanges();

                                if (!Merged)
                                {
                                    if (UpdateReturnValue > 0)
                                    {
                                        Merged = true;
                                    }
                                }
                            }
                        }
                        else
                        {
                            Merged = true;
                        }
                    }
                    else
                    {
                        Merged = true;
                    }
                }

                return Merged;

            }
            catch (Exception ex)
            {
                return Merged;
            }
        }

        private bool MergeMemberMeds(Guid CorrectMemberId, Guid IncorrectMember)
        {
            bool Merged = false;

            try
            {
                Guid IncorrectId = IncorrectMember;
                List<MemberMeds> IncorrectData = new List<MemberMeds>();

                using (var db = new ICMS2DbContext())
                {
                    IncorrectData = (from inc in db.DbmsMemberMeds
                                     where inc.member_id == IncorrectId
                                     select inc).ToList();

                    if (IncorrectData != null)
                    {
                        if (IncorrectData.Count > 0)
                        {
                            foreach (MemberMeds DataToMerge in IncorrectData)
                            {
                                DataToMerge.member_id = CorrectMemberId;

                                db.Entry(DataToMerge).State = EntityState.Modified;
                                int UpdateReturnValue = db.SaveChanges();

                                if (!Merged)
                                {
                                    if (UpdateReturnValue > 0)
                                    {
                                        Merged = true;
                                    }
                                }
                            }
                        }
                        else
                        {
                            Merged = true;
                        }
                    }
                    else
                    {
                        Merged = true;
                    }
                }

                return Merged;

            }
            catch (Exception ex)
            {
                return Merged;
            }
        }

        private bool MergeMemberMedsHighDollarTasks(Guid CorrectMemberId, Guid IncorrectMember)
        {
            bool Merged = false;

            try
            {
                Guid IncorrectId = IncorrectMember;
                List<MemberMedsHighDollarTask> IncorrectData = new List<MemberMedsHighDollarTask>();

                using (var db = new ICMS2DbContext())
                {
                    IncorrectData = (from inc in db.DbmsMemberMedsHighDollarTask
                                     where inc.member_id == IncorrectId
                                     select inc).ToList();

                    if (IncorrectData != null)
                    {
                        if (IncorrectData.Count > 0)
                        {
                            foreach (MemberMedsHighDollarTask DataToMerge in IncorrectData)
                            {
                                DataToMerge.member_id = CorrectMemberId;

                                db.Entry(DataToMerge).State = EntityState.Modified;
                                int UpdateReturnValue = db.SaveChanges();

                                if (!Merged)
                                {
                                    if (UpdateReturnValue > 0)
                                    {
                                        Merged = true;
                                    }
                                }
                            }
                        }
                        else
                        {
                            Merged = true;
                        }
                    }
                    else
                    {
                        Merged = true;
                    }
                }

                return Merged;

            }
            catch (Exception ex)
            {
                return Merged;
            }
        }

        private bool MergeMemberMedsHistories(Guid CorrectMemberId, Guid IncorrectMember)
        {
            bool Merged = false;

            try
            {
                Guid IncorrectId = IncorrectMember;
                List<MemberMedsHistory> IncorrectData = new List<MemberMedsHistory>();

                using (var db = new ICMS2DbContext())
                {
                    IncorrectData = (from inc in db.DbmsMemberMedsHistory
                                     where inc.member_id == IncorrectId
                                     select inc).ToList();

                    if (IncorrectData != null)
                    {
                        if (IncorrectData.Count > 0)
                        {
                            foreach (MemberMedsHistory DataToMerge in IncorrectData)
                            {
                                DataToMerge.member_id = CorrectMemberId;

                                db.Entry(DataToMerge).State = EntityState.Modified;
                                int UpdateReturnValue = db.SaveChanges();

                                if (!Merged)
                                {
                                    if (UpdateReturnValue > 0)
                                    {
                                        Merged = true;
                                    }
                                }
                            }
                        }
                        else
                        {
                            Merged = true;
                        }
                    }
                    else
                    {
                        Merged = true;
                    }
                }

                return Merged;

            }
            catch (Exception ex)
            {
                return Merged;
            }
        }


        private bool MergeMemberPictures(Guid CorrectMemberId, Guid IncorrectMember)
        {
            bool Merged = false;

            try
            {
                Guid IncorrectId = IncorrectMember;
                List<MemberPictures> IncorrectData = new List<MemberPictures>();

                using (var db = new ICMS2DbContext())
                {
                    IncorrectData = (from inc in db.DbmsMemberPictures
                                     where inc.member_id == IncorrectId
                                     select inc).ToList();

                    if (IncorrectData != null)
                    {
                        if (IncorrectData.Count > 0)
                        {
                            foreach (MemberPictures DataToMerge in IncorrectData)
                            {
                                MemberPictures AddItem = new MemberPictures();

                                if (SetCorrectMemberPictures(CorrectMemberId, ref AddItem, DataToMerge))
                                {
                                    MemberPictures DeleteItem = DataToMerge;

                                    db.DbmsMemberPictures.Attach(DataToMerge);
                                    db.DbmsMemberPictures.Remove(DataToMerge);

                                    int IncorrectItemDeleted = db.SaveChanges();

                                    if (IncorrectItemDeleted > 0)
                                    {
                                        db.DbmsMemberPictures.Add(AddItem);
                                        int CorrectItemAdded = db.SaveChanges();

                                        if (!Merged)
                                        {
                                            if (CorrectItemAdded > 0)
                                            {
                                                Merged = true;
                                            }
                                        }
                                    }
                                }

                                //DataToMerge.member_id = CorrectMemberId;

                                //db.Entry(DataToMerge).State = EntityState.Modified;
                                //int UpdateReturnValue = db.SaveChanges();

                                //if (!Merged)
                                //{
                                //    if (UpdateReturnValue > 0)
                                //    {
                                //        Merged = true;
                                //    }
                                //}
                            }
                        }
                        else
                        {
                            Merged = true;
                        }
                    }
                    else
                    {
                        Merged = true;
                    }
                }

                return Merged;

            }
            catch (Exception ex)
            {
                return Merged;
            }
        }

        private bool SetCorrectMemberPictures(Guid CorrectMemberId, ref MemberPictures CorrectItem, MemberPictures IncorrectItem)
        {
            bool ItemSet = false;

            try
            {
                if (CorrectMemberId != null)
                {
                    if (!CorrectMemberId.Equals(Guid.Empty))
                    {
                        CorrectItem.member_id = CorrectMemberId;

                        CorrectItem.image_path = IncorrectItem.image_path;

                        ItemSet = true;
                    }
                }

                return ItemSet;

            }
            catch (Exception ex)
            {
                return ItemSet;
            }
        }


        private bool MergeMemberProfilePictures(Guid CorrectMemberId, Guid IncorrectMember)
        {
            bool Merged = false;

            try
            {
                Guid IncorrectId = IncorrectMember;
                List<MemberProfilePicture> IncorrectData = new List<MemberProfilePicture>();

                using (var db = new ICMS2DbContext())
                {
                    IncorrectData = (from inc in db.DbmsMemberProfilePicture
                                     where inc.member_id == IncorrectId
                                     select inc).ToList();

                    if (IncorrectData != null)
                    {
                        if (IncorrectData.Count > 0)
                        {
                            foreach (MemberProfilePicture DataToMerge in IncorrectData)
                            {
                                DataToMerge.member_id = CorrectMemberId;

                                db.Entry(DataToMerge).State = EntityState.Modified;
                                int UpdateReturnValue = db.SaveChanges();

                                if (!Merged)
                                {
                                    if (UpdateReturnValue > 0)
                                    {
                                        Merged = true;
                                    }
                                }
                            }
                        }
                        else
                        {
                            Merged = true;
                        }
                    }
                    else
                    {
                        Merged = true;
                    }
                }

                return Merged;

            }
            catch (Exception ex)
            {
                return Merged;
            }
        }


        private bool MergeMemberPrograms(Guid CorrectMemberId, Guid IncorrectMember)
        {
            bool Merged = false;

            try
            {
                Guid IncorrectId = IncorrectMember;
                List<MemberProgram> IncorrectData = new List<MemberProgram>();

                using (var db = new ICMS2DbContext())
                {
                    IncorrectData = (from inc in db.DbmsMemberProgram
                                     where inc.member_id == IncorrectId
                                     select inc).ToList();

                    if (IncorrectData != null)
                    {
                        if (IncorrectData.Count > 0)
                        {
                            foreach (MemberProgram DataToMerge in IncorrectData)
                            {
                                MemberProgram AddItem = new MemberProgram();

                                if (SetCorrectMemberPrograms(CorrectMemberId, ref AddItem, DataToMerge))
                                {
                                    MemberProgram DeleteItem = DataToMerge;

                                    db.DbmsMemberProgram.Attach(DataToMerge);
                                    db.DbmsMemberProgram.Remove(DataToMerge);

                                    int IncorrectItemDeleted = db.SaveChanges();

                                    if (IncorrectItemDeleted > 0)
                                    {
                                        db.DbmsMemberProgram.Add(AddItem);
                                        int CorrectItemAdded = db.SaveChanges();

                                        if (!Merged)
                                        {
                                            if (CorrectItemAdded > 0)
                                            {
                                                Merged = true;
                                            }
                                        }
                                    }
                                }

                                //DataToMerge.member_id = CorrectMemberId;

                                //db.Entry(DataToMerge).State = EntityState.Modified;
                                //int UpdateReturnValue = db.SaveChanges();

                                //if (!Merged)
                                //{
                                //    if (UpdateReturnValue > 0)
                                //    {
                                //        Merged = true;
                                //    }
                                //}
                            }
                        }
                        else
                        {
                            Merged = true;
                        }
                    }
                    else
                    {
                        Merged = true;
                    }
                }

                return Merged;

            }
            catch (Exception ex)
            {
                return Merged;
            }
        }

        private bool SetCorrectMemberPrograms(Guid CorrectMemberId, ref MemberProgram CorrectItem, MemberProgram IncorrectItem)
        {
            bool ItemSet = false;

            try
            {
                if (CorrectMemberId != null)
                {
                    if (!CorrectMemberId.Equals(Guid.Empty))
                    {
                        CorrectItem.member_id = CorrectMemberId;

                        CorrectItem.care_coordination_optout = IncorrectItem.care_coordination_optout;
                        CorrectItem.care_coordination_optout_date = IncorrectItem.care_coordination_optout_date;
                        CorrectItem.ccm_optout = IncorrectItem.ccm_optout;
                        CorrectItem.ccm_optout_date = IncorrectItem.ccm_optout_date;
                        CorrectItem.cm_optout = IncorrectItem.cm_optout;
                        CorrectItem.cm_optout_date = IncorrectItem.cm_optout_date;
                        CorrectItem.dm_optout = IncorrectItem.dm_optout;
                        CorrectItem.dm_optout_date = IncorrectItem.dm_optout_date;
                        CorrectItem.last_userid = IncorrectItem.last_userid;
                        CorrectItem.lcm_optout = IncorrectItem.lcm_optout;
                        CorrectItem.lcm_optout_date = IncorrectItem.lcm_optout_date;
                        CorrectItem.lcm_sr_optout = IncorrectItem.lcm_sr_optout;
                        CorrectItem.lcm_sr_optout_date = IncorrectItem.lcm_sr_optout_date;
                        CorrectItem.lifestyle_optout = IncorrectItem.lifestyle_optout;
                        CorrectItem.lifestyle_optout_date = IncorrectItem.lifestyle_optout_date;

                        ItemSet = true;
                    }
                }

                return ItemSet;

            }
            catch (Exception ex)
            {
                return ItemSet;
            }
        }


        private bool MergeMemberRelativeDiseaseHistories(Guid CorrectMemberId, Guid IncorrectMember)
        {
            bool Merged = false;

            try
            {
                Guid IncorrectId = IncorrectMember;
                List<MemberRelativeDiseaseHistory> IncorrectData = new List<MemberRelativeDiseaseHistory>();

                using (var db = new ICMS2DbContext())
                {
                    IncorrectData = (from inc in db.DbmsMemberRelativeDiseaseHistory
                                     where inc.member_id == IncorrectId
                                     select inc).ToList();

                    if (IncorrectData != null)
                    {
                        if (IncorrectData.Count > 0)
                        {
                            foreach (MemberRelativeDiseaseHistory DataToMerge in IncorrectData)
                            {
                                DataToMerge.member_id = CorrectMemberId;

                                db.Entry(DataToMerge).State = EntityState.Modified;
                                int UpdateReturnValue = db.SaveChanges();

                                if (!Merged)
                                {
                                    if (UpdateReturnValue > 0)
                                    {
                                        Merged = true;
                                    }
                                }
                            }
                        }
                        else
                        {
                            Merged = true;
                        }
                    }
                    else
                    {
                        Merged = true;
                    }
                }

                return Merged;

            }
            catch (Exception ex)
            {
                return Merged;
            }
        }

        private bool MergeMemberRenalTasks(Guid CorrectMemberId, Guid IncorrectMember)
        {
            bool Merged = false;

            try
            {
                Guid IncorrectId = IncorrectMember;
                List<MemberRenalTask> IncorrectData = new List<MemberRenalTask>();

                using (var db = new ICMS2DbContext())
                {
                    IncorrectData = (from inc in db.DbmsMemberRenalTask
                                     where inc.member_id == IncorrectId
                                     select inc).ToList();

                    if (IncorrectData != null)
                    {
                        if (IncorrectData.Count > 0)
                        {
                            foreach (MemberRenalTask DataToMerge in IncorrectData)
                            {
                                DataToMerge.member_id = CorrectMemberId;

                                db.Entry(DataToMerge).State = EntityState.Modified;
                                int UpdateReturnValue = db.SaveChanges();

                                if (!Merged)
                                {
                                    if (UpdateReturnValue > 0)
                                    {
                                        Merged = true;
                                    }
                                }
                            }
                        }
                        else
                        {
                            Merged = true;
                        }
                    }
                    else
                    {
                        Merged = true;
                    }
                }

                return Merged;

            }
            catch (Exception ex)
            {
                return Merged;
            }
        }

        private bool MergeMemberReturnedLetters(Guid CorrectMemberId, Guid IncorrectMember)
        {
            bool Merged = false;

            try
            {
                Guid IncorrectId = IncorrectMember;
                List<MemberReturnedLetters> IncorrectData = new List<MemberReturnedLetters>();

                using (var db = new ICMS2DbContext())
                {
                    IncorrectData = (from inc in db.DbmsMemberReturnedLetters
                                     where inc.member_id == IncorrectId
                                     select inc).ToList();

                    if (IncorrectData != null)
                    {
                        if (IncorrectData.Count > 0)
                        {
                            foreach (MemberReturnedLetters DataToMerge in IncorrectData)
                            {
                                DataToMerge.member_id = CorrectMemberId;

                                db.Entry(DataToMerge).State = EntityState.Modified;
                                int UpdateReturnValue = db.SaveChanges();

                                if (!Merged)
                                {
                                    if (UpdateReturnValue > 0)
                                    {
                                        Merged = true;
                                    }
                                }
                            }
                        }
                        else
                        {
                            Merged = true;
                        }
                    }
                    else
                    {
                        Merged = true;
                    }
                }

                return Merged;

            }
            catch (Exception ex)
            {
                return Merged;
            }
        }

        private bool MergeMemberSignatureFiles(Guid CorrectMemberId, Guid IncorrectMember)
        {
            bool Merged = false;

            try
            {
                Guid IncorrectId = IncorrectMember;
                List<MemberSignatureFile> IncorrectData = new List<MemberSignatureFile>();

                using (var db = new ICMS2DbContext())
                {
                    IncorrectData = (from inc in db.DbmsMemberSignatureFile
                                     where inc.member_id == IncorrectId
                                     select inc).ToList();

                    if (IncorrectData != null)
                    {
                        if (IncorrectData.Count > 0)
                        {
                            foreach (MemberSignatureFile DataToMerge in IncorrectData)
                            {
                                DataToMerge.member_id = CorrectMemberId;

                                db.Entry(DataToMerge).State = EntityState.Modified;
                                int UpdateReturnValue = db.SaveChanges();

                                if (!Merged)
                                {
                                    if (UpdateReturnValue > 0)
                                    {
                                        Merged = true;
                                    }
                                }
                            }
                        }
                        else
                        {
                            Merged = true;
                        }
                    }
                    else
                    {
                        Merged = true;
                    }
                }

                return Merged;

            }
            catch (Exception ex)
            {
                return Merged;
            }
        }

        private bool MergeMemberUpdateReferences(Guid CorrectMemberId, Guid IncorrectMember)
        {
            bool Merged = false;

            try
            {
                Guid IncorrectId = IncorrectMember;
                List<MemberUpdateReference> IncorrectData = new List<MemberUpdateReference>();

                using (var db = new ICMS2DbContext())
                {
                    IncorrectData = (from inc in db.DbmsMemberUpdateReference
                                     where inc.member_id == IncorrectId
                                     select inc).ToList();

                    if (IncorrectData != null)
                    {
                        if (IncorrectData.Count > 0)
                        {
                            foreach (MemberUpdateReference DataToMerge in IncorrectData)
                            {
                                DataToMerge.member_id = CorrectMemberId;

                                db.Entry(DataToMerge).State = EntityState.Modified;
                                int UpdateReturnValue = db.SaveChanges();

                                if (!Merged)
                                {
                                    if (UpdateReturnValue > 0)
                                    {
                                        Merged = true;
                                    }
                                }
                            }
                        }
                        else
                        {
                            Merged = true;
                        }
                    }
                    else
                    {
                        Merged = true;
                    }
                }

                return Merged;

            }
            catch (Exception ex)
            {
                return Merged;
            }
        }

        private bool MergeMonthlyLcmManagementQas(Guid CorrectMemberId, Guid IncorrectMember)
        {
            bool Merged = false;

            try
            {
                Guid IncorrectId = IncorrectMember;
                List<MonthlyLcmManagementQa> IncorrectData = new List<MonthlyLcmManagementQa>();

                using (var db = new ICMS2DbContext())
                {
                    IncorrectData = (from inc in db.DbmsMonthlyLcmManagementQa
                                     where inc.member_id == IncorrectId
                                     select inc).ToList();

                    if (IncorrectData != null)
                    {
                        if (IncorrectData.Count > 0)
                        {
                            foreach (MonthlyLcmManagementQa DataToMerge in IncorrectData)
                            {
                                DataToMerge.member_id = CorrectMemberId;

                                db.Entry(DataToMerge).State = EntityState.Modified;
                                int UpdateReturnValue = db.SaveChanges();

                                if (!Merged)
                                {
                                    if (UpdateReturnValue > 0)
                                    {
                                        Merged = true;
                                    }
                                }
                            }
                        }
                        else
                        {
                            Merged = true;
                        }
                    }
                    else
                    {
                        Merged = true;
                    }
                }

                return Merged;

            }
            catch (Exception ex)
            {
                return Merged;
            }
        }

        private bool MergeMonthlyUtilizationManagements(Guid CorrectMemberId, Guid IncorrectMember)
        {
            bool Merged = false;

            try
            {
                Guid IncorrectId = IncorrectMember;
                List<MonthlyUtilizationManagement> IncorrectData = new List<MonthlyUtilizationManagement>();

                using (var db = new ICMS2DbContext())
                {
                    IncorrectData = (from inc in db.DbmsMonthlyUtilizationManagement
                                     where inc.member_id == IncorrectId
                                     select inc).ToList();

                    if (IncorrectData != null)
                    {
                        if (IncorrectData.Count > 0)
                        {
                            foreach (MonthlyUtilizationManagement DataToMerge in IncorrectData)
                            {
                                DataToMerge.member_id = CorrectMemberId;

                                db.Entry(DataToMerge).State = EntityState.Modified;
                                int UpdateReturnValue = db.SaveChanges();

                                if (!Merged)
                                {
                                    if (UpdateReturnValue > 0)
                                    {
                                        Merged = true;
                                    }
                                }
                            }
                        }
                        else
                        {
                            Merged = true;
                        }
                    }
                    else
                    {
                        Merged = true;
                    }
                }

                return Merged;

            }
            catch (Exception ex)
            {
                return Merged;
            }
        }

        private bool MergeAdmissionCareplanCounts(Guid CorrectMemberId, Guid IncorrectMember)
        {
            bool Merged = false;

            try
            {
                Guid IncorrectId = IncorrectMember;
                List<rAdmissionCareplanCount> IncorrectData = new List<rAdmissionCareplanCount>();

                using (var db = new ICMS2DbContext())
                {
                    IncorrectData = (from inc in db.DbmsAdmissionCareplanCount
                                     where inc.member_id == IncorrectId
                                     select inc).ToList();

                    if (IncorrectData != null)
                    {
                        if (IncorrectData.Count > 0)
                        {
                            foreach (rAdmissionCareplanCount DataToMerge in IncorrectData)
                            {
                                DataToMerge.member_id = CorrectMemberId;

                                db.Entry(DataToMerge).State = EntityState.Modified;
                                int UpdateReturnValue = db.SaveChanges();

                                if (!Merged)
                                {
                                    if (UpdateReturnValue > 0)
                                    {
                                        Merged = true;
                                    }
                                }
                            }
                        }
                        else
                        {
                            Merged = true;
                        }
                    }
                    else
                    {
                        Merged = true;
                    }
                }

                return Merged;

            }
            catch (Exception ex)
            {
                return Merged;
            }
        }

        private bool MergeAuthorizationUpdates(Guid CorrectMemberId, Guid IncorrectMember)
        {
            bool Merged = false;

            try
            {
                Guid IncorrectId = IncorrectMember;
                List<rAuthorizationUpdates> IncorrectData = new List<rAuthorizationUpdates>();

                using (var db = new ICMS2DbContext())
                {
                    IncorrectData = (from inc in db.DbmsAuthorizationUpdates
                                     where inc.member_id == IncorrectId
                                     select inc).ToList();

                    if (IncorrectData != null)
                    {
                        if (IncorrectData.Count > 0)
                        {
                            foreach (rAuthorizationUpdates DataToMerge in IncorrectData)
                            {
                                DataToMerge.member_id = CorrectMemberId;

                                db.Entry(DataToMerge).State = EntityState.Modified;
                                int UpdateReturnValue = db.SaveChanges();

                                if (!Merged)
                                {
                                    if (UpdateReturnValue > 0)
                                    {
                                        Merged = true;
                                    }
                                }
                            }
                        }
                        else
                        {
                            Merged = true;
                        }
                    }
                    else
                    {
                        Merged = true;
                    }
                }

                return Merged;

            }
            catch (Exception ex)
            {
                return Merged;
            }
        }

        private bool MergeDentalVisits(Guid CorrectMemberId, Guid IncorrectMember)
        {
            bool Merged = false;

            try
            {
                Guid IncorrectId = IncorrectMember;
                List<rDentalVisits> IncorrectData = new List<rDentalVisits>();

                using (var db = new ICMS2DbContext())
                {
                    IncorrectData = (from inc in db.DbmsDentalVisits
                                     where inc.member_id == IncorrectId
                                     select inc).ToList();

                    if (IncorrectData != null)
                    {
                        if (IncorrectData.Count > 0)
                        {
                            foreach (rDentalVisits DataToMerge in IncorrectData)
                            {
                                DataToMerge.member_id = CorrectMemberId;

                                db.Entry(DataToMerge).State = EntityState.Modified;
                                int UpdateReturnValue = db.SaveChanges();

                                if (!Merged)
                                {
                                    if (UpdateReturnValue > 0)
                                    {
                                        Merged = true;
                                    }
                                }
                            }
                        }
                        else
                        {
                            Merged = true;
                        }
                    }
                    else
                    {
                        Merged = true;
                    }
                }

                return Merged;

            }
            catch (Exception ex)
            {
                return Merged;
            }
        }

        private bool MergeDepartmentBedVacancies(Guid CorrectMemberId, Guid IncorrectMember)
        {
            bool Merged = false;

            try
            {
                Guid IncorrectId = IncorrectMember;
                List<rDepartmentBedVacancy> IncorrectData = new List<rDepartmentBedVacancy>();

                using (var db = new ICMS2DbContext())
                {
                    IncorrectData = (from inc in db.DbmsDepartmentBedVacancy
                                     where inc.member_id == IncorrectId
                                     select inc).ToList();

                    if (IncorrectData != null)
                    {
                        if (IncorrectData.Count > 0)
                        {
                            foreach (rDepartmentBedVacancy DataToMerge in IncorrectData)
                            {
                                DataToMerge.member_id = CorrectMemberId;

                                db.Entry(DataToMerge).State = EntityState.Modified;
                                int UpdateReturnValue = db.SaveChanges();

                                if (!Merged)
                                {
                                    if (UpdateReturnValue > 0)
                                    {
                                        Merged = true;
                                    }
                                }
                            }
                        }
                        else
                        {
                            Merged = true;
                        }
                    }
                    else
                    {
                        Merged = true;
                    }
                }

                return Merged;

            }
            catch (Exception ex)
            {
                return Merged;
            }
        }

        private bool MergeInboundFaxReferralRemovals(Guid CorrectMemberId, Guid IncorrectMember)
        {
            bool Merged = false;

            try
            {
                Guid IncorrectId = IncorrectMember;
                List<rInboundFaxReferralRemoval> IncorrectData = new List<rInboundFaxReferralRemoval>();

                using (var db = new ICMS2DbContext())
                {
                    IncorrectData = (from inc in db.DbmsInboundFaxReferralRemoval
                                     where inc.member_id == IncorrectId
                                     select inc).ToList();

                    if (IncorrectData != null)
                    {
                        if (IncorrectData.Count > 0)
                        {
                            foreach (rInboundFaxReferralRemoval DataToMerge in IncorrectData)
                            {
                                DataToMerge.member_id = CorrectMemberId;

                                db.Entry(DataToMerge).State = EntityState.Modified;
                                int UpdateReturnValue = db.SaveChanges();

                                if (!Merged)
                                {
                                    if (UpdateReturnValue > 0)
                                    {
                                        Merged = true;
                                    }
                                }
                            }
                        }
                        else
                        {
                            Merged = true;
                        }
                    }
                    else
                    {
                        Merged = true;
                    }
                }

                return Merged;

            }
            catch (Exception ex)
            {
                return Merged;
            }
        }

        private bool MergeInboundVoicemails(Guid CorrectMemberId, Guid IncorrectMember)
        {
            bool Merged = false;

            try
            {
                Guid IncorrectId = IncorrectMember;
                List<rInboundVoicemail> IncorrectData = new List<rInboundVoicemail>();

                using (var db = new ICMS2DbContext())
                {
                    IncorrectData = (from inc in db.DbmsInboundVoicemail
                                     where inc.member_id == IncorrectId
                                     select inc).ToList();

                    if (IncorrectData != null)
                    {
                        if (IncorrectData.Count > 0)
                        {
                            foreach (rInboundVoicemail DataToMerge in IncorrectData)
                            {
                                DataToMerge.member_id = CorrectMemberId;

                                db.Entry(DataToMerge).State = EntityState.Modified;
                                int UpdateReturnValue = db.SaveChanges();

                                if (!Merged)
                                {
                                    if (UpdateReturnValue > 0)
                                    {
                                        Merged = true;
                                    }
                                }
                            }
                        }
                        else
                        {
                            Merged = true;
                        }
                    }
                    else
                    {
                        Merged = true;
                    }
                }

                return Merged;

            }
            catch (Exception ex)
            {
                return Merged;
            }
        }

        private bool MergeMemberReferralMedicines(Guid CorrectMemberId, Guid IncorrectMember)
        {
            bool Merged = false;

            try
            {
                Guid IncorrectId = IncorrectMember;
                List<rMemberReferralMedicine> IncorrectData = new List<rMemberReferralMedicine>();

                using (var db = new ICMS2DbContext())
                {
                    IncorrectData = (from inc in db.DbmsMemberReferralMedicine
                                     where inc.member_id == IncorrectId
                                     select inc).ToList();

                    if (IncorrectData != null)
                    {
                        if (IncorrectData.Count > 0)
                        {
                            foreach (rMemberReferralMedicine DataToMerge in IncorrectData)
                            {
                                DataToMerge.member_id = CorrectMemberId;

                                db.Entry(DataToMerge).State = EntityState.Modified;
                                int UpdateReturnValue = db.SaveChanges();

                                if (!Merged)
                                {
                                    if (UpdateReturnValue > 0)
                                    {
                                        Merged = true;
                                    }
                                }
                            }
                        }
                        else
                        {
                            Merged = true;
                        }
                    }
                    else
                    {
                        Merged = true;
                    }
                }

                return Merged;

            }
            catch (Exception ex)
            {
                return Merged;
            }
        }

        private bool MergeMemberReferralQocs(Guid CorrectMemberId, Guid IncorrectMember)
        {
            bool Merged = false;

            try
            {
                Guid IncorrectId = IncorrectMember;
                List<rMemberReferralQoc> IncorrectData = new List<rMemberReferralQoc>();

                using (var db = new ICMS2DbContext())
                {
                    IncorrectData = (from inc in db.DbmsMemberReferralQoc
                                     where inc.member_id == IncorrectId
                                     select inc).ToList();

                    if (IncorrectData != null)
                    {
                        if (IncorrectData.Count > 0)
                        {
                            foreach (rMemberReferralQoc DataToMerge in IncorrectData)
                            {
                                DataToMerge.member_id = CorrectMemberId;

                                db.Entry(DataToMerge).State = EntityState.Modified;
                                int UpdateReturnValue = db.SaveChanges();

                                if (!Merged)
                                {
                                    if (UpdateReturnValue > 0)
                                    {
                                        Merged = true;
                                    }
                                }
                            }
                        }
                        else
                        {
                            Merged = true;
                        }
                    }
                    else
                    {
                        Merged = true;
                    }
                }

                return Merged;

            }
            catch (Exception ex)
            {
                return Merged;
            }
        }

        private bool MergeMemberReferralUpdatesWorkflow(Guid CorrectMemberId, Guid IncorrectMember)
        {
            bool Merged = false;

            try
            {
                Guid IncorrectId = IncorrectMember;
                List<rMemberReferralUpdatesWorkflow> IncorrectData = new List<rMemberReferralUpdatesWorkflow>();

                using (var db = new ICMS2DbContext())
                {
                    IncorrectData = (from inc in db.DbmsMemberReferralUpdatesWorkflow
                                     where inc.member_id == IncorrectId
                                     select inc).ToList();

                    if (IncorrectData != null)
                    {
                        if (IncorrectData.Count > 0)
                        {
                            foreach (rMemberReferralUpdatesWorkflow DataToMerge in IncorrectData)
                            {
                                DataToMerge.member_id = CorrectMemberId;

                                db.Entry(DataToMerge).State = EntityState.Modified;
                                int UpdateReturnValue = db.SaveChanges();

                                if (!Merged)
                                {
                                    if (UpdateReturnValue > 0)
                                    {
                                        Merged = true;
                                    }
                                }
                            }
                        }
                        else
                        {
                            Merged = true;
                        }
                    }
                    else
                    {
                        Merged = true;
                    }
                }

                return Merged;

            }
            catch (Exception ex)
            {
                return Merged;
            }
        }

        private bool MergeUtilizationDischargeNotes(Guid CorrectMemberId, Guid IncorrectMember)
        {
            bool Merged = false;

            try
            {
                Guid IncorrectId = IncorrectMember;
                List<rUtilizationDischargeNote> IncorrectData = new List<rUtilizationDischargeNote>();

                using (var db = new ICMS2DbContext())
                {
                    IncorrectData = (from inc in db.DbmsUtilizationDischargeNote
                                     where inc.member_id == IncorrectId
                                     select inc).ToList();

                    if (IncorrectData != null)
                    {
                        if (IncorrectData.Count > 0)
                        {
                            foreach (rUtilizationDischargeNote DataToMerge in IncorrectData)
                            {
                                DataToMerge.member_id = CorrectMemberId;

                                db.Entry(DataToMerge).State = EntityState.Modified;
                                int UpdateReturnValue = db.SaveChanges();

                                if (!Merged)
                                {
                                    if (UpdateReturnValue > 0)
                                    {
                                        Merged = true;
                                    }
                                }
                            }
                        }
                        else
                        {
                            Merged = true;
                        }
                    }
                    else
                    {
                        Merged = true;
                    }
                }

                return Merged;

            }
            catch (Exception ex)
            {
                return Merged;
            }
        }

        private bool MergeSuspendCaseToTaskReferences(Guid CorrectMemberId, Guid IncorrectMember)
        {
            bool Merged = false;

            try
            {
                Guid IncorrectId = IncorrectMember;
                List<SuspendCaseToTaskReference> IncorrectData = new List<SuspendCaseToTaskReference>();

                using (var db = new ICMS2DbContext())
                {
                    IncorrectData = (from inc in db.DbmsSuspendCaseToTaskReference
                                     where inc.member_id == IncorrectId
                                     select inc).ToList();

                    if (IncorrectData != null)
                    {
                        if (IncorrectData.Count > 0)
                        {
                            foreach (SuspendCaseToTaskReference DataToMerge in IncorrectData)
                            {
                                DataToMerge.member_id = CorrectMemberId;

                                db.Entry(DataToMerge).State = EntityState.Modified;
                                int UpdateReturnValue = db.SaveChanges();

                                if (!Merged)
                                {
                                    if (UpdateReturnValue > 0)
                                    {
                                        Merged = true;
                                    }
                                }
                            }
                        }
                        else
                        {
                            Merged = true;
                        }
                    }
                    else
                    {
                        Merged = true;
                    }
                }

                return Merged;

            }
            catch (Exception ex)
            {
                return Merged;
            }
        }

        private bool MergeSuspendedNotes(Guid CorrectMemberId, Guid IncorrectMember)
        {
            bool Merged = false;

            try
            {
                Guid IncorrectId = IncorrectMember;
                List<SuspendedNotes> IncorrectData = new List<SuspendedNotes>();

                using (var db = new ICMS2DbContext())
                {
                    IncorrectData = (from inc in db.DbmsSuspendedNotes
                                     where inc.member_id == IncorrectId
                                     select inc).ToList();

                    if (IncorrectData != null)
                    {
                        if (IncorrectData.Count > 0)
                        {
                            foreach (SuspendedNotes DataToMerge in IncorrectData)
                            {
                                DataToMerge.member_id = CorrectMemberId;

                                db.Entry(DataToMerge).State = EntityState.Modified;
                                int UpdateReturnValue = db.SaveChanges();

                                if (!Merged)
                                {
                                    if (UpdateReturnValue > 0)
                                    {
                                        Merged = true;
                                    }
                                }
                            }
                        }
                        else
                        {
                            Merged = true;
                        }
                    }
                    else
                    {
                        Merged = true;
                    }
                }

                return Merged;

            }
            catch (Exception ex)
            {
                return Merged;
            }
        }

        private bool MergeSuspendedNotesOverrides(Guid CorrectMemberId, Guid IncorrectMember)
        {
            bool Merged = false;

            try
            {
                Guid IncorrectId = IncorrectMember;
                List<SuspendedNotesOverride> IncorrectData = new List<SuspendedNotesOverride>();

                using (var db = new ICMS2DbContext())
                {
                    IncorrectData = (from inc in db.DbmsSuspendedNotesOverride
                                     where inc.member_id == IncorrectId
                                     select inc).ToList();

                    if (IncorrectData != null)
                    {
                        if (IncorrectData.Count > 0)
                        {
                            foreach (SuspendedNotesOverride DataToMerge in IncorrectData)
                            {
                                DataToMerge.member_id = CorrectMemberId;

                                db.Entry(DataToMerge).State = EntityState.Modified;
                                int UpdateReturnValue = db.SaveChanges();

                                if (!Merged)
                                {
                                    if (UpdateReturnValue > 0)
                                    {
                                        Merged = true;
                                    }
                                }
                            }
                        }
                        else
                        {
                            Merged = true;
                        }
                    }
                    else
                    {
                        Merged = true;
                    }
                }

                return Merged;

            }
            catch (Exception ex)
            {
                return Merged;
            }
        }


        private bool MergeTelephoneNotesAttachments(Guid CorrectMemberId, Guid IncorrectMember)
        {
            bool Merged = false;

            try
            {
                Guid IncorrectId = IncorrectMember;
                List<TelephoneNotesAttachment> IncorrectData = new List<TelephoneNotesAttachment>();

                using (var db = new ICMS2DbContext())
                {
                    IncorrectData = (from inc in db.DbmsTelephoneNotesAttachment
                                     where inc.member_id == IncorrectId
                                     select inc).ToList();

                    if (IncorrectData != null)
                    {
                        if (IncorrectData.Count > 0)
                        {
                            foreach (TelephoneNotesAttachment DataToMerge in IncorrectData)
                            {
                                TelephoneNotesAttachment AddItem = new TelephoneNotesAttachment();

                                if (SetCorrectTelephoneNotesAttachments(CorrectMemberId, ref AddItem, DataToMerge))
                                {
                                    TelephoneNotesAttachment DeleteItem = DataToMerge;

                                    db.DbmsTelephoneNotesAttachment.Attach(DataToMerge);
                                    db.DbmsTelephoneNotesAttachment.Remove(DataToMerge);

                                    int IncorrectItemDeleted = db.SaveChanges();

                                    if (IncorrectItemDeleted > 0)
                                    {
                                        db.DbmsTelephoneNotesAttachment.Add(AddItem);
                                        int CorrectItemAdded = db.SaveChanges();

                                        if (!Merged)
                                        {
                                            if (CorrectItemAdded > 0)
                                            {
                                                Merged = true;
                                            }
                                        }
                                    }
                                }

                                //DataToMerge.member_id = CorrectMemberId;

                                //db.Entry(DataToMerge).State = EntityState.Modified;
                                //int UpdateReturnValue = db.SaveChanges();

                                //if (!Merged)
                                //{
                                //    if (UpdateReturnValue > 0)
                                //    {
                                //        Merged = true;
                                //    }
                                //}
                            }
                        }
                        else
                        {
                            Merged = true;
                        }
                    }
                    else
                    {
                        Merged = true;
                    }
                }

                return Merged;

            }
            catch (Exception ex)
            {
                return Merged;
            }
        }

        private bool SetCorrectTelephoneNotesAttachments(Guid CorrectMemberId, ref TelephoneNotesAttachment CorrectItem, TelephoneNotesAttachment IncorrectItem)
        {
            bool ItemSet = false;

            try
            {
                if (CorrectMemberId != null)
                {
                    if (!CorrectMemberId.Equals(Guid.Empty))
                    {
                        CorrectItem.member_id = CorrectMemberId;

                        CorrectItem.creation_user_id = IncorrectItem.creation_user_id;
                        CorrectItem.file_blob = IncorrectItem.file_blob;
                        CorrectItem.file_identifier = IncorrectItem.file_identifier;
                        CorrectItem.internal_patient = IncorrectItem.internal_patient;
                        CorrectItem.record_date = IncorrectItem.record_date;

                        ItemSet = true;
                    }
                }

                return ItemSet;

            }
            catch (Exception ex)
            {
                return ItemSet;
            }
        }


        private bool MergeTransitionalCareReferences(Guid CorrectMemberId, Guid IncorrectMember)
        {
            bool Merged = false;

            try
            {
                Guid IncorrectId = IncorrectMember;
                List<TransitionalCareReference> IncorrectData = new List<TransitionalCareReference>();

                using (var db = new ICMS2DbContext())
                {
                    IncorrectData = (from inc in db.DbmsTransitionalCareReference
                                     where inc.member_id == IncorrectId
                                     select inc).ToList();

                    if (IncorrectData != null)
                    {
                        if (IncorrectData.Count > 0)
                        {
                            foreach (TransitionalCareReference DataToMerge in IncorrectData)
                            {
                                DataToMerge.member_id = CorrectMemberId;

                                db.Entry(DataToMerge).State = EntityState.Modified;
                                int UpdateReturnValue = db.SaveChanges();

                                if (!Merged)
                                {
                                    if (UpdateReturnValue > 0)
                                    {
                                        Merged = true;
                                    }
                                }
                            }
                        }
                        else
                        {
                            Merged = true;
                        }
                    }
                    else
                    {
                        Merged = true;
                    }
                }

                return Merged;

            }
            catch (Exception ex)
            {
                return Merged;
            }
        }

        private bool MergeUmAssignedToTasks(Guid CorrectMemberId, Guid IncorrectMember)
        {
            bool Merged = false;

            try
            {
                Guid IncorrectId = IncorrectMember;
                List<UmAssignedToTask> IncorrectData = new List<UmAssignedToTask>();

                using (var db = new ICMS2DbContext())
                {
                    IncorrectData = (from inc in db.DbmsUmAssignedToTask
                                     where inc.member_id == IncorrectId
                                     select inc).ToList();

                    if (IncorrectData != null)
                    {
                        if (IncorrectData.Count > 0)
                        {
                            foreach (UmAssignedToTask DataToMerge in IncorrectData)
                            {
                                DataToMerge.member_id = CorrectMemberId;

                                db.Entry(DataToMerge).State = EntityState.Modified;
                                int UpdateReturnValue = db.SaveChanges();

                                if (!Merged)
                                {
                                    if (UpdateReturnValue > 0)
                                    {
                                        Merged = true;
                                    }
                                }
                            }
                        }
                        else
                        {
                            Merged = true;
                        }
                    }
                    else
                    {
                        Merged = true;
                    }
                }

                return Merged;

            }
            catch (Exception ex)
            {
                return Merged;
            }
        }

        private bool MergeUmAssignedToTaskTouchedReferences(Guid CorrectMemberId, Guid IncorrectMember)
        {
            bool Merged = false;

            try
            {
                Guid IncorrectId = IncorrectMember;
                List<UmAssignedToTaskTouchedReference> IncorrectData = new List<UmAssignedToTaskTouchedReference>();

                using (var db = new ICMS2DbContext())
                {
                    IncorrectData = (from inc in db.DbmsUmAssignedToTaskTouchedReference
                                     where inc.member_id == IncorrectId
                                     select inc).ToList();

                    if (IncorrectData != null)
                    {
                        if (IncorrectData.Count > 0)
                        {
                            foreach (UmAssignedToTaskTouchedReference DataToMerge in IncorrectData)
                            {
                                DataToMerge.member_id = CorrectMemberId;

                                db.Entry(DataToMerge).State = EntityState.Modified;
                                int UpdateReturnValue = db.SaveChanges();

                                if (!Merged)
                                {
                                    if (UpdateReturnValue > 0)
                                    {
                                        Merged = true;
                                    }
                                }
                            }
                        }
                        else
                        {
                            Merged = true;
                        }
                    }
                    else
                    {
                        Merged = true;
                    }
                }

                return Merged;

            }
            catch (Exception ex)
            {
                return Merged;
            }
        }

        private bool MergeUmAutoApprovedDiagnosisTasks(Guid CorrectMemberId, Guid IncorrectMember)
        {
            bool Merged = false;

            try
            {
                Guid IncorrectId = IncorrectMember;
                List<UmAutoApprovedDiagnosisTask> IncorrectData = new List<UmAutoApprovedDiagnosisTask>();

                using (var db = new ICMS2DbContext())
                {
                    IncorrectData = (from inc in db.DbmsUmAutoApprovedDiagnosisTask
                                     where inc.member_id == IncorrectId
                                     select inc).ToList();

                    if (IncorrectData != null)
                    {
                        if (IncorrectData.Count > 0)
                        {
                            foreach (UmAutoApprovedDiagnosisTask DataToMerge in IncorrectData)
                            {
                                DataToMerge.member_id = CorrectMemberId;

                                db.Entry(DataToMerge).State = EntityState.Modified;
                                int UpdateReturnValue = db.SaveChanges();

                                if (!Merged)
                                {
                                    if (UpdateReturnValue > 0)
                                    {
                                        Merged = true;
                                    }
                                }
                            }
                        }
                        else
                        {
                            Merged = true;
                        }
                    }
                    else
                    {
                        Merged = true;
                    }
                }

                return Merged;

            }
            catch (Exception ex)
            {
                return Merged;
            }
        }

        private bool MergeUtilizationReviewNoteTasks(Guid CorrectMemberId, Guid IncorrectMember)
        {
            bool Merged = false;

            try
            {
                Guid IncorrectId = IncorrectMember;
                List<UtilizationReviewNoteTask> IncorrectData = new List<UtilizationReviewNoteTask>();

                using (var db = new ICMS2DbContext())
                {
                    IncorrectData = (from inc in db.DbmsUtilizationReviewNoteTask
                                     where inc.member_id == IncorrectId
                                     select inc).ToList();

                    if (IncorrectData != null)
                    {
                        if (IncorrectData.Count > 0)
                        {
                            foreach (UtilizationReviewNoteTask DataToMerge in IncorrectData)
                            {
                                DataToMerge.member_id = CorrectMemberId;

                                db.Entry(DataToMerge).State = EntityState.Modified;
                                int UpdateReturnValue = db.SaveChanges();

                                if (!Merged)
                                {
                                    if (UpdateReturnValue > 0)
                                    {
                                        Merged = true;
                                    }
                                }
                            }
                        }
                        else
                        {
                            Merged = true;
                        }
                    }
                    else
                    {
                        Merged = true;
                    }
                }

                return Merged;

            }
            catch (Exception ex)
            {
                return Merged;
            }
        }

        private bool MergeWebClientNoteTasks(Guid CorrectMemberId, Guid IncorrectMember)
        {
            bool Merged = false;

            try
            {
                Guid IncorrectId = IncorrectMember;
                List<WebClientNoteTask> IncorrectData = new List<WebClientNoteTask>();

                using (var db = new ICMS2DbContext())
                {
                    IncorrectData = (from inc in db.DbmsWebClientNoteTask
                                     where inc.member_id == IncorrectId
                                     select inc).ToList();

                    if (IncorrectData != null)
                    {
                        if (IncorrectData.Count > 0)
                        {
                            foreach (WebClientNoteTask DataToMerge in IncorrectData)
                            {
                                DataToMerge.member_id = CorrectMemberId;

                                db.Entry(DataToMerge).State = EntityState.Modified;
                                int UpdateReturnValue = db.SaveChanges();

                                if (!Merged)
                                {
                                    if (UpdateReturnValue > 0)
                                    {
                                        Merged = true;
                                    }
                                }
                            }
                        }
                        else
                        {
                            Merged = true;
                        }
                    }
                    else
                    {
                        Merged = true;
                    }
                }

                return Merged;

            }
            catch (Exception ex)
            {
                return Merged;
            }
        }

        private bool MergeWebOnlinePrecertTasks(Guid CorrectMemberId, Guid IncorrectMember)
        {
            bool Merged = false;

            try
            {
                Guid IncorrectId = IncorrectMember;
                List<WebOnlinePrecertTask> IncorrectData = new List<WebOnlinePrecertTask>();

                using (var db = new ICMS2DbContext())
                {
                    IncorrectData = (from inc in db.DbmsWebOnlinePrecertTask
                                     where inc.member_id == IncorrectId
                                     select inc).ToList();

                    if (IncorrectData != null)
                    {
                        if (IncorrectData.Count > 0)
                        {
                            foreach (WebOnlinePrecertTask DataToMerge in IncorrectData)
                            {
                                DataToMerge.member_id = CorrectMemberId;

                                db.Entry(DataToMerge).State = EntityState.Modified;
                                int UpdateReturnValue = db.SaveChanges();

                                if (!Merged)
                                {
                                    if (UpdateReturnValue > 0)
                                    {
                                        Merged = true;
                                    }
                                }
                            }
                        }
                        else
                        {
                            Merged = true;
                        }
                    }
                    else
                    {
                        Merged = true;
                    }
                }

                return Merged;

            }
            catch (Exception ex)
            {
                return Merged;
            }
        }

        private bool MergeBillingBackups(Guid CorrectMemberId, Guid IncorrectMember)
        {
            bool Merged = false;

            try
            {
                Guid IncorrectId = IncorrectMember;
                List<BillingBackup> IncorrectData = new List<BillingBackup>();

                using (var db = new IcmsDataStagingDbContext())
                {
                    IncorrectData = (from inc in db.DbmsBillingBackup
                                     where inc.member_id == IncorrectId
                                     select inc).ToList();

                    if (IncorrectData != null)
                    {
                        if (IncorrectData.Count > 0)
                        {
                            foreach (BillingBackup DataToMerge in IncorrectData)
                            {
                                DataToMerge.member_id = CorrectMemberId;

                                db.Entry(DataToMerge).State = EntityState.Modified;
                                int UpdateReturnValue = db.SaveChanges();

                                if (!Merged)
                                {
                                    if (UpdateReturnValue > 0)
                                    {
                                        Merged = true;
                                    }
                                }
                            }
                        }
                        else
                        {
                            Merged = true;
                        }
                    }
                    else
                    {
                        Merged = true;
                    }
                }

                return Merged;

            }
            catch (Exception ex)
            {
                return Merged;
            }
        }

        private bool MergeCrBillingWorktables(Guid CorrectMemberId, Guid IncorrectMember)
        {
            bool Merged = false;

            try
            {
                Guid IncorrectId = IncorrectMember;
                List<CrBillingWorktable> IncorrectData = new List<CrBillingWorktable>();

                using (var db = new IcmsDataStagingDbContext())
                {
                    IncorrectData = (from inc in db.DbmsCrBillingWorktable
                                     where inc.member_id == IncorrectId
                                     select inc).ToList();

                    if (IncorrectData != null)
                    {
                        if (IncorrectData.Count > 0)
                        {
                            foreach (CrBillingWorktable DataToMerge in IncorrectData)
                            {
                                DataToMerge.member_id = CorrectMemberId;

                                db.Entry(DataToMerge).State = EntityState.Modified;
                                int UpdateReturnValue = db.SaveChanges();

                                if (!Merged)
                                {
                                    if (UpdateReturnValue > 0)
                                    {
                                        Merged = true;
                                    }
                                }
                            }
                        }
                        else
                        {
                            Merged = true;
                        }
                    }
                    else
                    {
                        Merged = true;
                    }
                }

                return Merged;

            }
            catch (Exception ex)
            {
                return Merged;
            }
        }

        private bool MergeLcmBillingWorktables(Guid CorrectMemberId, Guid IncorrectMember)
        {
            bool Merged = false;

            try
            {
                Guid IncorrectId = IncorrectMember;
                List<LcmBillingWorktable> IncorrectData = new List<LcmBillingWorktable>();

                using (var db = new IcmsDataStagingDbContext())
                {
                    IncorrectData = (from inc in db.DbmsLcmBillingWorktable
                                     where inc.member_id == IncorrectId
                                     select inc).ToList();

                    if (IncorrectData != null)
                    {
                        if (IncorrectData.Count > 0)
                        {
                            foreach (LcmBillingWorktable DataToMerge in IncorrectData)
                            {
                                DataToMerge.member_id = CorrectMemberId;

                                db.Entry(DataToMerge).State = EntityState.Modified;
                                int UpdateReturnValue = db.SaveChanges();

                                if (!Merged)
                                {
                                    if (UpdateReturnValue > 0)
                                    {
                                        Merged = true;
                                    }
                                }
                            }
                        }
                        else
                        {
                            Merged = true;
                        }
                    }
                    else
                    {
                        Merged = true;
                    }
                }

                return Merged;

            }
            catch (Exception ex)
            {
                return Merged;
            }
        }

        private bool MergeStdBillingWorktables(Guid CorrectMemberId, Guid IncorrectMember)
        {
            bool Merged = false;

            try
            {
                Guid IncorrectId = IncorrectMember;
                List<StdBillingWorktable> IncorrectData = new List<StdBillingWorktable>();

                using (var db = new IcmsDataStagingDbContext())
                {
                    IncorrectData = (from inc in db.DbmsStdBillingWorktable
                                     where inc.member_id == IncorrectId
                                     select inc).ToList();

                    if (IncorrectData != null)
                    {
                        if (IncorrectData.Count > 0)
                        {
                            foreach (StdBillingWorktable DataToMerge in IncorrectData)
                            {
                                DataToMerge.member_id = CorrectMemberId;

                                db.Entry(DataToMerge).State = EntityState.Modified;
                                int UpdateReturnValue = db.SaveChanges();

                                if (!Merged)
                                {
                                    if (UpdateReturnValue > 0)
                                    {
                                        Merged = true;
                                    }
                                }
                            }
                        }
                        else
                        {
                            Merged = true;
                        }
                    }
                    else
                    {
                        Merged = true;
                    }
                }

                return Merged;

            }
            catch (Exception ex)
            {
                return Merged;
            }
        }

        private bool MergeWcBillingWorktables(Guid CorrectMemberId, Guid IncorrectMember)
        {
            bool Merged = false;

            try
            {
                Guid IncorrectId = IncorrectMember;
                List<WcBillingWorktable> IncorrectData = new List<WcBillingWorktable>();

                using (var db = new IcmsDataStagingDbContext())
                {
                    IncorrectData = (from inc in db.DbmsWcBillingWorktable
                                     where inc.member_id == IncorrectId
                                     select inc).ToList();

                    if (IncorrectData != null)
                    {
                        if (IncorrectData.Count > 0)
                        {
                            foreach (WcBillingWorktable DataToMerge in IncorrectData)
                            {
                                DataToMerge.member_id = CorrectMemberId;

                                db.Entry(DataToMerge).State = EntityState.Modified;
                                int UpdateReturnValue = db.SaveChanges();

                                if (!Merged)
                                {
                                    if (UpdateReturnValue > 0)
                                    {
                                        Merged = true;
                                    }
                                }
                            }
                        }
                        else
                        {
                            Merged = true;
                        }
                    }
                    else
                    {
                        Merged = true;
                    }
                }

                return Merged;

            }
            catch (Exception ex)
            {
                return Merged;
            }
        }


        private bool AddMergedMemberReference(Guid CorrectMemberId, Guid IncorrectMember, Guid MergingUserId)
        {
            bool Added = false;

            try
            {
                using (var db = new ICMS2DbContext())
                {

                    MergedMemberReference MergedReference = new MergedMemberReference();

                    MergedReference.correct_member_id = CorrectMemberId;
                    MergedReference.incorrect_member_id = IncorrectMember;
                    MergedReference.merged_date = DateTime.Now;
                    MergedReference.merged_user_id = MergingUserId;

                    db.DbmsMergedMemberReference.Add(MergedReference);

                    int InsertResults = db.SaveChanges();

                    if (InsertResults > 0)
                    {
                        Added = true;
                    }
                }

                return Added;

            }
            catch(Exception ex)
            {
                return Added;
            }
        }



        private bool RemoveIncorrectMemberEnrollment(Guid IncorrectMember)
        {
            bool Removed = false;

            try
            {
                using (var db = new ICMS2DbContext())
                {
                    MemberEnrollment EnrollmentToRemove = new MemberEnrollment();

                    EnrollmentToRemove = (from inc in db.DbmsMemberEnrollment
                                          where inc.member_id == IncorrectMember
                                          select inc).SingleOrDefault();

                    if (EnrollmentToRemove != null)
                    {
                        if (IncorrectMember.Equals(EnrollmentToRemove.member_id))
                        {
                            db.DbmsMemberEnrollment.Attach(EnrollmentToRemove);
                            db.DbmsMemberEnrollment.Remove(EnrollmentToRemove);

                            int IncorrectItemDeleted = db.SaveChanges();

                            if (IncorrectItemDeleted > 0)
                            {
                                Removed = true;
                            }
                        }
                    }
                }

                return Removed;

            }
            catch(Exception ex)
            {
                return Removed;
            }
        }

        private bool RemoveIncorrectMember(Guid IncorrectMember)
        {
            bool Removed = false;

            try
            {
                using (var db = new ICMS2DbContext())
                {
                    IcmsMember MemberToRemove = new IcmsMember();

                    MemberToRemove = (from inc in db.DbmsMembers
                                      where inc.member_id == IncorrectMember
                                      select inc).SingleOrDefault();

                    if (MemberToRemove != null)
                    {
                        if (IncorrectMember.Equals(MemberToRemove.member_id))
                        {
                            db.DbmsMembers.Attach(MemberToRemove);
                            db.DbmsMembers.Remove(MemberToRemove);

                            int IncorrectItemDeleted = db.SaveChanges();

                            if (IncorrectItemDeleted > 0)
                            {
                                Removed = true;
                            }
                        }
                    }
                }

                return Removed;

            }
            catch (Exception ex)
            {
                return Removed;
            }
        }



        private void RemoveIncorrectMemberBackup(Guid IncorrectMemberId)
        {
            try
            {
                RemoveBackupReferralCodes(IncorrectMemberId);
                RemoveBackupReferralInterQualData(IncorrectMemberId);
                RemoveBackupReferralLetters(IncorrectMemberId);
                RemoveBackupReferrals(IncorrectMemberId);
                RemoveBackupReferralMissingReferTo(IncorrectMemberId);
                RemoveBackupReferralWorkflow(IncorrectMemberId);

                RemoveBackupMemberAddressDmAlternate(IncorrectMemberId);
                RemoveBackupMemberAddresses(IncorrectMemberId);
                RemoveBackupMemberCareCoordinationCallSavingsSavings(IncorrectMemberId);
                RemoveBackupMemberClaimDiagnosis(IncorrectMemberId);
                RemoveBackupMemberConditionAcuities(IncorrectMemberId);
                RemoveBackupMemberCustomerServiceAlerts(IncorrectMemberId);
                RemoveBackupMemberFaxes(IncorrectMemberId);
                RemoveBackupMemberHealthPlanReferences(IncorrectMemberId);
                RemoveBackupMemberLabs(IncorrectMemberId);
                RemoveBackupMemberLcmFollowupNotes(IncorrectMemberId);
                RemoveBackupMemberMdReviewReference(IncorrectMemberId);
                RemoveBackupMemberMedAllergies(IncorrectMemberId);
                RemoveBackupMemberMeds(IncorrectMemberId);
                RemoveBackupMemberMedsHighDollarTasks(IncorrectMemberId);
                RemoveBackupMemberMedsHistories(IncorrectMemberId);
                RemoveBackupMemberMedsPharmacyFeeds(IncorrectMemberId);
                RemoveBackupMemberNoteAttachments(IncorrectMemberId);
                RemoveBackupMemberNotes(IncorrectMemberId);
                RemoveBackupMemberNotesSummaries(IncorrectMemberId);
                RemoveBackupMemberPcps(IncorrectMemberId);
                RemoveBackupMemberPhones(IncorrectMemberId);
                RemoveBackupMemberPictures(IncorrectMemberId);
                RemoveBackupMemberProfilePictures(IncorrectMemberId);
                RemoveBackupMemberPrograms(IncorrectMemberId);
                RemoveBackupMemberQualityCareNotes(IncorrectMemberId);
                RemoveBackupMemberReferralMedicines(IncorrectMemberId);
                RemoveBackupMemberReferralQocs(IncorrectMemberId);
                RemoveBackupMemberReferralUpdatesWorkflow(IncorrectMemberId);
                RemoveBackupMemberRelativeDiseaseHistories(IncorrectMemberId);
                RemoveBackupMemberRenalTasks(IncorrectMemberId);
                RemoveBackupMemberReturnedLetters(IncorrectMemberId);
                RemoveBackupMemberSignatureFiles(IncorrectMemberId);
                RemoveBackupMemberStratLevel(IncorrectMemberId);
                RemoveBackupMemberTasks(IncorrectMemberId);
                RemoveBackupMemberToolProgramStaus(IncorrectMemberId);
                RemoveBackupMemberUpdateReferences(IncorrectMemberId);
                RemoveBackupMemberVitals(IncorrectMemberId);

                RemoveBackupUtilizationDayNotes(IncorrectMemberId);
                RemoveBackupUtilizationDays(IncorrectMemberId);
                RemoveBackupUtilizationDischargeNotes(IncorrectMemberId);
                RemoveBackupUtilizationReviews(IncorrectMemberId);
                RemoveBackupUtilizationSavings(IncorrectMemberId);

                RemoveBackupAcountsReceivablePayments(IncorrectMemberId);
                RemoveBackupAdmissionCareplanCounts(IncorrectMemberId);
                RemoveBackupAdmissions(IncorrectMemberId);
                RemoveBackupAuthorizationUpdates(IncorrectMemberId);
                RemoveBackupBillingUpdateHistoryLog(IncorrectMemberId);
                RemoveBackupBillingBackups(IncorrectMemberId);
                RemoveBackupMemberCareCoordinationCalls(IncorrectMemberId);
                RemoveBackupCarePlanNotesAttachments(IncorrectMemberId);
                RemoveBackupCaseOwners(IncorrectMemberId);
                RemoveBackupClinicalRequestHistories(IncorrectMemberId);
                RemoveBackupClinicalRequestProviders(IncorrectMemberId);
                RemoveBackupCrBillingWorktables(IncorrectMemberId);
                RemoveBackupCmMemberNotes(IncorrectMemberId);
                RemoveBackupClinicalReviewBills(IncorrectMemberId);
                RemoveBackupCodeRemovalItems(IncorrectMemberId);
                RemoveBackupDentalVisits(IncorrectMemberId);
                RemoveBackupDepartmentBedVacancies(IncorrectMemberId);
                RemoveBackupDependentMemberUpdateReferences(IncorrectMemberId);
                RemoveBackupDiseaseManagementNotesAttachments(IncorrectMemberId);
                RemoveBackupDmMemberSavings(IncorrectMemberId);
                RemoveBackupEmailOutbounds(IncorrectMemberId);
                RemoveBackupEpisodesOfCares(IncorrectMemberId);
                RemoveBackupInboundFaxReferralRemovals(IncorrectMemberId);
                RemoveBackupInboundVoicemails(IncorrectMemberId);
                RemoveBackupLcmBillingWorktables(IncorrectMemberId);
                RemoveBackupLcmInfo(IncorrectMemberId);
                RemoveBackupLcmReportNeededForBillingTasks(IncorrectMemberId);
                RemoveBackupLcmReportQaNotes(IncorrectMemberId);
                RemoveBackupLcmReportQaTasks(IncorrectMemberId);
                RemoveBackupLcmReportQaNotesTaskReferences(IncorrectMemberId);
                RemoveBackupLcnReportFaxes(IncorrectMemberId);
                RemoveBackupLetterReportFaxes(IncorrectMemberId);
                RemoveBackupMdReviewDeterminations(IncorrectMemberId);
                RemoveBackupMdReviewFollowups(IncorrectMemberId);
                RemoveBackupMdReviewQuestions(IncorrectMemberId);
                RemoveBackupMdReviewRequests(IncorrectMemberId);
                RemoveBackupMonthlyLcmManagementQas(IncorrectMemberId);
                RemoveBackupMonthlyUtilizationManagements(IncorrectMemberId);
                RemoveBackupStdBillingWorktables(IncorrectMemberId);
                RemoveBackupSuspendCaseToTaskReferences(IncorrectMemberId);
                RemoveBackupSuspendedNotes(IncorrectMemberId);
                RemoveBackupSuspendedNotesOverrides(IncorrectMemberId);
                RemoveBackupTelephoneNotesAttachments(IncorrectMemberId);
                RemoveBackupTransitionalCareReferences(IncorrectMemberId);
                RemoveBackupUmAssignedToTasks(IncorrectMemberId);
                RemoveBackupUmAssignedToTaskTouchedReferences(IncorrectMemberId);
                RemoveBackupUmAutoApprovedDiagnosisTasks(IncorrectMemberId);
                RemoveBackupUtilizationReviewNoteTasks(IncorrectMemberId);
                RemoveBackupWcBillingWorktables(IncorrectMemberId);
                RemoveBackupWebClientNoteTasks(IncorrectMemberId);
                RemoveBackupWebOnlinePrecertTasks(IncorrectMemberId);
            }
            catch(Exception ex)
            {

            }
        }


        private void RemoveBackupReferralCodes(Guid IncorrectMemberId)
        {
            try
            {
                List<MergedrMemberReferralCpts> RemoveCptCodes = new List<MergedrMemberReferralCpts>();
                List<MergedrMemberReferralDiags> RemoveIcdCodes = new List<MergedrMemberReferralDiags>();
                List<MergedrMemberReferralHcpcs> RemoveHcpcsCodes = new List<MergedrMemberReferralHcpcs>();

                using (var db = new ICMS2DbContext())
                {
                    RemoveCptCodes = (from inc in db.DbmsMergedMemberReferralCpts
                                      where inc.member_id == IncorrectMemberId
                                      select inc).ToList();

                    if (RemoveCptCodes != null)
                    {
                        if (RemoveCptCodes.Count > 0)
                        {
                            foreach (MergedrMemberReferralCpts DeleteCpt in RemoveCptCodes)
                            {
                                if (IncorrectMemberId.Equals(DeleteCpt.member_id))
                                {
                                    db.DbmsMergedMemberReferralCpts.Attach(DeleteCpt);
                                    db.DbmsMergedMemberReferralCpts.Remove(DeleteCpt);
                                    db.SaveChanges();
                                }
                            }
                        }
                    }
                }


                using (var dbicd = new ICMS2DbContext())
                {
                    RemoveIcdCodes = (from inc in dbicd.DbmsMergedMemberReferralDiags
                                      where inc.member_id == IncorrectMemberId
                                      select inc).ToList();

                    if (RemoveIcdCodes != null)
                    {
                        if (RemoveIcdCodes.Count > 0)
                        {
                            foreach (MergedrMemberReferralDiags DeleteIcd in RemoveIcdCodes)
                            {
                                if (IncorrectMemberId.Equals(DeleteIcd.member_id))
                                {
                                    dbicd.DbmsMergedMemberReferralDiags.Attach(DeleteIcd);
                                    dbicd.DbmsMergedMemberReferralDiags.Remove(DeleteIcd);
                                    dbicd.SaveChanges();
                                }
                            }
                        }
                    }
                }


                using (var dbhcpcs = new ICMS2DbContext())
                {
                    RemoveHcpcsCodes = (from inc in dbhcpcs.DbmsMergedMemberReferralHcpcs
                                      where inc.member_id == IncorrectMemberId
                                      select inc).ToList();

                    if (RemoveHcpcsCodes != null)
                    {
                        if (RemoveHcpcsCodes.Count > 0)
                        {
                            foreach (MergedrMemberReferralHcpcs DeleteHcpcs in RemoveHcpcsCodes)
                            {
                                if (IncorrectMemberId.Equals(DeleteHcpcs.member_id))
                                {
                                    dbhcpcs.DbmsMergedMemberReferralHcpcs.Attach(DeleteHcpcs);
                                    dbhcpcs.DbmsMergedMemberReferralHcpcs.Remove(DeleteHcpcs);
                                    dbhcpcs.SaveChanges();
                                }
                            }
                        }
                    }
                }

            }
            catch (Exception ex)
            {

            }
        }

        private void RemoveBackupReferralInterQualData(Guid IncorrectMemberId)
        {
            try
            {
                using (var db = new ICMS2DbContext())
                {
                    List<MergedrMemberReferralInterqualReference> RemoveItemList = new List<MergedrMemberReferralInterqualReference>();

                    RemoveItemList = (from inc in db.DbmsMergedrMemberReferralInterqualReference
                                      where inc.member_id == IncorrectMemberId
                                      select inc).ToList();

                    if (RemoveItemList != null)
                    {
                        if (RemoveItemList.Count > 0)
                        {
                            foreach (MergedrMemberReferralInterqualReference DeleteItem in RemoveItemList)
                            {
                                if (IncorrectMemberId.Equals(DeleteItem.member_id))
                                {
                                    db.DbmsMergedrMemberReferralInterqualReference.Attach(DeleteItem);
                                    db.DbmsMergedrMemberReferralInterqualReference.Remove(DeleteItem);
                                    db.SaveChanges();
                                }
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {

            }
        }

        private void RemoveBackupReferralLetters(Guid IncorrectMemberId)
        {
            try
            {
                using (var db = new ICMS2DbContext())
                {
                    List<MergedrMemberReferralLetters> RemoveItemList = new List<MergedrMemberReferralLetters>();

                    RemoveItemList = (from inc in db.DbmsMergedMemberReferralLetters
                                      where inc.member_id == IncorrectMemberId
                                      select inc).ToList();

                    if (RemoveItemList != null)
                    {
                        if (RemoveItemList.Count > 0)
                        {
                            foreach (MergedrMemberReferralLetters DeleteItem in RemoveItemList)
                            {
                                if (IncorrectMemberId.Equals(DeleteItem.member_id))
                                {
                                    db.DbmsMergedMemberReferralLetters.Attach(DeleteItem);
                                    db.DbmsMergedMemberReferralLetters.Remove(DeleteItem);
                                    db.SaveChanges();
                                }
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {

            }
        }

        private void RemoveBackupReferrals(Guid IncorrectMemberId)
        {
            try
            {
                using (var db = new ICMS2DbContext())
                {
                    List<MergerMemberReferral> RemoveItemList = new List<MergerMemberReferral>();

                    RemoveItemList = (from inc in db.DbmsMergeMemberReferral
                                      where inc.member_id == IncorrectMemberId
                                      select inc).ToList();

                    if (RemoveItemList != null)
                    {
                        if (RemoveItemList.Count > 0)
                        {
                            foreach (MergerMemberReferral DeleteItem in RemoveItemList)
                            {
                                if (IncorrectMemberId.Equals(DeleteItem.member_id))
                                {
                                    db.DbmsMergeMemberReferral.Attach(DeleteItem);
                                    db.DbmsMergeMemberReferral.Remove(DeleteItem);
                                    db.SaveChanges();
                                }
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {

            }
        }

        private void RemoveBackupReferralMissingReferTo(Guid IncorrectMemberId)
        {
            try
            {
                using (var db = new ICMS2DbContext())
                {
                    List<MergedrReferralMissingReferTo> RemoveItemList = new List<MergedrReferralMissingReferTo>();

                    RemoveItemList = (from inc in db.DbmsMergedReferralMissingReferTo
                                      where inc.member_id == IncorrectMemberId
                                      select inc).ToList();

                    if (RemoveItemList != null)
                    {
                        if (RemoveItemList.Count > 0)
                        {
                            foreach (MergedrReferralMissingReferTo DeleteItem in RemoveItemList)
                            {
                                if (IncorrectMemberId.Equals(DeleteItem.member_id))
                                {
                                    db.DbmsMergedReferralMissingReferTo.Attach(DeleteItem);
                                    db.DbmsMergedReferralMissingReferTo.Remove(DeleteItem);
                                    db.SaveChanges();
                                }
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {

            }
        }

        private void RemoveBackupReferralWorkflow(Guid IncorrectMemberId)
        {
            try
            {
                using (var db = new ICMS2DbContext())
                {
                    List<MergedrMemberReferralWorkflow> RemoveItemList = new List<MergedrMemberReferralWorkflow>();

                    RemoveItemList = (from inc in db.DbmsMergedMemberReferralWorkflow
                                      where inc.member_id == IncorrectMemberId
                                      select inc).ToList();

                    if (RemoveItemList != null)
                    {
                        if (RemoveItemList.Count > 0)
                        {
                            foreach (MergedrMemberReferralWorkflow DeleteItem in RemoveItemList)
                            {
                                if (IncorrectMemberId.Equals(DeleteItem.member_id))
                                {
                                    db.DbmsMergedMemberReferralWorkflow.Attach(DeleteItem);
                                    db.DbmsMergedMemberReferralWorkflow.Remove(DeleteItem);
                                    db.SaveChanges();
                                }
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {

            }
        }

        private void RemoveBackupMemberAddressDmAlternate(Guid IncorrectMemberId)
        {
            try
            {
                using (var db = new ICMS2DbContext())
                {
                    List<MergedMemberAddressDmAlternate> RemoveItemList = new List<MergedMemberAddressDmAlternate>();

                    RemoveItemList = (from inc in db.DbmsMergedMemberAddressDmAlternate
                                      where inc.member_id == IncorrectMemberId
                                      select inc).ToList();

                    if (RemoveItemList != null)
                    {
                        if (RemoveItemList.Count > 0)
                        {
                            foreach (MergedMemberAddressDmAlternate DeleteItem in RemoveItemList)
                            {
                                if (IncorrectMemberId.Equals(DeleteItem.member_id))
                                {
                                    db.DbmsMergedMemberAddressDmAlternate.Attach(DeleteItem);
                                    db.DbmsMergedMemberAddressDmAlternate.Remove(DeleteItem);
                                    db.SaveChanges();
                                }
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {

            }
        }

        private void RemoveBackupMemberAddresses(Guid IncorrectMemberId)
        {
            try
            {
                using (var db = new ICMS2DbContext())
                {
                    List<MergedMemberAddress> RemoveItemList = new List<MergedMemberAddress>();

                    RemoveItemList = (from inc in db.DbmsMergedMemberAddress
                                      where inc.member_id == IncorrectMemberId
                                      select inc).ToList();

                    if (RemoveItemList != null)
                    {
                        if (RemoveItemList.Count > 0)
                        {
                            foreach (MergedMemberAddress DeleteItem in RemoveItemList)
                            {
                                if (IncorrectMemberId.Equals(DeleteItem.member_id))
                                {
                                    db.DbmsMergedMemberAddress.Attach(DeleteItem);
                                    db.DbmsMergedMemberAddress.Remove(DeleteItem);
                                    db.SaveChanges();
                                }
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {

            }
        }

        private void RemoveBackupMemberCareCoordinationCallSavingsSavings(Guid IncorrectMemberId)
        {
            try
            {
                using (var db = new ICMS2DbContext())
                {
                    List<MergedMemberCareCoordinationCallSavings> RemoveItemList = new List<MergedMemberCareCoordinationCallSavings>();

                    RemoveItemList = (from inc in db.DbmsMergedMemberCareCoordinationCallSavings
                                      where inc.member_id == IncorrectMemberId
                                      select inc).ToList();
                    
                    if (RemoveItemList != null)
                    {
                        if (RemoveItemList.Count > 0)
                        {
                            foreach (MergedMemberCareCoordinationCallSavings DeleteItem in RemoveItemList)
                            {
                                if (IncorrectMemberId.Equals(DeleteItem.member_id))
                                {
                                    db.DbmsMergedMemberCareCoordinationCallSavings.Attach(DeleteItem);
                                    db.DbmsMergedMemberCareCoordinationCallSavings.Remove(DeleteItem);
                                    db.SaveChanges();
                                }
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {

            }
        }

        private void RemoveBackupMemberClaimDiagnosis(Guid IncorrectMemberId)
        {
            try
            {
                using (var db = new ICMS2DbContext())
                {
                    List<MergedMemberClaimsDiagnosis> RemoveItemList = new List<MergedMemberClaimsDiagnosis>();
                    
                    RemoveItemList = (from inc in db.DbmsMergeMemberClaimsDiagnosis
                                      where inc.member_id == IncorrectMemberId
                                      select inc).ToList();

                    if (RemoveItemList != null)
                    {
                        if (RemoveItemList.Count > 0)
                        {
                            foreach (MergedMemberClaimsDiagnosis DeleteItem in RemoveItemList)
                            {
                                if (IncorrectMemberId.Equals(DeleteItem.member_id))
                                {
                                    db.DbmsMergeMemberClaimsDiagnosis.Attach(DeleteItem);
                                    db.DbmsMergeMemberClaimsDiagnosis.Remove(DeleteItem);
                                    db.SaveChanges();
                                }
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {

            }
        }

        private void RemoveBackupMemberConditionAcuities(Guid IncorrectMemberId)
        {
            try
            {
                using (var db = new ICMS2DbContext())
                {
                    List<MergedMemberConditionAcuity> RemoveItemList = new List<MergedMemberConditionAcuity>();
                    
                    RemoveItemList = (from inc in db.DbmsMergedMemberConditionAcuity
                                      where inc.member_id == IncorrectMemberId
                                      select inc).ToList();

                    if (RemoveItemList != null)
                    {
                        if (RemoveItemList.Count > 0)
                        {
                            foreach (MergedMemberConditionAcuity DeleteItem in RemoveItemList)
                            {
                                if (IncorrectMemberId.Equals(DeleteItem.member_id))
                                {
                                    db.DbmsMergedMemberConditionAcuity.Attach(DeleteItem);
                                    db.DbmsMergedMemberConditionAcuity.Remove(DeleteItem);
                                    db.SaveChanges();
                                }
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {

            }
        }

        private void RemoveBackupMemberCustomerServiceAlerts(Guid IncorrectMemberId)
        {
            try
            {
                using (var db = new ICMS2DbContext())
                {
                    List<MergedMemberCustomerServiceAlert> RemoveItemList = new List<MergedMemberCustomerServiceAlert>();
                    
                    RemoveItemList = (from inc in db.DbmsMergedMemberCustomerServiceAlert
                                      where inc.member_id == IncorrectMemberId
                                      select inc).ToList();

                    if (RemoveItemList != null)
                    {
                        if (RemoveItemList.Count > 0)
                        {
                            foreach (MergedMemberCustomerServiceAlert DeleteItem in RemoveItemList)
                            {
                                if (IncorrectMemberId.Equals(DeleteItem.member_id))
                                {
                                    db.DbmsMergedMemberCustomerServiceAlert.Attach(DeleteItem);
                                    db.DbmsMergedMemberCustomerServiceAlert.Remove(DeleteItem);
                                    db.SaveChanges();
                                }
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {

            }
        }

        private void RemoveBackupMemberFaxes(Guid IncorrectMemberId)
        {
            try
            {
                using (var db = new ICMS2DbContext())
                {
                    List<MergedrInboundFax> RemoveItemList = new List<MergedrInboundFax>();
                    
                    RemoveItemList = (from inc in db.DbmsMergedrInboundFax
                                      where inc.member_id == IncorrectMemberId
                                      select inc).ToList();

                    if (RemoveItemList != null)
                    {
                        if (RemoveItemList.Count > 0)
                        {
                            foreach (MergedrInboundFax DeleteItem in RemoveItemList)
                            {
                                if (IncorrectMemberId.Equals(DeleteItem.member_id))
                                {
                                    db.DbmsMergedrInboundFax.Attach(DeleteItem);
                                    db.DbmsMergedrInboundFax.Remove(DeleteItem);
                                    db.SaveChanges();
                                }
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {

            }
        }

        private void RemoveBackupMemberHealthPlanReferences(Guid IncorrectMemberId)
        {
            try
            {
                using (var db = new ICMS2DbContext())
                {
                    List<MergedMemberHealthPlanReference> RemoveItemList = new List<MergedMemberHealthPlanReference>();
                    
                    RemoveItemList = (from inc in db.DbmsMergedMemberHealthPlanReference
                                      where inc.member_id == IncorrectMemberId
                                      select inc).ToList();

                    if (RemoveItemList != null)
                    {
                        if (RemoveItemList.Count > 0)
                        {
                            foreach (MergedMemberHealthPlanReference DeleteItem in RemoveItemList)
                            {
                                if (IncorrectMemberId.Equals(DeleteItem.member_id))
                                {
                                    db.DbmsMergedMemberHealthPlanReference.Attach(DeleteItem);
                                    db.DbmsMergedMemberHealthPlanReference.Remove(DeleteItem);
                                    db.SaveChanges();
                                }
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {

            }
        }

        private void RemoveBackupMemberLabs(Guid IncorrectMemberId)
        {
            try
            {
                using (var db = new ICMS2DbContext())
                {
                    List<MergedMemberLab> RemoveItemList = new List<MergedMemberLab>();
                    
                    RemoveItemList = (from inc in db.DbmsMergedMemberLab
                                      where inc.member_id == IncorrectMemberId
                                      select inc).ToList();

                    if (RemoveItemList != null)
                    {
                        if (RemoveItemList.Count > 0)
                        {
                            foreach (MergedMemberLab DeleteItem in RemoveItemList)
                            {
                                if (IncorrectMemberId.Equals(DeleteItem.member_id))
                                {
                                    db.DbmsMergedMemberLab.Attach(DeleteItem);
                                    db.DbmsMergedMemberLab.Remove(DeleteItem);
                                    db.SaveChanges();
                                }
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {

            }
        }

        private void RemoveBackupMemberLcmFollowupNotes(Guid IncorrectMemberId)
        {
            try
            {
                using (var db = new ICMS2DbContext())
                {
                    List<MergedMemberLcmFollowupNotes> RemoveItemList = new List<MergedMemberLcmFollowupNotes>();
                    
                    RemoveItemList = (from inc in db.DbmsMergedMemberLcmFollowupNotes
                                      where inc.member_id == IncorrectMemberId
                                      select inc).ToList();

                    if (RemoveItemList != null)
                    {
                        if (RemoveItemList.Count > 0)
                        {
                            foreach (MergedMemberLcmFollowupNotes DeleteItem in RemoveItemList)
                            {
                                if (IncorrectMemberId.Equals(DeleteItem.member_id))
                                {
                                    db.DbmsMergedMemberLcmFollowupNotes.Attach(DeleteItem);
                                    db.DbmsMergedMemberLcmFollowupNotes.Remove(DeleteItem);
                                    db.SaveChanges();
                                }
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {

            }
        }

        private void RemoveBackupMemberMdReviewReference(Guid IncorrectMemberId)
        {
            try
            {
                using (var db = new ICMS2DbContext())
                {
                    List<MergedMemberMdReviewReference> RemoveItemList = new List<MergedMemberMdReviewReference>();
                    
                    RemoveItemList = (from inc in db.DbmsMergedMemberMdReviewReference
                                      where inc.member_id == IncorrectMemberId
                                      select inc).ToList();

                    if (RemoveItemList != null)
                    {
                        if (RemoveItemList.Count > 0)
                        {
                            foreach (MergedMemberMdReviewReference DeleteItem in RemoveItemList)
                            {
                                if (IncorrectMemberId.Equals(DeleteItem.member_id))
                                {
                                    db.DbmsMergedMemberMdReviewReference.Attach(DeleteItem);
                                    db.DbmsMergedMemberMdReviewReference.Remove(DeleteItem);
                                    db.SaveChanges();
                                }
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {

            }
        }

        private void RemoveBackupMemberMedAllergies(Guid IncorrectMemberId)
        {
            try
            {
                using (var db = new ICMS2DbContext())
                {
                    List<MergedMemberMedsAllergies> RemoveItemList = new List<MergedMemberMedsAllergies>();
                    
                    RemoveItemList = (from inc in db.DbmsMergedMemberMedsAllergies
                                      where inc.member_id == IncorrectMemberId
                                      select inc).ToList();

                    if (RemoveItemList != null)
                    {
                        if (RemoveItemList.Count > 0)
                        {
                            foreach (MergedMemberMedsAllergies DeleteItem in RemoveItemList)
                            {
                                if (IncorrectMemberId.Equals(DeleteItem.member_id))
                                {
                                    db.DbmsMergedMemberMedsAllergies.Attach(DeleteItem);
                                    db.DbmsMergedMemberMedsAllergies.Remove(DeleteItem);
                                    db.SaveChanges();
                                }
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {

            }
        }

        private void RemoveBackupMemberMeds(Guid IncorrectMemberId)
        {
            try
            {
                using (var db = new ICMS2DbContext())
                {
                    List<MergedMemberMeds> RemoveItemList = new List<MergedMemberMeds>();
                    
                    RemoveItemList = (from inc in db.DbmsMergedMemberMeds
                                      where inc.member_id == IncorrectMemberId
                                      select inc).ToList();

                    if (RemoveItemList != null)
                    {
                        if (RemoveItemList.Count > 0)
                        {
                            foreach (MergedMemberMeds DeleteItem in RemoveItemList)
                            {
                                if (IncorrectMemberId.Equals(DeleteItem.member_id))
                                {
                                    db.DbmsMergedMemberMeds.Attach(DeleteItem);
                                    db.DbmsMergedMemberMeds.Remove(DeleteItem);
                                    db.SaveChanges();
                                }
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {

            }
        }

        private void RemoveBackupMemberMedsHighDollarTasks(Guid IncorrectMemberId)
        {
            try
            {
                using (var db = new ICMS2DbContext())
                {
                    List<MergedMemberMedsHighDollarTask> RemoveItemList = new List<MergedMemberMedsHighDollarTask>();
                    
                    RemoveItemList = (from inc in db.DbmsMergedMemberMedsHighDollarTask
                                      where inc.member_id == IncorrectMemberId
                                      select inc).ToList();

                    if (RemoveItemList != null)
                    {
                        if (RemoveItemList.Count > 0)
                        {
                            foreach (MergedMemberMedsHighDollarTask DeleteItem in RemoveItemList)
                            {
                                if (IncorrectMemberId.Equals(DeleteItem.member_id))
                                {
                                    db.DbmsMergedMemberMedsHighDollarTask.Attach(DeleteItem);
                                    db.DbmsMergedMemberMedsHighDollarTask.Remove(DeleteItem);
                                    db.SaveChanges();
                                }
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {

            }
        }

        private void RemoveBackupMemberMedsHistories(Guid IncorrectMemberId)
        {
            try
            {
                using (var db = new ICMS2DbContext())
                {
                    List<MergedMemberMedsHistory> RemoveItemList = new List<MergedMemberMedsHistory>();
                    
                    RemoveItemList = (from inc in db.DbmsMergedMemberMedsHistory
                                      where inc.member_id == IncorrectMemberId
                                      select inc).ToList();

                    if (RemoveItemList != null)
                    {
                        if (RemoveItemList.Count > 0)
                        {
                            foreach (MergedMemberMedsHistory DeleteItem in RemoveItemList)
                            {
                                if (IncorrectMemberId.Equals(DeleteItem.member_id))
                                {
                                    db.DbmsMergedMemberMedsHistory.Attach(DeleteItem);
                                    db.DbmsMergedMemberMedsHistory.Remove(DeleteItem);
                                    db.SaveChanges();
                                }
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {

            }
        }

        private void RemoveBackupMemberMedsPharmacyFeeds(Guid IncorrectMemberId)
        {
            try
            {
                using (var db = new ICMS2DbContext())
                {
                    List<MergedMemberMedsPharmacyFeed> RemoveItemList = new List<MergedMemberMedsPharmacyFeed>();
                    
                    RemoveItemList = (from inc in db.DbmsMergedMemberMedsPharmacyFeed
                                      where inc.member_id == IncorrectMemberId
                                      select inc).ToList();

                    if (RemoveItemList != null)
                    {
                        if (RemoveItemList.Count > 0)
                        {
                            foreach (MergedMemberMedsPharmacyFeed DeleteItem in RemoveItemList)
                            {
                                if (IncorrectMemberId.Equals(DeleteItem.member_id))
                                {
                                    db.DbmsMergedMemberMedsPharmacyFeed.Attach(DeleteItem);
                                    db.DbmsMergedMemberMedsPharmacyFeed.Remove(DeleteItem);
                                    db.SaveChanges();
                                }
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {

            }
        }

        private void RemoveBackupMemberNoteAttachments(Guid IncorrectMemberId)
        {
            try
            {
                using (var db = new ICMS2DbContext())
                {
                    List<MergedMemberNotesAttachment> RemoveItemList = new List<MergedMemberNotesAttachment>();
                    
                    RemoveItemList = (from inc in db.DbmsMergedMemberNotesAttachment
                                      where inc.member_id == IncorrectMemberId
                                      select inc).ToList();

                    if (RemoveItemList != null)
                    {
                        if (RemoveItemList.Count > 0)
                        {
                            foreach (MergedMemberNotesAttachment DeleteItem in RemoveItemList)
                            {
                                if (IncorrectMemberId.Equals(DeleteItem.member_id))
                                {
                                    db.DbmsMergedMemberNotesAttachment.Attach(DeleteItem);
                                    db.DbmsMergedMemberNotesAttachment.Remove(DeleteItem);
                                    db.SaveChanges();
                                }
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {

            }
        }

        private void RemoveBackupMemberNotes(Guid IncorrectMemberId)
        {
            try
            {
                using (var db = new ICMS2DbContext())
                {
                    List<MergedMemberNotes> RemoveItemList = new List<MergedMemberNotes>();
                    
                    RemoveItemList = (from inc in db.DbmsMergedMemberNotes
                                      where inc.member_id == IncorrectMemberId
                                      select inc).ToList();

                    if (RemoveItemList != null)
                    {
                        if (RemoveItemList.Count > 0)
                        {
                            foreach (MergedMemberNotes DeleteItem in RemoveItemList)
                            {
                                if (IncorrectMemberId.Equals(DeleteItem.member_id))
                                {
                                    db.DbmsMergedMemberNotes.Attach(DeleteItem);
                                    db.DbmsMergedMemberNotes.Remove(DeleteItem);
                                    db.SaveChanges();
                                }
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {

            }
        }

        private void RemoveBackupMemberNotesSummaries(Guid IncorrectMemberId)
        {
            try
            {
                using (var db = new ICMS2DbContext())
                {
                    List<MergedMemberNotesSummary> RemoveItemList = new List<MergedMemberNotesSummary>();
                    
                    RemoveItemList = (from inc in db.DbmsMergedMemberNotesSummary
                                      where inc.member_id == IncorrectMemberId
                                      select inc).ToList();

                    if (RemoveItemList != null)
                    {
                        if (RemoveItemList.Count > 0)
                        {
                            foreach (MergedMemberNotesSummary DeleteItem in RemoveItemList)
                            {
                                if (IncorrectMemberId.Equals(DeleteItem.member_id))
                                {
                                    db.DbmsMergedMemberNotesSummary.Attach(DeleteItem);
                                    db.DbmsMergedMemberNotesSummary.Remove(DeleteItem);
                                    db.SaveChanges();
                                }
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {

            }
        }

        private void RemoveBackupMemberPcps(Guid IncorrectMemberId)
        {
            try
            {
                using (var db = new ICMS2DbContext())
                {
                    List<MergedMemberPcp> RemoveItemList = new List<MergedMemberPcp>();
                    
                    RemoveItemList = (from inc in db.DbmsMergedMemberPcp
                                      where inc.member_id == IncorrectMemberId
                                      select inc).ToList();

                    if (RemoveItemList != null)
                    {
                        if (RemoveItemList.Count > 0)
                        {
                            foreach (MergedMemberPcp DeleteItem in RemoveItemList)
                            {
                                if (IncorrectMemberId.Equals(DeleteItem.member_id))
                                {
                                    db.DbmsMergedMemberPcp.Attach(DeleteItem);
                                    db.DbmsMergedMemberPcp.Remove(DeleteItem);
                                    db.SaveChanges();
                                }
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {

            }
        }

        private void RemoveBackupMemberPhones(Guid IncorrectMemberId)
        {
            try
            {
                using (var db = new ICMS2DbContext())
                {
                    List<MergedMemberPhone> RemoveItemList = new List<MergedMemberPhone>();
                    
                    RemoveItemList = (from inc in db.DbmsMergedMemberPhone
                                      where inc.member_id == IncorrectMemberId
                                      select inc).ToList();

                    if (RemoveItemList != null)
                    {
                        if (RemoveItemList.Count > 0)
                        {
                            foreach (MergedMemberPhone DeleteItem in RemoveItemList)
                            {
                                if (IncorrectMemberId.Equals(DeleteItem.member_id))
                                {
                                    db.DbmsMergedMemberPhone.Attach(DeleteItem);
                                    db.DbmsMergedMemberPhone.Remove(DeleteItem);
                                    db.SaveChanges();
                                }
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {

            }
        }

        private void RemoveBackupMemberPictures(Guid IncorrectMemberId)
        {
            try
            {
                using (var db = new ICMS2DbContext())
                {
                    List<MergedMemberPictures> RemoveItemList = new List<MergedMemberPictures>();
                    
                    RemoveItemList = (from inc in db.DbmsMergedMemberPictures
                                      where inc.member_id == IncorrectMemberId
                                      select inc).ToList();

                    if (RemoveItemList != null)
                    {
                        if (RemoveItemList.Count > 0)
                        {
                            foreach (MergedMemberPictures DeleteItem in RemoveItemList)
                            {
                                if (IncorrectMemberId.Equals(DeleteItem.member_id))
                                {
                                    db.DbmsMergedMemberPictures.Attach(DeleteItem);
                                    db.DbmsMergedMemberPictures.Remove(DeleteItem);
                                    db.SaveChanges();
                                }
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {

            }
        }

        private void RemoveBackupMemberProfilePictures(Guid IncorrectMemberId)
        {
            try
            {
                using (var db = new ICMS2DbContext())
                {
                    List<MergedMemberProfilePicture> RemoveItemList = new List<MergedMemberProfilePicture>();
                    
                    RemoveItemList = (from inc in db.DbmsMergedMemberProfilePicture
                                      where inc.member_id == IncorrectMemberId
                                      select inc).ToList();

                    if (RemoveItemList != null)
                    {
                        if (RemoveItemList.Count > 0)
                        {
                            foreach (MergedMemberProfilePicture DeleteItem in RemoveItemList)
                            {
                                if (IncorrectMemberId.Equals(DeleteItem.member_id))
                                {
                                    db.DbmsMergedMemberProfilePicture.Attach(DeleteItem);
                                    db.DbmsMergedMemberProfilePicture.Remove(DeleteItem);
                                    db.SaveChanges();
                                }
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {

            }
        }

        private void RemoveBackupMemberPrograms(Guid IncorrectMemberId)
        {
            try
            {
                using (var db = new ICMS2DbContext())
                {
                    List<MergedMemberProgram> RemoveItemList = new List<MergedMemberProgram>();
                    
                    RemoveItemList = (from inc in db.DbmsMergedMemberProgram
                                      where inc.member_id == IncorrectMemberId
                                      select inc).ToList();

                    if (RemoveItemList != null)
                    {
                        if (RemoveItemList.Count > 0)
                        {
                            foreach (MergedMemberProgram DeleteItem in RemoveItemList)
                            {
                                if (IncorrectMemberId.Equals(DeleteItem.member_id))
                                {
                                    db.DbmsMergedMemberProgram.Attach(DeleteItem);
                                    db.DbmsMergedMemberProgram.Remove(DeleteItem);
                                    db.SaveChanges();
                                }
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {

            }
        }

        private void RemoveBackupMemberQualityCareNotes(Guid IncorrectMemberId)
        {
            try
            {
                using (var db = new ICMS2DbContext())
                {
                    List<MergedrQualityCareNotes> RemoveItemList = new List<MergedrQualityCareNotes>();
                    
                    RemoveItemList = (from inc in db.DbmsMergedrQualityCareNotes
                                      where inc.member_id == IncorrectMemberId
                                      select inc).ToList();

                    if (RemoveItemList != null)
                    {
                        if (RemoveItemList.Count > 0)
                        {
                            foreach (MergedrQualityCareNotes DeleteItem in RemoveItemList)
                            {
                                if (IncorrectMemberId.Equals(DeleteItem.member_id))
                                {
                                    db.DbmsMergedrQualityCareNotes.Attach(DeleteItem);
                                    db.DbmsMergedrQualityCareNotes.Remove(DeleteItem);
                                    db.SaveChanges();
                                }
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {

            }
        }

        private void RemoveBackupMemberReferralMedicines(Guid IncorrectMemberId)
        {
            try
            {
                using (var db = new ICMS2DbContext())
                {
                    List<MergedrMemberReferralMedicine> RemoveItemList = new List<MergedrMemberReferralMedicine>();
                    
                    RemoveItemList = (from inc in db.DbmsMergedrMemberReferralMedicine
                                      where inc.member_id == IncorrectMemberId
                                      select inc).ToList();

                    if (RemoveItemList != null)
                    {
                        if (RemoveItemList.Count > 0)
                        {
                            foreach (MergedrMemberReferralMedicine DeleteItem in RemoveItemList)
                            {
                                if (IncorrectMemberId.Equals(DeleteItem.member_id))
                                {
                                    db.DbmsMergedrMemberReferralMedicine.Attach(DeleteItem);
                                    db.DbmsMergedrMemberReferralMedicine.Remove(DeleteItem);
                                    db.SaveChanges();
                                }
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {

            }
        }

        private void RemoveBackupMemberReferralQocs(Guid IncorrectMemberId)
        {
            try
            {
                using (var db = new ICMS2DbContext())
                {
                    List<MergedrMemberReferralQoc> RemoveItemList = new List<MergedrMemberReferralQoc>();
                    
                    RemoveItemList = (from inc in db.DbmsMergedrMemberReferralQoc
                                      where inc.member_id == IncorrectMemberId
                                      select inc).ToList();

                    if (RemoveItemList != null)
                    {
                        if (RemoveItemList.Count > 0)
                        {
                            foreach (MergedrMemberReferralQoc DeleteItem in RemoveItemList)
                            {
                                if (IncorrectMemberId.Equals(DeleteItem.member_id))
                                {
                                    db.DbmsMergedrMemberReferralQoc.Attach(DeleteItem);
                                    db.DbmsMergedrMemberReferralQoc.Remove(DeleteItem);
                                    db.SaveChanges();
                                }
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {

            }
        }

        private void RemoveBackupMemberReferralUpdatesWorkflow(Guid IncorrectMemberId)
        {
            try
            {
                using (var db = new ICMS2DbContext())
                {
                    List<MergedrMemberReferralUpdatesWorkflow> RemoveItemList = new List<MergedrMemberReferralUpdatesWorkflow>();
                    
                    RemoveItemList = (from inc in db.DbmsMergedrMemberReferralUpdatesWorkflow
                                      where inc.member_id == IncorrectMemberId
                                      select inc).ToList();

                    if (RemoveItemList != null)
                    {
                        if (RemoveItemList.Count > 0)
                        {
                            foreach (MergedrMemberReferralUpdatesWorkflow DeleteItem in RemoveItemList)
                            {
                                if (IncorrectMemberId.Equals(DeleteItem.member_id))
                                {
                                    db.DbmsMergedrMemberReferralUpdatesWorkflow.Attach(DeleteItem);
                                    db.DbmsMergedrMemberReferralUpdatesWorkflow.Remove(DeleteItem);
                                    db.SaveChanges();
                                }
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {

            }
        }

        private void RemoveBackupMemberRelativeDiseaseHistories(Guid IncorrectMemberId)
        {
            try
            {
                using (var db = new ICMS2DbContext())
                {
                    List<MergedMemberRelativeDiseaseHistory> RemoveItemList = new List<MergedMemberRelativeDiseaseHistory>();
                    
                    RemoveItemList = (from inc in db.DbmsMergedMemberRelativeDiseaseHistory
                                      where inc.member_id == IncorrectMemberId
                                      select inc).ToList();

                    if (RemoveItemList != null)
                    {
                        if (RemoveItemList.Count > 0)
                        {
                            foreach (MergedMemberRelativeDiseaseHistory DeleteItem in RemoveItemList)
                            {
                                if (IncorrectMemberId.Equals(DeleteItem.member_id))
                                {
                                    db.DbmsMergedMemberRelativeDiseaseHistory.Attach(DeleteItem);
                                    db.DbmsMergedMemberRelativeDiseaseHistory.Remove(DeleteItem);
                                    db.SaveChanges();
                                }
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {

            }
        }

        private void RemoveBackupMemberRenalTasks(Guid IncorrectMemberId)
        {
            try
            {
                using (var db = new ICMS2DbContext())
                {
                    List<MergedMemberRenalTask> RemoveItemList = new List<MergedMemberRenalTask>();
                    
                    RemoveItemList = (from inc in db.DbmsMergedMemberRenalTask
                                      where inc.member_id == IncorrectMemberId
                                      select inc).ToList();

                    if (RemoveItemList != null)
                    {
                        if (RemoveItemList.Count > 0)
                        {
                            foreach (MergedMemberRenalTask DeleteItem in RemoveItemList)
                            {
                                if (IncorrectMemberId.Equals(DeleteItem.member_id))
                                {
                                    db.DbmsMergedMemberRenalTask.Attach(DeleteItem);
                                    db.DbmsMergedMemberRenalTask.Remove(DeleteItem);
                                    db.SaveChanges();
                                }
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {

            }
        }

        private void RemoveBackupMemberReturnedLetters(Guid IncorrectMemberId)
        {
            try
            {
                using (var db = new ICMS2DbContext())
                {
                    List<MergedMemberReturnedLetters> RemoveItemList = new List<MergedMemberReturnedLetters>();
                    
                    RemoveItemList = (from inc in db.DbmsMergedMemberReturnedLetters
                                      where inc.member_id == IncorrectMemberId
                                      select inc).ToList();

                    if (RemoveItemList != null)
                    {
                        if (RemoveItemList.Count > 0)
                        {
                            foreach (MergedMemberReturnedLetters DeleteItem in RemoveItemList)
                            {
                                if (IncorrectMemberId.Equals(DeleteItem.member_id))
                                {
                                    db.DbmsMergedMemberReturnedLetters.Attach(DeleteItem);
                                    db.DbmsMergedMemberReturnedLetters.Remove(DeleteItem);
                                    db.SaveChanges();
                                }
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {

            }
        }

        private void RemoveBackupMemberSignatureFiles(Guid IncorrectMemberId)
        {
            try
            {
                using (var db = new ICMS2DbContext())
                {
                    List<MergedMemberSignatureFiles> RemoveItemList = new List<MergedMemberSignatureFiles>();
                    
                    RemoveItemList = (from inc in db.DbmsMergedMemberSignatureFile
                                      where inc.member_id == IncorrectMemberId
                                      select inc).ToList();

                    if (RemoveItemList != null)
                    {
                        if (RemoveItemList.Count > 0)
                        {
                            foreach (MergedMemberSignatureFiles DeleteItem in RemoveItemList)
                            {
                                if (IncorrectMemberId.Equals(DeleteItem.member_id))
                                {
                                    db.DbmsMergedMemberSignatureFile.Attach(DeleteItem);
                                    db.DbmsMergedMemberSignatureFile.Remove(DeleteItem);
                                    db.SaveChanges();
                                }
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {

            }
        }

        private void RemoveBackupMemberStratLevel(Guid IncorrectMemberId)
        {
            try
            {
                using (var db = new ICMS2DbContext())
                {
                    List<MergedMemberStratLevel> RemoveItemList = new List<MergedMemberStratLevel>();
                    
                    RemoveItemList = (from inc in db.DbmsMergedMemberStratLevel
                                      where inc.member_id == IncorrectMemberId
                                      select inc).ToList();

                    if (RemoveItemList != null)
                    {
                        if (RemoveItemList.Count > 0)
                        {
                            foreach (MergedMemberStratLevel DeleteItem in RemoveItemList)
                            {
                                if (IncorrectMemberId.Equals(DeleteItem.member_id))
                                {
                                    db.DbmsMergedMemberStratLevel.Attach(DeleteItem);
                                    db.DbmsMergedMemberStratLevel.Remove(DeleteItem);
                                    db.SaveChanges();
                                }
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {

            }
        }

        private void RemoveBackupMemberTasks(Guid IncorrectMemberId)
        {
            try
            {
                using (var db = new ICMS2DbContext())
                {
                    List<MergedMemberTask> RemoveItemList = new List<MergedMemberTask>();
                    
                    RemoveItemList = (from inc in db.DbmsMergedMemberTask
                                      where inc.member_id == IncorrectMemberId
                                      select inc).ToList();

                    if (RemoveItemList != null)
                    {
                        if (RemoveItemList.Count > 0)
                        {
                            foreach (MergedMemberTask DeleteItem in RemoveItemList)
                            {
                                if (IncorrectMemberId.Equals(DeleteItem.member_id))
                                {
                                    db.DbmsMergedMemberTask.Attach(DeleteItem);
                                    db.DbmsMergedMemberTask.Remove(DeleteItem);
                                    db.SaveChanges();
                                }
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {

            }
        }

        private void RemoveBackupMemberToolProgramStaus(Guid IncorrectMemberId)
        {
            try
            {
                using (var db = new ICMS2DbContext())
                {
                    List<MergedMemberToolProgramStatus> RemoveItemList = new List<MergedMemberToolProgramStatus>();
                    
                    RemoveItemList = (from inc in db.DbmsMergedMemberToolProgramStatus
                                      where inc.member_id == IncorrectMemberId
                                      select inc).ToList();

                    if (RemoveItemList != null)
                    {
                        if (RemoveItemList.Count > 0)
                        {
                            foreach (MergedMemberToolProgramStatus DeleteItem in RemoveItemList)
                            {
                                if (IncorrectMemberId.Equals(DeleteItem.member_id))
                                {
                                    db.DbmsMergedMemberToolProgramStatus.Attach(DeleteItem);
                                    db.DbmsMergedMemberToolProgramStatus.Remove(DeleteItem);
                                    db.SaveChanges();
                                }
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {

            }
        }

        private void RemoveBackupMemberUpdateReferences(Guid IncorrectMemberId)
        {
            try
            {
                using (var db = new ICMS2DbContext())
                {
                    List<MergedMemberUpdateReference> RemoveItemList = new List<MergedMemberUpdateReference>();
                    
                    RemoveItemList = (from inc in db.DbmsMergedMemberUpdateReference
                                      where inc.member_id == IncorrectMemberId
                                      select inc).ToList();

                    if (RemoveItemList != null)
                    {
                        if (RemoveItemList.Count > 0)
                        {
                            foreach (MergedMemberUpdateReference DeleteItem in RemoveItemList)
                            {
                                if (IncorrectMemberId.Equals(DeleteItem.member_id))
                                {
                                    db.DbmsMergedMemberUpdateReference.Attach(DeleteItem);
                                    db.DbmsMergedMemberUpdateReference.Remove(DeleteItem);
                                    db.SaveChanges();
                                }
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {

            }
        }

        private void RemoveBackupMemberVitals(Guid IncorrectMemberId)
        {
            try
            {
                using (var db = new ICMS2DbContext())
                {
                    List<MergedMemberVitals> RemoveItemList = new List<MergedMemberVitals>();
                    
                    RemoveItemList = (from inc in db.DbmsMergedMemberVitals
                                      where inc.member_id == IncorrectMemberId
                                      select inc).ToList();

                    if (RemoveItemList != null)
                    {
                        if (RemoveItemList.Count > 0)
                        {
                            foreach (MergedMemberVitals DeleteItem in RemoveItemList)
                            {
                                if (IncorrectMemberId.Equals(DeleteItem.member_id))
                                {
                                    db.DbmsMergedMemberVitals.Attach(DeleteItem);
                                    db.DbmsMergedMemberVitals.Remove(DeleteItem);
                                    db.SaveChanges();
                                }
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {

            }
        }

        private void RemoveBackupUtilizationDayNotes(Guid IncorrectMemberId)
        {
            try
            {
                using (var db = new ICMS2DbContext())
                {
                    List<MergedrUtilizationDaysNotes> RemoveItemList = new List<MergedrUtilizationDaysNotes>();
                    
                    RemoveItemList = (from inc in db.DbmsMergedrUtilizationDaysNotes
                                      where inc.member_id == IncorrectMemberId
                                      select inc).ToList();

                    if (RemoveItemList != null)
                    {
                        if (RemoveItemList.Count > 0)
                        {
                            foreach (MergedrUtilizationDaysNotes DeleteItem in RemoveItemList)
                            {
                                if (IncorrectMemberId.Equals(DeleteItem.member_id))
                                {
                                    db.DbmsMergedrUtilizationDaysNotes.Attach(DeleteItem);
                                    db.DbmsMergedrUtilizationDaysNotes.Remove(DeleteItem);
                                    db.SaveChanges();
                                }
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {

            }
        }

        private void RemoveBackupUtilizationDays(Guid IncorrectMemberId)
        {
            try
            {
                using (var db = new ICMS2DbContext())
                {
                    List<MergedrUtilizationDays> RemoveItemList = new List<MergedrUtilizationDays>();
                    
                    RemoveItemList = (from inc in db.DbmsMergedrUtilizationDays
                                      where inc.member_id == IncorrectMemberId
                                      select inc).ToList();

                    if (RemoveItemList != null)
                    {
                        if (RemoveItemList.Count > 0)
                        {
                            foreach (MergedrUtilizationDays DeleteItem in RemoveItemList)
                            {
                                if (IncorrectMemberId.Equals(DeleteItem.member_id))
                                {
                                    db.DbmsMergedrUtilizationDays.Attach(DeleteItem);
                                    db.DbmsMergedrUtilizationDays.Remove(DeleteItem);
                                    db.SaveChanges();
                                }
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {

            }
        }

        private void RemoveBackupUtilizationDischargeNotes(Guid IncorrectMemberId)
        {
            try
            {
                using (var db = new ICMS2DbContext())
                {
                    List<MergedrUtilizationDischargeNote> RemoveItemList = new List<MergedrUtilizationDischargeNote>();
                    
                    RemoveItemList = (from inc in db.DbmsMergedrUtilizationDischargeNote
                                      where inc.member_id == IncorrectMemberId
                                      select inc).ToList();

                    if (RemoveItemList != null)
                    {
                        if (RemoveItemList.Count > 0)
                        {
                            foreach (MergedrUtilizationDischargeNote DeleteItem in RemoveItemList)
                            {
                                if (IncorrectMemberId.Equals(DeleteItem.member_id))
                                {
                                    db.DbmsMergedrUtilizationDischargeNote.Attach(DeleteItem);
                                    db.DbmsMergedrUtilizationDischargeNote.Remove(DeleteItem);
                                    db.SaveChanges();
                                }
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {

            }
        }

        private void RemoveBackupUtilizationReviews(Guid IncorrectMemberId)
        {
            try
            {
                using (var db = new ICMS2DbContext())
                {
                    List<MergedrUtilizationReviews> RemoveItemList = new List<MergedrUtilizationReviews>();
                    
                    RemoveItemList = (from inc in db.DbmsMergedrUtilizationReviews
                                      where inc.member_id == IncorrectMemberId
                                      select inc).ToList();

                    if (RemoveItemList != null)
                    {
                        if (RemoveItemList.Count > 0)
                        {
                            foreach (MergedrUtilizationReviews DeleteItem in RemoveItemList)
                            {
                                if (IncorrectMemberId.Equals(DeleteItem.member_id))
                                {
                                    db.DbmsMergedrUtilizationReviews.Attach(DeleteItem);
                                    db.DbmsMergedrUtilizationReviews.Remove(DeleteItem);
                                    db.SaveChanges();
                                }
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {

            }
        }

        private void RemoveBackupUtilizationSavings(Guid IncorrectMemberId)
        {
            try
            {
                using (var db = new ICMS2DbContext())
                {
                    List<MergedrUtilizationSavings> RemoveItemList = new List<MergedrUtilizationSavings>();
                    
                    RemoveItemList = (from inc in db.DbmsMergedrUtilizationSavings
                                      where inc.member_id == IncorrectMemberId
                                      select inc).ToList();

                    if (RemoveItemList != null)
                    {
                        if (RemoveItemList.Count > 0)
                        {
                            foreach (MergedrUtilizationSavings DeleteItem in RemoveItemList)
                            {
                                if (IncorrectMemberId.Equals(DeleteItem.member_id))
                                {
                                    db.DbmsMergedrUtilizationSavings.Attach(DeleteItem);
                                    db.DbmsMergedrUtilizationSavings.Remove(DeleteItem);
                                    db.SaveChanges();
                                }
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {

            }
        }

        private void RemoveBackupAcountsReceivablePayments(Guid IncorrectMemberId)
        {
            try
            {
                using (var db = new ICMS2DbContext())
                {
                    List<MergedAccountsReceivablePayments> RemoveItemList = new List<MergedAccountsReceivablePayments>();
                    
                    RemoveItemList = (from inc in db.DbmsMergedAccountsReceivablePayments
                                      where inc.member_id == IncorrectMemberId
                                      select inc).ToList();

                    if (RemoveItemList != null)
                    {
                        if (RemoveItemList.Count > 0)
                        {
                            foreach (MergedAccountsReceivablePayments DeleteItem in RemoveItemList)
                            {
                                if (IncorrectMemberId.Equals(DeleteItem.member_id))
                                {
                                    db.DbmsMergedAccountsReceivablePayments.Attach(DeleteItem);
                                    db.DbmsMergedAccountsReceivablePayments.Remove(DeleteItem);
                                    db.SaveChanges();
                                }
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {

            }
        }

        private void RemoveBackupAdmissionCareplanCounts(Guid IncorrectMemberId)
        {
            try
            {
                using (var db = new ICMS2DbContext())
                {
                    List<MergedrAdmissionCareplanCount> RemoveItemList = new List<MergedrAdmissionCareplanCount>();
                    
                    RemoveItemList = (from inc in db.DbmsMergedAdmissionCareplanCount
                                      where inc.member_id == IncorrectMemberId
                                      select inc).ToList();

                    if (RemoveItemList != null)
                    {
                        if (RemoveItemList.Count > 0)
                        {
                            foreach (MergedrAdmissionCareplanCount DeleteItem in RemoveItemList)
                            {
                                if (IncorrectMemberId.Equals(DeleteItem.member_id))
                                {
                                    db.DbmsMergedAdmissionCareplanCount.Attach(DeleteItem);
                                    db.DbmsMergedAdmissionCareplanCount.Remove(DeleteItem);
                                    db.SaveChanges();
                                }
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {

            }
        }

        private void RemoveBackupAdmissions(Guid IncorrectMemberId)
        {
            try
            {
                using (var db = new ICMS2DbContext())
                {
                    List<MergedAdmission> RemoveItemList = new List<MergedAdmission>();
                    
                    RemoveItemList = (from inc in db.DbmsMergedAdmission
                                      where inc.member_id == IncorrectMemberId
                                      select inc).ToList();

                    if (RemoveItemList != null)
                    {
                        if (RemoveItemList.Count > 0)
                        {
                            foreach (MergedAdmission DeleteItem in RemoveItemList)
                            {
                                if (IncorrectMemberId.Equals(DeleteItem.member_id))
                                {
                                    db.DbmsMergedAdmission.Attach(DeleteItem);
                                    db.DbmsMergedAdmission.Remove(DeleteItem);
                                    db.SaveChanges();
                                }
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {

            }
        }

        private void RemoveBackupAuthorizationUpdates(Guid IncorrectMemberId)
        {
            try
            {
                using (var db = new ICMS2DbContext())
                {
                    List<MergedrAuthorizationUpdates> RemoveItemList = new List<MergedrAuthorizationUpdates>();
                    
                    RemoveItemList = (from inc in db.DbmsMergedAuthorizationUpdates
                                      where inc.member_id == IncorrectMemberId
                                      select inc).ToList();

                    if (RemoveItemList != null)
                    {
                        if (RemoveItemList.Count > 0)
                        {
                            foreach (MergedrAuthorizationUpdates DeleteItem in RemoveItemList)
                            {
                                if (IncorrectMemberId.Equals(DeleteItem.member_id))
                                {
                                    db.DbmsMergedAuthorizationUpdates.Attach(DeleteItem);
                                    db.DbmsMergedAuthorizationUpdates.Remove(DeleteItem);
                                    db.SaveChanges();
                                }
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {

            }
        }

        private void RemoveBackupBillingUpdateHistoryLog(Guid IncorrectMemberId)
        {
            try
            {
                using (var db = new ICMS2DbContext())
                {
                    List<MergedBillingUpdateHistoryLog> RemoveItemList = new List<MergedBillingUpdateHistoryLog>();
                    
                    RemoveItemList = (from inc in db.DbmsMergedBillingUpdateHistoryLog
                                      where inc.member_id == IncorrectMemberId
                                      select inc).ToList();

                    if (RemoveItemList != null)
                    {
                        if (RemoveItemList.Count > 0)
                        {
                            foreach (MergedBillingUpdateHistoryLog DeleteItem in RemoveItemList)
                            {
                                if (IncorrectMemberId.Equals(DeleteItem.member_id))
                                {
                                    db.DbmsMergedBillingUpdateHistoryLog.Attach(DeleteItem);
                                    db.DbmsMergedBillingUpdateHistoryLog.Remove(DeleteItem);
                                    db.SaveChanges();
                                }
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {

            }
        }

        private void RemoveBackupBillingBackups(Guid IncorrectMemberId)
        {
            try
            {
                using (var db = new IcmsDataStagingDbContext())
                {
                    List<MergedBillingBackup> RemoveItemList = new List<MergedBillingBackup>();
                    
                    RemoveItemList = (from inc in db.DbmsMergedBillingBackup
                                      where inc.member_id == IncorrectMemberId
                                      select inc).ToList();

                    if (RemoveItemList != null)
                    {
                        if (RemoveItemList.Count > 0)
                        {
                            foreach (MergedBillingBackup DeleteItem in RemoveItemList)
                            {
                                if (IncorrectMemberId.Equals(DeleteItem.member_id))
                                {
                                    db.DbmsMergedBillingBackup.Attach(DeleteItem);
                                    db.DbmsMergedBillingBackup.Remove(DeleteItem);
                                    db.SaveChanges();
                                }
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {

            }
        }

        private void RemoveBackupMemberCareCoordinationCalls(Guid IncorrectMemberId)

        {
            try
            {
                using (var db = new ICMS2DbContext())
                {
                    List<MergedMemberCareCoordinationCall> RemoveItemList = new List<MergedMemberCareCoordinationCall>();

                    RemoveItemList = (from inc in db.DbmsMergedMemberCareCoordinationCall
                                      where inc.member_id == IncorrectMemberId
                                      select inc).ToList();

                    if (RemoveItemList != null)
                    {
                        if (RemoveItemList.Count > 0)
                        {
                            foreach (MergedMemberCareCoordinationCall DeleteItem in RemoveItemList)
                            {
                                if (IncorrectMemberId.Equals(DeleteItem.member_id))
                                {
                                    db.DbmsMergedMemberCareCoordinationCall.Attach(DeleteItem);
                                    db.DbmsMergedMemberCareCoordinationCall.Remove(DeleteItem);
                                    db.SaveChanges();
                                }
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {

            }
        }

        private void RemoveBackupCarePlanNotesAttachments(Guid IncorrectMemberId)
        {
            try
            {
                using (var db = new ICMS2DbContext())
                {
                    List<MergedCarePlanNotesAttachment> RemoveItemList = new List<MergedCarePlanNotesAttachment>();
                    
                    RemoveItemList = (from inc in db.DbmsMergedCarePlanNotesAttachment
                                      where inc.member_id == IncorrectMemberId
                                      select inc).ToList();

                    if (RemoveItemList != null)
                    {
                        if (RemoveItemList.Count > 0)
                        {
                            foreach (MergedCarePlanNotesAttachment DeleteItem in RemoveItemList)
                            {
                                if (IncorrectMemberId.Equals(DeleteItem.member_id))
                                {
                                    db.DbmsMergedCarePlanNotesAttachment.Attach(DeleteItem);
                                    db.DbmsMergedCarePlanNotesAttachment.Remove(DeleteItem);
                                    db.SaveChanges();
                                }
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {

            }
        }

        private void RemoveBackupCaseOwners(Guid IncorrectMemberId)
        {
            try
            {
                using (var db = new ICMS2DbContext())
                {
                    List<MergedCaseOwner> RemoveItemList = new List<MergedCaseOwner>();
                    
                    RemoveItemList = (from inc in db.DbmsMergedCaseOwner
                                      where inc.member_id == IncorrectMemberId
                                      select inc).ToList();

                    if (RemoveItemList != null)
                    {
                        if (RemoveItemList.Count > 0)
                        {
                            foreach (MergedCaseOwner DeleteItem in RemoveItemList)
                            {
                                if (IncorrectMemberId.Equals(DeleteItem.member_id))
                                {
                                    db.DbmsMergedCaseOwner.Attach(DeleteItem);
                                    db.DbmsMergedCaseOwner.Remove(DeleteItem);
                                    db.SaveChanges();
                                }
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {

            }
        }

        private void RemoveBackupClinicalRequestHistories(Guid IncorrectMemberId)
        {
            try
            {
                using (var db = new ICMS2DbContext())
                {
                    List<MergedClinicalRequestHistory> RemoveItemList = new List<MergedClinicalRequestHistory>();
                    
                    RemoveItemList = (from inc in db.DbmsMergedClinicalRequestHistory
                                      where inc.member_id == IncorrectMemberId
                                      select inc).ToList();

                    if (RemoveItemList != null)
                    {
                        if (RemoveItemList.Count > 0)
                        {
                            foreach (MergedClinicalRequestHistory DeleteItem in RemoveItemList)
                            {
                                if (IncorrectMemberId.Equals(DeleteItem.member_id))
                                {
                                    db.DbmsMergedClinicalRequestHistory.Attach(DeleteItem);
                                    db.DbmsMergedClinicalRequestHistory.Remove(DeleteItem);
                                    db.SaveChanges();
                                }
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {

            }
        }

        private void RemoveBackupClinicalRequestProviders(Guid IncorrectMemberId)
        {
            try
            {
                using (var db = new ICMS2DbContext())
                {
                    List<MergedClinicalRequestProviders> RemoveItemList = new List<MergedClinicalRequestProviders>();
                    
                    RemoveItemList = (from inc in db.DbmsMergedClinicalRequestProviders
                                      where inc.member_id == IncorrectMemberId
                                      select inc).ToList();

                    if (RemoveItemList != null)
                    {
                        if (RemoveItemList.Count > 0)
                        {
                            foreach (MergedClinicalRequestProviders DeleteItem in RemoveItemList)
                            {
                                if (IncorrectMemberId.Equals(DeleteItem.member_id))
                                {
                                    db.DbmsMergedClinicalRequestProviders.Attach(DeleteItem);
                                    db.DbmsMergedClinicalRequestProviders.Remove(DeleteItem);
                                    db.SaveChanges();
                                }
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {

            }
        }

        private void RemoveBackupCrBillingWorktables(Guid IncorrectMemberId)
        {
            try
            {
                using (var db = new IcmsDataStagingDbContext())
                {
                    List<MergedCrBillingWorktable> RemoveItemList = new List<MergedCrBillingWorktable>();
                    
                    RemoveItemList = (from inc in db.DbmsMergedCrBillingWorktable
                                      where inc.member_id == IncorrectMemberId
                                      select inc).ToList();

                    if (RemoveItemList != null)
                    {
                        if (RemoveItemList.Count > 0)
                        {
                            foreach (MergedCrBillingWorktable DeleteItem in RemoveItemList)
                            {
                                if (IncorrectMemberId.Equals(DeleteItem.member_id))
                                {
                                    db.DbmsMergedCrBillingWorktable.Attach(DeleteItem);
                                    db.DbmsMergedCrBillingWorktable.Remove(DeleteItem);
                                    db.SaveChanges();
                                }
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {

            }
        }

        private void RemoveBackupCmMemberNotes(Guid IncorrectMemberId)
        {
            try
            {
                using (var db = new ICMS2DbContext())
                {
                    List<MergedCmMemberNote> RemoveItemList = new List<MergedCmMemberNote>();
                    
                    RemoveItemList = (from inc in db.DbmsMergedCmMemberNote
                                      where inc.member_id == IncorrectMemberId
                                      select inc).ToList();

                    if (RemoveItemList != null)
                    {
                        if (RemoveItemList.Count > 0)
                        {
                            foreach (MergedCmMemberNote DeleteItem in RemoveItemList)
                            {
                                if (IncorrectMemberId.Equals(DeleteItem.member_id))
                                {
                                    db.DbmsMergedCmMemberNote.Attach(DeleteItem);
                                    db.DbmsMergedCmMemberNote.Remove(DeleteItem);
                                    db.SaveChanges();
                                }
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {

            }
        }

        private void RemoveBackupClinicalReviewBills(Guid IncorrectMemberId)
        {
            try
            {
                using (var db = new ICMS2DbContext())
                {
                    List<MergedClinicalReviewBills> RemoveItemList = new List<MergedClinicalReviewBills>();
                    
                    RemoveItemList = (from inc in db.DbmsMergedClinicalReviewBills
                                      where inc.member_id == IncorrectMemberId
                                      select inc).ToList();

                    if (RemoveItemList != null)
                    {
                        if (RemoveItemList.Count > 0)
                        {
                            foreach (MergedClinicalReviewBills DeleteItem in RemoveItemList)
                            {
                                if (IncorrectMemberId.Equals(DeleteItem.member_id))
                                {
                                    db.DbmsMergedClinicalReviewBills.Attach(DeleteItem);
                                    db.DbmsMergedClinicalReviewBills.Remove(DeleteItem);
                                    db.SaveChanges();
                                }
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {

            }
        }

        private void RemoveBackupCodeRemovalItems(Guid IncorrectMemberId)
        {
            try
            {
                using (var db = new ICMS2DbContext())
                {
                    List<MergedCodeRemovalItems> RemoveItemList = new List<MergedCodeRemovalItems>();
                    
                    RemoveItemList = (from inc in db.DbmsMergedCodeRemovalItems
                                      where inc.member_id == IncorrectMemberId
                                      select inc).ToList();

                    if (RemoveItemList != null)
                    {
                        if (RemoveItemList.Count > 0)
                        {
                            foreach (MergedCodeRemovalItems DeleteItem in RemoveItemList)
                            {
                                if (IncorrectMemberId.Equals(DeleteItem.member_id))
                                {
                                    db.DbmsMergedCodeRemovalItems.Attach(DeleteItem);
                                    db.DbmsMergedCodeRemovalItems.Remove(DeleteItem);
                                    db.SaveChanges();
                                }
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {

            }
        }

        private void RemoveBackupDentalVisits(Guid IncorrectMemberId)
        {
            try
            {
                using (var db = new ICMS2DbContext())
                {
                    List<MergedrDentalVisits> RemoveItemList = new List<MergedrDentalVisits>();
                    
                    RemoveItemList = (from inc in db.DbmsMergedrDentalVisits
                                      where inc.member_id == IncorrectMemberId
                                      select inc).ToList();

                    if (RemoveItemList != null)
                    {
                        if (RemoveItemList.Count > 0)
                        {
                            foreach (MergedrDentalVisits DeleteItem in RemoveItemList)
                            {
                                if (IncorrectMemberId.Equals(DeleteItem.member_id))
                                {
                                    db.DbmsMergedrDentalVisits.Attach(DeleteItem);
                                    db.DbmsMergedrDentalVisits.Remove(DeleteItem);
                                    db.SaveChanges();
                                }
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {

            }
        }

        private void RemoveBackupDepartmentBedVacancies(Guid IncorrectMemberId)
        {
            try
            {
                using (var db = new ICMS2DbContext())
                {
                    List<MergedrDepartmentBedVacancy> RemoveItemList = new List<MergedrDepartmentBedVacancy>();
                    
                    RemoveItemList = (from inc in db.DbmsMergedrDepartmentBedVacancy
                                      where inc.member_id == IncorrectMemberId
                                      select inc).ToList();

                    if (RemoveItemList != null)
                    {
                        if (RemoveItemList.Count > 0)
                        {
                            foreach (MergedrDepartmentBedVacancy DeleteItem in RemoveItemList)
                            {
                                if (IncorrectMemberId.Equals(DeleteItem.member_id))
                                {
                                    db.DbmsMergedrDepartmentBedVacancy.Attach(DeleteItem);
                                    db.DbmsMergedrDepartmentBedVacancy.Remove(DeleteItem);
                                    db.SaveChanges();
                                }
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {

            }
        }

        private void RemoveBackupDependentMemberUpdateReferences(Guid IncorrectMemberId)
        {
            try
            {
                using (var db = new ICMS2DbContext())
                {
                    List<MergedDependentMemberUpdateReference> RemoveItemList = new List<MergedDependentMemberUpdateReference>();
                    
                    RemoveItemList = (from inc in db.DbmsMergedDependentMemberUpdateReference
                                      where inc.member_id == IncorrectMemberId
                                      select inc).ToList();

                    if (RemoveItemList != null)
                    {
                        if (RemoveItemList.Count > 0)
                        {
                            foreach (MergedDependentMemberUpdateReference DeleteItem in RemoveItemList)
                            {
                                if (IncorrectMemberId.Equals(DeleteItem.member_id))
                                {
                                    db.DbmsMergedDependentMemberUpdateReference.Attach(DeleteItem);
                                    db.DbmsMergedDependentMemberUpdateReference.Remove(DeleteItem);
                                    db.SaveChanges();
                                }
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {

            }
        }

        private void RemoveBackupDiseaseManagementNotesAttachments(Guid IncorrectMemberId)
        {
            try
            {
                using (var db = new ICMS2DbContext())
                {
                    List<MergedDiseaseManagementNotesAttachment> RemoveItemList = new List<MergedDiseaseManagementNotesAttachment>();
                    
                    RemoveItemList = (from inc in db.DbmsMergedDiseaseManagementNotesAttachment
                                      where inc.member_id == IncorrectMemberId
                                      select inc).ToList();

                    if (RemoveItemList != null)
                    {
                        if (RemoveItemList.Count > 0)
                        {
                            foreach (MergedDiseaseManagementNotesAttachment DeleteItem in RemoveItemList)
                            {
                                if (IncorrectMemberId.Equals(DeleteItem.member_id))
                                {
                                    db.DbmsMergedDiseaseManagementNotesAttachment.Attach(DeleteItem);
                                    db.DbmsMergedDiseaseManagementNotesAttachment.Remove(DeleteItem);
                                    db.SaveChanges();
                                }
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {

            }
        }

        private void RemoveBackupDmMemberSavings(Guid IncorrectMemberId)
        {
            try
            {
                using (var db = new ICMS2DbContext())
                {
                    List<MergedDmMemberSavings> RemoveItemList = new List<MergedDmMemberSavings>();
                    
                    RemoveItemList = (from inc in db.DbmsMergedDmMemberSavings
                                      where inc.member_id == IncorrectMemberId
                                      select inc).ToList();

                    if (RemoveItemList != null)
                    {
                        if (RemoveItemList.Count > 0)
                        {
                            foreach (MergedDmMemberSavings DeleteItem in RemoveItemList)
                            {
                                if (IncorrectMemberId.Equals(DeleteItem.member_id))
                                {
                                    db.DbmsMergedDmMemberSavings.Attach(DeleteItem);
                                    db.DbmsMergedDmMemberSavings.Remove(DeleteItem);
                                    db.SaveChanges();
                                }
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {

            }
        }

        private void RemoveBackupEmailOutbounds(Guid IncorrectMemberId)
        {
            try
            {
                using (var db = new ICMS2DbContext())
                {
                    List<MergedEmailsOutbound> RemoveItemList = new List<MergedEmailsOutbound>();
                    
                    RemoveItemList = (from inc in db.DbmsMergedEmailsOutbound
                                      where inc.member_id == IncorrectMemberId
                                      select inc).ToList();

                    if (RemoveItemList != null)
                    {
                        if (RemoveItemList.Count > 0)
                        {
                            foreach (MergedEmailsOutbound DeleteItem in RemoveItemList)
                            {
                                if (IncorrectMemberId.Equals(DeleteItem.member_id))
                                {
                                    db.DbmsMergedEmailsOutbound.Attach(DeleteItem);
                                    db.DbmsMergedEmailsOutbound.Remove(DeleteItem);
                                    db.SaveChanges();
                                }
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {

            }
        }

        private void RemoveBackupEpisodesOfCares(Guid IncorrectMemberId)
        {
            try
            {
                using (var db = new ICMS2DbContext())
                {
                    List<MergedEpisodesOfCare> RemoveItemList = new List<MergedEpisodesOfCare>();
                    
                    RemoveItemList = (from inc in db.DbmsMergedEpisodesOfCare
                                      where inc.member_id == IncorrectMemberId
                                      select inc).ToList();

                    if (RemoveItemList != null)
                    {
                        if (RemoveItemList.Count > 0)
                        {
                            foreach (MergedEpisodesOfCare DeleteItem in RemoveItemList)
                            {
                                if (IncorrectMemberId.Equals(DeleteItem.member_id))
                                {
                                    db.DbmsMergedEpisodesOfCare.Attach(DeleteItem);
                                    db.DbmsMergedEpisodesOfCare.Remove(DeleteItem);
                                    db.SaveChanges();
                                }
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {

            }
        }

        private void RemoveBackupInboundFaxReferralRemovals(Guid IncorrectMemberId)
        {
            try
            {
                using (var db = new ICMS2DbContext())
                {
                    List<MergedrInboundFaxReferralRemoval> RemoveItemList = new List<MergedrInboundFaxReferralRemoval>();
                    
                    RemoveItemList = (from inc in db.DbmsMergedInboundFaxReferralRemoval
                                      where inc.member_id == IncorrectMemberId
                                      select inc).ToList();

                    if (RemoveItemList != null)
                    {
                        if (RemoveItemList.Count > 0)
                        {
                            foreach (MergedrInboundFaxReferralRemoval DeleteItem in RemoveItemList)
                            {
                                if (IncorrectMemberId.Equals(DeleteItem.member_id))
                                {
                                    db.DbmsMergedInboundFaxReferralRemoval.Attach(DeleteItem);
                                    db.DbmsMergedInboundFaxReferralRemoval.Remove(DeleteItem);
                                    db.SaveChanges();
                                }
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {

            }
        }

        private void RemoveBackupInboundVoicemails(Guid IncorrectMemberId)
        {
            try
            {
                using (var db = new ICMS2DbContext())
                {
                    List<MergedrInboundVoicemail> RemoveItemList = new List<MergedrInboundVoicemail>();
                    
                    RemoveItemList = (from inc in db.DbmsMergedInboundVoicemail
                                      where inc.member_id == IncorrectMemberId
                                      select inc).ToList();

                    if (RemoveItemList != null)
                    {
                        if (RemoveItemList.Count > 0)
                        {
                            foreach (MergedrInboundVoicemail DeleteItem in RemoveItemList)
                            {
                                if (IncorrectMemberId.Equals(DeleteItem.member_id))
                                {
                                    db.DbmsMergedInboundVoicemail.Attach(DeleteItem);
                                    db.DbmsMergedInboundVoicemail.Remove(DeleteItem);
                                    db.SaveChanges();
                                }
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {

            }
        }

        private void RemoveBackupLcmBillingWorktables(Guid IncorrectMemberId)
        {
            try
            {
                using (var db = new IcmsDataStagingDbContext())
                {
                    List<MergedLcmBillingWorktable> RemoveItemList = new List<MergedLcmBillingWorktable>();
                    
                    RemoveItemList = (from inc in db.DbmsMergedLcmBillingWorktable
                                      where inc.member_id == IncorrectMemberId
                                      select inc).ToList();

                    if (RemoveItemList != null)
                    {
                        if (RemoveItemList.Count > 0)
                        {
                            foreach (MergedLcmBillingWorktable DeleteItem in RemoveItemList)
                            {
                                if (IncorrectMemberId.Equals(DeleteItem.member_id))
                                {
                                    db.DbmsMergedLcmBillingWorktable.Attach(DeleteItem);
                                    db.DbmsMergedLcmBillingWorktable.Remove(DeleteItem);
                                    db.SaveChanges();
                                }
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {

            }
        }

        private void RemoveBackupLcmInfo(Guid IncorrectMemberId)
        {
            try
            {
                List<MergedMemberLcmInitial> RemoveInitRpts = new List<MergedMemberLcmInitial>();
                List<MergedMemberLcmActivity> RemoveActivityRpts = new List<MergedMemberLcmActivity>();
                List<MergedMemberLcmFollowupSavings> RemoveSavings = new List<MergedMemberLcmFollowupSavings>();

                using (var db = new ICMS2DbContext())
                {
                    RemoveInitRpts = (from inc in db.DbmsMergedMemberLcmInitial
                                      where inc.member_id == IncorrectMemberId
                                      select inc).ToList();

                    if (RemoveInitRpts != null)
                    {
                        if (RemoveInitRpts.Count > 0)
                        {
                            foreach (MergedMemberLcmInitial DeleteInitRpt in RemoveInitRpts)
                            {
                                if (IncorrectMemberId.Equals(DeleteInitRpt.member_id))
                                {
                                    db.DbmsMergedMemberLcmInitial.Attach(DeleteInitRpt);
                                    db.DbmsMergedMemberLcmInitial.Remove(DeleteInitRpt);
                                    db.SaveChanges();
                                }
                            }
                        }
                    }
                }


                using (var dbactrpt = new ICMS2DbContext())
                {
                    RemoveActivityRpts = (from inc in dbactrpt.DbmsMergedMemberLcmActivity
                                          where inc.member_id == IncorrectMemberId
                                          select inc).ToList();

                    if (RemoveActivityRpts != null)
                    {
                        if (RemoveActivityRpts.Count > 0)
                        {
                            foreach (MergedMemberLcmActivity DeleteActivityRpt in RemoveActivityRpts)
                            {
                                if (IncorrectMemberId.Equals(DeleteActivityRpt.member_id))
                                {
                                    dbactrpt.DbmsMergedMemberLcmActivity.Attach(DeleteActivityRpt);
                                    dbactrpt.DbmsMergedMemberLcmActivity.Remove(DeleteActivityRpt);
                                    dbactrpt.SaveChanges();
                                }
                            }
                        }
                    }
                }


                using (var dbsaving = new ICMS2DbContext())
                {
                    RemoveSavings = (from inc in dbsaving.DbmsMergedMemberLcmFollowupSavings
                                        where inc.member_id == IncorrectMemberId
                                        select inc).ToList();

                    if (RemoveSavings != null)
                    {
                        if (RemoveSavings.Count > 0)
                        {
                            foreach (MergedMemberLcmFollowupSavings DeleteSavings in RemoveSavings)
                            {
                                if (IncorrectMemberId.Equals(DeleteSavings.member_id))
                                {
                                    dbsaving.DbmsMergedMemberLcmFollowupSavings.Attach(DeleteSavings);
                                    dbsaving.DbmsMergedMemberLcmFollowupSavings.Remove(DeleteSavings);
                                    dbsaving.SaveChanges();
                                }
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {

            }
        }

        private void RemoveBackupLcmReportNeededForBillingTasks(Guid IncorrectMemberId)
        {
            try
            {
                using (var db = new ICMS2DbContext())
                {
                    List<MergedLcmReportNeededForBillingTask> RemoveItemList = new List<MergedLcmReportNeededForBillingTask>();
                    
                    RemoveItemList = (from inc in db.DbmsMergedLcmReportNeededForBillingTask
                                      where inc.member_id == IncorrectMemberId
                                      select inc).ToList();

                    if (RemoveItemList != null)
                    {
                        if (RemoveItemList.Count > 0)
                        {
                            foreach (MergedLcmReportNeededForBillingTask DeleteItem in RemoveItemList)
                            {
                                if (IncorrectMemberId.Equals(DeleteItem.member_id))
                                {
                                    db.DbmsMergedLcmReportNeededForBillingTask.Attach(DeleteItem);
                                    db.DbmsMergedLcmReportNeededForBillingTask.Remove(DeleteItem);
                                    db.SaveChanges();
                                }
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {

            }
        }

        private void RemoveBackupLcmReportQaNotes(Guid IncorrectMemberId)
        {
            try
            {
                using (var db = new ICMS2DbContext())
                {
                    List<MergedLcmReportQaNotes> RemoveItemList = new List<MergedLcmReportQaNotes>();
                    
                    RemoveItemList = (from inc in db.DbmsMergedLcmReportQaNotes
                                      where inc.member_id == IncorrectMemberId
                                      select inc).ToList();

                    if (RemoveItemList != null)
                    {
                        if (RemoveItemList.Count > 0)
                        {
                            foreach (MergedLcmReportQaNotes DeleteItem in RemoveItemList)
                            {
                                if (IncorrectMemberId.Equals(DeleteItem.member_id))
                                {
                                    db.DbmsMergedLcmReportQaNotes.Attach(DeleteItem);
                                    db.DbmsMergedLcmReportQaNotes.Remove(DeleteItem);
                                    db.SaveChanges();
                                }
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {

            }
        }

        private void RemoveBackupLcmReportQaTasks(Guid IncorrectMemberId)
        {
            try
            {
                using (var db = new ICMS2DbContext())
                {
                    List<MergedLcmReportQaTasks> RemoveItemList = new List<MergedLcmReportQaTasks>();
                    
                    RemoveItemList = (from inc in db.DbmsMergedLcmReportQaTasks
                                      where inc.member_id == IncorrectMemberId
                                      select inc).ToList();

                    if (RemoveItemList != null)
                    {
                        if (RemoveItemList.Count > 0)
                        {
                            foreach (MergedLcmReportQaTasks DeleteItem in RemoveItemList)
                            {
                                if (IncorrectMemberId.Equals(DeleteItem.member_id))
                                {
                                    db.DbmsMergedLcmReportQaTasks.Attach(DeleteItem);
                                    db.DbmsMergedLcmReportQaTasks.Remove(DeleteItem);
                                    db.SaveChanges();
                                }
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {

            }
        }

        private void RemoveBackupLcmReportQaNotesTaskReferences(Guid IncorrectMemberId)
        {
            try
            {
                using (var db = new ICMS2DbContext())
                {
                    List<MergedLcmReportQaNotesTaskReference> RemoveItemList = new List<MergedLcmReportQaNotesTaskReference>();
                    
                    RemoveItemList = (from inc in db.DbmsMergedLcmReportQaNotesTaskReference
                                      where inc.member_id == IncorrectMemberId
                                      select inc).ToList();

                    if (RemoveItemList != null)
                    {
                        if (RemoveItemList.Count > 0)
                        {
                            foreach (MergedLcmReportQaNotesTaskReference DeleteItem in RemoveItemList)
                            {
                                if (IncorrectMemberId.Equals(DeleteItem.member_id))
                                {
                                    db.DbmsMergedLcmReportQaNotesTaskReference.Attach(DeleteItem);
                                    db.DbmsMergedLcmReportQaNotesTaskReference.Remove(DeleteItem);
                                    db.SaveChanges();
                                }
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {

            }
        }

        private void RemoveBackupLcnReportFaxes(Guid IncorrectMemberId)
        {
            try
            {
                using (var db = new ICMS2DbContext())
                {
                    List<MergedLcnReportFax> RemoveItemList = new List<MergedLcnReportFax>();
                    
                    RemoveItemList = (from inc in db.DbmsMergedLcnReportFax
                                      where inc.member_id == IncorrectMemberId
                                      select inc).ToList();

                    if (RemoveItemList != null)
                    {
                        if (RemoveItemList.Count > 0)
                        {
                            foreach (MergedLcnReportFax DeleteItem in RemoveItemList)
                            {
                                if (IncorrectMemberId.Equals(DeleteItem.member_id))
                                {
                                    db.DbmsMergedLcnReportFax.Attach(DeleteItem);
                                    db.DbmsMergedLcnReportFax.Remove(DeleteItem);
                                    db.SaveChanges();
                                }
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {

            }
        }

        private void RemoveBackupLetterReportFaxes(Guid IncorrectMemberId)
        {
            try
            {
                using (var db = new ICMS2DbContext())
                {
                    List<MergedLetterReportFax> RemoveItemList = new List<MergedLetterReportFax>();
                    
                    RemoveItemList = (from inc in db.DbmsMergedLetterReportFax
                                      where inc.member_id == IncorrectMemberId
                                      select inc).ToList();

                    if (RemoveItemList != null)
                    {
                        if (RemoveItemList.Count > 0)
                        {
                            foreach (MergedLetterReportFax DeleteItem in RemoveItemList)
                            {
                                if (IncorrectMemberId.Equals(DeleteItem.member_id))
                                {
                                    db.DbmsMergedLetterReportFax.Attach(DeleteItem);
                                    db.DbmsMergedLetterReportFax.Remove(DeleteItem);
                                    db.SaveChanges();
                                }
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {

            }
        }

        private void RemoveBackupMdReviewDeterminations(Guid IncorrectMemberId)
        {
            try
            {
                using (var db = new ICMS2DbContext())
                {
                    List<MergedMdReviewDetermination> RemoveItemList = new List<MergedMdReviewDetermination>();
                    
                    RemoveItemList = (from inc in db.DbmsMergedMdReviewDetermination
                                      where inc.member_id == IncorrectMemberId
                                      select inc).ToList();

                    if (RemoveItemList != null)
                    {
                        if (RemoveItemList.Count > 0)
                        {
                            foreach (MergedMdReviewDetermination DeleteItem in RemoveItemList)
                            {
                                if (IncorrectMemberId.Equals(DeleteItem.member_id))
                                {
                                    db.DbmsMergedMdReviewDetermination.Attach(DeleteItem);
                                    db.DbmsMergedMdReviewDetermination.Remove(DeleteItem);
                                    db.SaveChanges();
                                }
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {

            }
        }

        private void RemoveBackupMdReviewFollowups(Guid IncorrectMemberId)
        {
            try
            {
                using (var db = new ICMS2DbContext())
                {
                    List<MergedMdReviewFollowup> RemoveItemList = new List<MergedMdReviewFollowup>();
                    
                    RemoveItemList = (from inc in db.DbmsMergedMdReviewFollowup
                                      where inc.member_id == IncorrectMemberId
                                      select inc).ToList();

                    if (RemoveItemList != null)
                    {
                        if (RemoveItemList.Count > 0)
                        {
                            foreach (MergedMdReviewFollowup DeleteItem in RemoveItemList)
                            {
                                if (IncorrectMemberId.Equals(DeleteItem.member_id))
                                {
                                    db.DbmsMergedMdReviewFollowup.Attach(DeleteItem);
                                    db.DbmsMergedMdReviewFollowup.Remove(DeleteItem);
                                    db.SaveChanges();
                                }
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {

            }
        }

        private void RemoveBackupMdReviewQuestions(Guid IncorrectMemberId)
        {
            try
            {
                using (var db = new ICMS2DbContext())
                {
                    List<MergedMdReviewQuestion> RemoveItemList = new List<MergedMdReviewQuestion>();
                    
                    RemoveItemList = (from inc in db.DbmsMergedMdReviewQuestion
                                      where inc.member_id == IncorrectMemberId
                                      select inc).ToList();

                    if (RemoveItemList != null)
                    {
                        if (RemoveItemList.Count > 0)
                        {
                            foreach (MergedMdReviewQuestion DeleteItem in RemoveItemList)
                            {
                                if (IncorrectMemberId.Equals(DeleteItem.member_id))
                                {
                                    db.DbmsMergedMdReviewQuestion.Attach(DeleteItem);
                                    db.DbmsMergedMdReviewQuestion.Remove(DeleteItem);
                                    db.SaveChanges();
                                }
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {

            }
        }

        private void RemoveBackupMdReviewRequests(Guid IncorrectMemberId)
        {
            try
            {
                using (var db = new ICMS2DbContext())
                {
                    List<MergedMdReviewRequest> RemoveItemList = new List<MergedMdReviewRequest>();
                    
                    RemoveItemList = (from inc in db.DbmsMergedMdReviewRequest
                                      where inc.member_id == IncorrectMemberId
                                      select inc).ToList();

                    if (RemoveItemList != null)
                    {
                        if (RemoveItemList.Count > 0)
                        {
                            foreach (MergedMdReviewRequest DeleteItem in RemoveItemList)
                            {
                                if (IncorrectMemberId.Equals(DeleteItem.member_id))
                                {
                                    db.DbmsMergedMdReviewRequest.Attach(DeleteItem);
                                    db.DbmsMergedMdReviewRequest.Remove(DeleteItem);
                                    db.SaveChanges();
                                }
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {

            }
        }

        private void RemoveBackupMonthlyLcmManagementQas(Guid IncorrectMemberId)
        {
            try
            {
                using (var db = new ICMS2DbContext())
                {
                    List<MergedMonthlyLcmManagementQa> RemoveItemList = new List<MergedMonthlyLcmManagementQa>();
                    
                    RemoveItemList = (from inc in db.DbmsMergedMonthlyLcmManagementQa
                                      where inc.member_id == IncorrectMemberId
                                      select inc).ToList();

                    if (RemoveItemList != null)
                    {
                        if (RemoveItemList.Count > 0)
                        {
                            foreach (MergedMonthlyLcmManagementQa DeleteItem in RemoveItemList)
                            {
                                if (IncorrectMemberId.Equals(DeleteItem.member_id))
                                {
                                    db.DbmsMergedMonthlyLcmManagementQa.Attach(DeleteItem);
                                    db.DbmsMergedMonthlyLcmManagementQa.Remove(DeleteItem);
                                    db.SaveChanges();
                                }
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {

            }
        }

        private void RemoveBackupMonthlyUtilizationManagements(Guid IncorrectMemberId)
        {
            try
            {
                using (var db = new ICMS2DbContext())
                {
                    List<MergedMonthlyUtilizationManagement> RemoveItemList = new List<MergedMonthlyUtilizationManagement>();
                    
                    RemoveItemList = (from inc in db.DbmsMergedMonthlyUtilizationManagement
                                      where inc.member_id == IncorrectMemberId
                                      select inc).ToList();

                    if (RemoveItemList != null)
                    {
                        if (RemoveItemList.Count > 0)
                        {
                            foreach (MergedMonthlyUtilizationManagement DeleteItem in RemoveItemList)
                            {
                                if (IncorrectMemberId.Equals(DeleteItem.member_id))
                                {
                                    db.DbmsMergedMonthlyUtilizationManagement.Attach(DeleteItem);
                                    db.DbmsMergedMonthlyUtilizationManagement.Remove(DeleteItem);
                                    db.SaveChanges();
                                }
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {

            }
        }

        private void RemoveBackupStdBillingWorktables(Guid IncorrectMemberId)
        {
            try
            {
                using (var db = new IcmsDataStagingDbContext())
                {
                    List<MergedStdBillingWorktable> RemoveItemList = new List<MergedStdBillingWorktable>();
                    
                    RemoveItemList = (from inc in db.DbmsMergedStdBillingWorktable
                                      where inc.member_id == IncorrectMemberId
                                      select inc).ToList();

                    if (RemoveItemList != null)
                    {
                        if (RemoveItemList.Count > 0)
                        {
                            foreach (MergedStdBillingWorktable DeleteItem in RemoveItemList)
                            {
                                if (IncorrectMemberId.Equals(DeleteItem.member_id))
                                {
                                    db.DbmsMergedStdBillingWorktable.Attach(DeleteItem);
                                    db.DbmsMergedStdBillingWorktable.Remove(DeleteItem);
                                    db.SaveChanges();
                                }
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {

            }
        }

        private void RemoveBackupSuspendCaseToTaskReferences(Guid IncorrectMemberId)
        {
            try
            {
                using (var db = new ICMS2DbContext())
                {
                    List<MergedSuspendCaseToTaskReference> RemoveItemList = new List<MergedSuspendCaseToTaskReference>();
                    
                    RemoveItemList = (from inc in db.DbmsMergedSuspendCaseToTaskReference
                                      where inc.member_id == IncorrectMemberId
                                      select inc).ToList();

                    if (RemoveItemList != null)
                    {
                        if (RemoveItemList.Count > 0)
                        {
                            foreach (MergedSuspendCaseToTaskReference DeleteItem in RemoveItemList)
                            {
                                if (IncorrectMemberId.Equals(DeleteItem.member_id))
                                {
                                    db.DbmsMergedSuspendCaseToTaskReference.Attach(DeleteItem);
                                    db.DbmsMergedSuspendCaseToTaskReference.Remove(DeleteItem);
                                    db.SaveChanges();
                                }
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {

            }
        }

        private void RemoveBackupSuspendedNotes(Guid IncorrectMemberId)
        {
            try
            {
                using (var db = new ICMS2DbContext())
                {
                    List<MergedSuspendedNotes> RemoveItemList = new List<MergedSuspendedNotes>();
                    
                    RemoveItemList = (from inc in db.DbmsMergedSuspendedNotes
                                      where inc.member_id == IncorrectMemberId
                                      select inc).ToList();

                    if (RemoveItemList != null)
                    {
                        if (RemoveItemList.Count > 0)
                        {
                            foreach (MergedSuspendedNotes DeleteItem in RemoveItemList)
                            {
                                if (IncorrectMemberId.Equals(DeleteItem.member_id))
                                {
                                    db.DbmsMergedSuspendedNotes.Attach(DeleteItem);
                                    db.DbmsMergedSuspendedNotes.Remove(DeleteItem);
                                    db.SaveChanges();
                                }
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {

            }
        }

        private void RemoveBackupSuspendedNotesOverrides(Guid IncorrectMemberId)
        {
            try
            {
                using (var db = new ICMS2DbContext())
                {
                    List<MergedSuspendedNotesOverride> RemoveItemList = new List<MergedSuspendedNotesOverride>();
                    
                    RemoveItemList = (from inc in db.DbmsMergedSuspendedNotesOverride
                                      where inc.member_id == IncorrectMemberId
                                      select inc).ToList();

                    if (RemoveItemList != null)
                    {
                        if (RemoveItemList.Count > 0)
                        {
                            foreach (MergedSuspendedNotesOverride DeleteItem in RemoveItemList)
                            {
                                if (IncorrectMemberId.Equals(DeleteItem.member_id))
                                {
                                    db.DbmsMergedSuspendedNotesOverride.Attach(DeleteItem);
                                    db.DbmsMergedSuspendedNotesOverride.Remove(DeleteItem);
                                    db.SaveChanges();
                                }
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {

            }
        }

        private void RemoveBackupTelephoneNotesAttachments(Guid IncorrectMemberId)
        {
            try
            {
                using (var db = new ICMS2DbContext())
                {
                    List<MergedTelephoneNotesAttachment> RemoveItemList = new List<MergedTelephoneNotesAttachment>();
                    
                    RemoveItemList = (from inc in db.DbmsMergedTelephoneNotesAttachment
                                      where inc.member_id == IncorrectMemberId
                                      select inc).ToList();

                    if (RemoveItemList != null)
                    {
                        if (RemoveItemList.Count > 0)
                        {
                            foreach (MergedTelephoneNotesAttachment DeleteItem in RemoveItemList)
                            {
                                if (IncorrectMemberId.Equals(DeleteItem.member_id))
                                {
                                    db.DbmsMergedTelephoneNotesAttachment.Attach(DeleteItem);
                                    db.DbmsMergedTelephoneNotesAttachment.Remove(DeleteItem);
                                    db.SaveChanges();
                                }
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {

            }
        }

        private void RemoveBackupTransitionalCareReferences(Guid IncorrectMemberId)
        {
            try
            {
                using (var db = new ICMS2DbContext())
                {
                    List<MergedTransitionalCareReference> RemoveItemList = new List<MergedTransitionalCareReference>();
                    
                    RemoveItemList = (from inc in db.DbmsMergedTransitionalCareReference
                                      where inc.member_id == IncorrectMemberId
                                      select inc).ToList();

                    if (RemoveItemList != null)
                    {
                        if (RemoveItemList.Count > 0)
                        {
                            foreach (MergedTransitionalCareReference DeleteItem in RemoveItemList)
                            {
                                if (IncorrectMemberId.Equals(DeleteItem.member_id))
                                {
                                    db.DbmsMergedTransitionalCareReference.Attach(DeleteItem);
                                    db.DbmsMergedTransitionalCareReference.Remove(DeleteItem);
                                    db.SaveChanges();
                                }
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {

            }
        }

        private void RemoveBackupUmAssignedToTasks(Guid IncorrectMemberId)
        {
            try
            {
                using (var db = new ICMS2DbContext())
                {
                    List<MergedUmAssignedToTask> RemoveItemList = new List<MergedUmAssignedToTask>();
                    
                    RemoveItemList = (from inc in db.DbmsMergedUmAssignedToTask
                                      where inc.member_id == IncorrectMemberId
                                      select inc).ToList();

                    if (RemoveItemList != null)
                    {
                        if (RemoveItemList.Count > 0)
                        {
                            foreach (MergedUmAssignedToTask DeleteItem in RemoveItemList)
                            {
                                if (IncorrectMemberId.Equals(DeleteItem.member_id))
                                {
                                    db.DbmsMergedUmAssignedToTask.Attach(DeleteItem);
                                    db.DbmsMergedUmAssignedToTask.Remove(DeleteItem);
                                    db.SaveChanges();
                                }
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {

            }
        }

        private void RemoveBackupUmAssignedToTaskTouchedReferences(Guid IncorrectMemberId)
        {
            try
            {
                using (var db = new ICMS2DbContext())
                {
                    List<MergedUmAssignedToTaskTouchedReference> RemoveItemList = new List<MergedUmAssignedToTaskTouchedReference>();
                    
                    RemoveItemList = (from inc in db.DbmsMergedUmAssignedToTaskTouchedReference
                                      where inc.member_id == IncorrectMemberId
                                      select inc).ToList();

                    if (RemoveItemList != null)
                    {
                        if (RemoveItemList.Count > 0)
                        {
                            foreach (MergedUmAssignedToTaskTouchedReference DeleteItem in RemoveItemList)
                            {
                                if (IncorrectMemberId.Equals(DeleteItem.member_id))
                                {
                                    db.DbmsMergedUmAssignedToTaskTouchedReference.Attach(DeleteItem);
                                    db.DbmsMergedUmAssignedToTaskTouchedReference.Remove(DeleteItem);
                                    db.SaveChanges();
                                }
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {

            }
        }

        private void RemoveBackupUmAutoApprovedDiagnosisTasks(Guid IncorrectMemberId)
        {
            try
            {
                using (var db = new ICMS2DbContext())
                {
                    List<MergedUmAutoApprovedDiagnosisTask> RemoveItemList = new List<MergedUmAutoApprovedDiagnosisTask>();
                    
                    RemoveItemList = (from inc in db.DbmsMergedUmAutoApprovedDiagnosisTask
                                      where inc.member_id == IncorrectMemberId
                                      select inc).ToList();

                    if (RemoveItemList != null)
                    {
                        if (RemoveItemList.Count > 0)
                        {
                            foreach (MergedUmAutoApprovedDiagnosisTask DeleteItem in RemoveItemList)
                            {
                                if (IncorrectMemberId.Equals(DeleteItem.member_id))
                                {
                                    db.DbmsMergedUmAutoApprovedDiagnosisTask.Attach(DeleteItem);
                                    db.DbmsMergedUmAutoApprovedDiagnosisTask.Remove(DeleteItem);
                                    db.SaveChanges();
                                }
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {

            }
        }

        private void RemoveBackupUtilizationReviewNoteTasks(Guid IncorrectMemberId)
        {
            try
            {
                using (var db = new ICMS2DbContext())
                {
                    List<MergedUtilizationReviewNoteTask> RemoveItemList = new List<MergedUtilizationReviewNoteTask>();
                    
                    RemoveItemList = (from inc in db.DbmsMergedUtilizationReviewNoteTask
                                      where inc.member_id == IncorrectMemberId
                                      select inc).ToList();

                    if (RemoveItemList != null)
                    {
                        if (RemoveItemList.Count > 0)
                        {
                            foreach (MergedUtilizationReviewNoteTask DeleteItem in RemoveItemList)
                            {
                                if (IncorrectMemberId.Equals(DeleteItem.member_id))
                                {
                                    db.DbmsMergedUtilizationReviewNoteTask.Attach(DeleteItem);
                                    db.DbmsMergedUtilizationReviewNoteTask.Remove(DeleteItem);
                                    db.SaveChanges();
                                }
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {

            }
        }

        private void RemoveBackupWcBillingWorktables(Guid IncorrectMemberId)
        {
            try
            {
                using (var db = new IcmsDataStagingDbContext())
                {
                    List<MergedWcBillingWorktable> RemoveItemList = new List<MergedWcBillingWorktable>();
                    
                    RemoveItemList = (from inc in db.DbmsMergedWcBillingWorktable
                                      where inc.member_id == IncorrectMemberId
                                      select inc).ToList();

                    if (RemoveItemList != null)
                    {
                        if (RemoveItemList.Count > 0)
                        {
                            foreach (MergedWcBillingWorktable DeleteItem in RemoveItemList)
                            {
                                if (IncorrectMemberId.Equals(DeleteItem.member_id))
                                {
                                    db.DbmsMergedWcBillingWorktable.Attach(DeleteItem);
                                    db.DbmsMergedWcBillingWorktable.Remove(DeleteItem);
                                    db.SaveChanges();
                                }
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {

            }
        }

        private void RemoveBackupWebClientNoteTasks(Guid IncorrectMemberId)
        {
            try
            {
                using (var db = new ICMS2DbContext())
                {
                    List<MergedWebClientNoteTask> RemoveItemList = new List<MergedWebClientNoteTask>();
                    
                    RemoveItemList = (from inc in db.DbmsMergedWebClientNoteTask
                                      where inc.member_id == IncorrectMemberId
                                      select inc).ToList();

                    if (RemoveItemList != null)
                    {
                        if (RemoveItemList.Count > 0)
                        {
                            foreach (MergedWebClientNoteTask DeleteItem in RemoveItemList)
                            {
                                if (IncorrectMemberId.Equals(DeleteItem.member_id))
                                {
                                    db.DbmsMergedWebClientNoteTask.Attach(DeleteItem);
                                    db.DbmsMergedWebClientNoteTask.Remove(DeleteItem);
                                    db.SaveChanges();
                                }
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {

            }
        }

        private void RemoveBackupWebOnlinePrecertTasks(Guid IncorrectMemberId)
        {
            try
            {
                using (var db = new ICMS2DbContext())
                {
                    List<MergedWebOnlinePrecertTask> RemoveItemList = new List<MergedWebOnlinePrecertTask>();
                    
                    RemoveItemList = (from inc in db.DbmsMergedWebOnlinePrecertTask
                                      where inc.member_id == IncorrectMemberId
                                      select inc).ToList();

                    if (RemoveItemList != null)
                    {
                        if (RemoveItemList.Count > 0)
                        {
                            foreach (MergedWebOnlinePrecertTask DeleteItem in RemoveItemList)
                            {
                                if (IncorrectMemberId.Equals(DeleteItem.member_id))
                                {
                                    db.DbmsMergedWebOnlinePrecertTask.Attach(DeleteItem);
                                    db.DbmsMergedWebOnlinePrecertTask.Remove(DeleteItem);
                                    db.SaveChanges();
                                }
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {

            }
        }


    }
}